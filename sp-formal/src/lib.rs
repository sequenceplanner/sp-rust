mod sp_fm_api;
use sp_fm_api::*;
pub mod planning;

use sp_domain::*;
use rayon::prelude::*;

/// A "compiled" model that includes specifications generated by formal methods.
pub struct CompiledModel {
    pub model: Model,
    pub computed_transition_planner_invariants: Vec<Specification>,
    pub computed_operation_planner_invariants: Vec<Specification>,
}

impl CompiledModel {
    pub fn from(model: Model) -> Self {

        // Compute additional transition invariants

        println!("refining model invariants");
        let ts_model = TransitionSystemModel::from(&model);

        let mut new_invariants = ts_model.invariants.clone();
        new_invariants.par_iter_mut().for_each(|i| {
            let orig_name = i.path().leaf();
            let new_name = format!("{}_refined", orig_name);
            let new_path = i.path().parent().add_child(&new_name);
            let new_predicate = refine_invariant(ts_model.clone(), i.invariant().clone()).expect("crash in refine sp-fm");
            let new_invariant = Specification {
                path: new_path,
                type_: SpecificationType::TransitionInvariant(new_predicate)
            };
            *i = new_invariant;
            println!("spec done...");
        });
        println!("refining invariants done");


        // Compute additional operation invariants.

        println!("refining replan specs");
        let mut new_replan_invariants: Vec<Specification> = model.operations.iter()
            .flat_map(|o| o.make_replan_invariants())
            .collect();

        new_replan_invariants.par_iter_mut().for_each(|i| {
            let orig_name = i.path().leaf();
            let new_name = format!("{}_refined", orig_name);
            let new_path = i.path().parent().add_child(&new_name);
            let new_predicate = refine_invariant(ts_model.clone(), i.invariant().clone()).expect("crash in refine sp-fm");
            let new_invariant = Specification {
                path: new_path,
                type_: SpecificationType::TransitionInvariant(new_predicate)
            };
            *i = new_invariant;
            println!("spec done...");
        });
        println!("refining replan specs done");

        CompiledModel {
            model,
            computed_transition_planner_invariants: new_invariants,
            computed_operation_planner_invariants: new_replan_invariants,
        }
    }
}
