{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1","program":"/home/endre/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","regex","/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"aho-corasick\"","--cfg","feature=\"default\"","--cfg","feature=\"memchr\"","--cfg","feature=\"perf\"","--cfg","feature=\"perf-cache\"","--cfg","feature=\"perf-dfa\"","--cfg","feature=\"perf-inline\"","--cfg","feature=\"perf-literal\"","--cfg","feature=\"std\"","--cfg","feature=\"thread_local\"","--cfg","feature=\"unicode\"","--cfg","feature=\"unicode-age\"","--cfg","feature=\"unicode-bool\"","--cfg","feature=\"unicode-case\"","--cfg","feature=\"unicode-gencat\"","--cfg","feature=\"unicode-perl\"","--cfg","feature=\"unicode-script\"","--cfg","feature=\"unicode-segment\"","-C","metadata=d978133a0b661db6","-C","extra-filename=-d978133a0b661db6","--out-dir","/home/endre/sp-rust/sp-codegen/target/rls/debug/deps","-L","dependency=/home/endre/sp-rust/sp-codegen/target/rls/debug/deps","--extern","aho_corasick=/home/endre/sp-rust/sp-codegen/target/rls/debug/deps/libaho_corasick-e34932195e398d92.rmeta","--extern","memchr=/home/endre/sp-rust/sp-codegen/target/rls/debug/deps/libmemchr-53ee893022648e33.rmeta","--extern","regex_syntax=/home/endre/sp-rust/sp-codegen/target/rls/debug/deps/libregex_syntax-86444a2558f9348c.rmeta","--extern","thread_local=/home/endre/sp-rust/sp-codegen/target/rls/debug/deps/libthread_local-dc2d4681215efd35.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/endre/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/endre/sp-rust/sp-codegen/target/rls/debug/deps/libregex-d978133a0b661db6.rmeta"},"prelude":{"crate_id":{"name":"regex","disambiguator":[16503221345326683165,657568136079211632]},"crate_root":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src","external_crates":[{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3103785602532093942,17390144583497853382]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[3916277366462804126,4478459115610208312]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[1713477286964588179,15844277248566971785]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13012427356130990406,14608520140697239788]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6447241057134257354,1413806012037948949]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4393201617425879462,3310437476178738552]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7079830315103279809,4606718705203350064]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5206394019873543407,10667910451093706265]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[9386824491997906070,17212049238264027415]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16927035401729681780,12437521449932722366]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[11652895559356135055,9563436424588767888]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[16517787911197841201,14116661015581648310]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":13,"id":{"name":"backtrace_sys","disambiguator":[5448928475534237502,8623809376237663283]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[9897490559936190142,12325087316115451923]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":15,"id":{"name":"aho_corasick","disambiguator":[6270104157386060802,220892773510262956]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[13909066504531052700,10505522985928618998]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":17,"id":{"name":"regex_syntax","disambiguator":[3623942628940775090,15144787734264406825]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":18,"id":{"name":"thread_local","disambiguator":[8118320739918449297,513135356687070696]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":19,"id":{"name":"lazy_static","disambiguator":[6740770218290746260,4056959873076346318]}}],"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":0,"byte_end":28598,"line_start":1,"line_end":785,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1629},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":23823,"byte_end":23828,"line_start":639,"line_end":639,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":23887,"byte_end":23888,"line_start":641,"line_end":641,"column_start":34,"column_end":35},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":23943,"byte_end":23944,"line_start":643,"line_end":643,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":23995,"byte_end":23996,"line_start":645,"line_end":645,"column_start":26,"column_end":27},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1119},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24072,"byte_end":24078,"line_start":649,"line_end":649,"column_start":5,"column_end":11},"alias_span":null,"name":"escape","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2355},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24080,"byte_end":24096,"line_start":649,"line_end":649,"column_start":13,"column_end":29},"alias_span":null,"name":"CaptureLocations","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1278},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24098,"byte_end":24112,"line_start":649,"line_end":649,"column_start":31,"column_end":45},"alias_span":null,"name":"CaptureMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1187},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24114,"byte_end":24126,"line_start":649,"line_end":649,"column_start":47,"column_end":59},"alias_span":null,"name":"CaptureNames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1223},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24128,"byte_end":24136,"line_start":649,"line_end":649,"column_start":61,"column_end":69},"alias_span":null,"name":"Captures","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1218},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24142,"byte_end":24151,"line_start":650,"line_end":650,"column_start":5,"column_end":14},"alias_span":null,"name":"Locations","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2330},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24153,"byte_end":24158,"line_start":650,"line_end":650,"column_start":16,"column_end":21},"alias_span":null,"name":"Match","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1289},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24160,"byte_end":24167,"line_start":650,"line_end":650,"column_start":23,"column_end":30},"alias_span":null,"name":"Matches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1319},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24169,"byte_end":24177,"line_start":650,"line_end":650,"column_start":32,"column_end":40},"alias_span":null,"name":"NoExpand","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2350},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24179,"byte_end":24184,"line_start":650,"line_end":650,"column_start":42,"column_end":47},"alias_span":null,"name":"Regex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1300},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24186,"byte_end":24194,"line_start":650,"line_end":650,"column_start":49,"column_end":57},"alias_span":null,"name":"Replacer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2362},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24196,"byte_end":24207,"line_start":650,"line_end":650,"column_start":59,"column_end":70},"alias_span":null,"name":"ReplacerRef","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1198},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24209,"byte_end":24214,"line_start":650,"line_end":650,"column_start":72,"column_end":77},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1208},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24220,"byte_end":24226,"line_start":651,"line_end":651,"column_start":5,"column_end":11},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1266},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24228,"byte_end":24245,"line_start":651,"line_end":651,"column_start":13,"column_end":30},"alias_span":null,"name":"SubCaptureMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":27707,"byte_end":27708,"line_start":743,"line_end":743,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":36}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":27745,"byte_end":27746,"line_start":744,"line_end":744,"column_start":36,"column_end":37},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":36}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":27770,"byte_end":27771,"line_start":745,"line_end":745,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":36}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":27800,"byte_end":27801,"line_start":746,"line_end":746,"column_start":28,"column_end":29},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":36}},{"kind":"Use","ref_id":{"krate":0,"index":112},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28398,"byte_end":28406,"line_start":780,"line_end":780,"column_start":22,"column_end":30},"alias_span":null,"name":"Compiler","value":"","parent":{"krate":0,"index":1359}},{"kind":"Use","ref_id":{"krate":0,"index":381},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28427,"byte_end":28431,"line_start":781,"line_end":781,"column_start":20,"column_end":24},"alias_span":null,"name":"Exec","value":"","parent":{"krate":0,"index":1359}},{"kind":"Use","ref_id":{"krate":0,"index":388},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28433,"byte_end":28444,"line_start":781,"line_end":781,"column_start":26,"column_end":37},"alias_span":null,"name":"ExecBuilder","value":"","parent":{"krate":0,"index":1359}},{"kind":"Use","ref_id":{"krate":0,"index":1795},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28467,"byte_end":28471,"line_start":782,"line_end":782,"column_start":21,"column_end":25},"alias_span":null,"name":"Char","value":"","parent":{"krate":0,"index":1359}},{"kind":"Use","ref_id":{"krate":0,"index":1771},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28473,"byte_end":28482,"line_start":782,"line_end":782,"column_start":27,"column_end":36},"alias_span":null,"name":"CharInput","value":"","parent":{"krate":0,"index":1359}},{"kind":"Use","ref_id":{"krate":0,"index":555},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28484,"byte_end":28489,"line_start":782,"line_end":782,"column_start":38,"column_end":43},"alias_span":null,"name":"Input","value":"","parent":{"krate":0,"index":1359}},{"kind":"Use","ref_id":{"krate":0,"index":1761},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28491,"byte_end":28498,"line_start":782,"line_end":782,"column_start":45,"column_end":52},"alias_span":null,"name":"InputAt","value":"","parent":{"krate":0,"index":1359}},{"kind":"Use","ref_id":{"krate":0,"index":1817},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28522,"byte_end":28537,"line_start":783,"line_end":783,"column_start":22,"column_end":37},"alias_span":null,"name":"LiteralSearcher","value":"","parent":{"krate":0,"index":1359}},{"kind":"Use","ref_id":{"krate":0,"index":1980},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28558,"byte_end":28567,"line_start":784,"line_end":784,"column_start":20,"column_end":29},"alias_span":null,"name":"EmptyLook","value":"","parent":{"krate":0,"index":1359}},{"kind":"Use","ref_id":{"krate":0,"index":1933},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28569,"byte_end":28573,"line_start":784,"line_end":784,"column_start":31,"column_end":35},"alias_span":null,"name":"Inst","value":"","parent":{"krate":0,"index":1359}},{"kind":"Use","ref_id":{"krate":0,"index":2013},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28575,"byte_end":28585,"line_start":784,"line_end":784,"column_start":37,"column_end":47},"alias_span":null,"name":"InstRanges","value":"","parent":{"krate":0,"index":1359}},{"kind":"Use","ref_id":{"krate":0,"index":1915},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28587,"byte_end":28594,"line_start":784,"line_end":784,"column_start":49,"column_end":56},"alias_span":null,"name":"Program","value":"","parent":{"krate":0,"index":1359}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":0,"byte_end":28598,"line_start":1,"line_end":785,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":36},{"krate":0,"index":41},{"krate":0,"index":70},{"krate":0,"index":86},{"krate":0,"index":206},{"krate":0,"index":339},{"krate":0,"index":348},{"krate":0,"index":505},{"krate":0,"index":527},{"krate":0,"index":531},{"krate":0,"index":534},{"krate":0,"index":635},{"krate":0,"index":737},{"krate":0,"index":765},{"krate":0,"index":809},{"krate":0,"index":814},{"krate":0,"index":1040},{"krate":0,"index":1042},{"krate":0,"index":1100},{"krate":0,"index":1327},{"krate":0,"index":1346},{"krate":0,"index":1359}],"decl_id":null,"docs":"This crate provides a library for parsing, compiling, and executing regular\nexpressions. Its syntax is similar to Perl-style regular expressions, but lacks\na few features like look around and backreferences. In exchange, all searches\nexecute in linear time with respect to the size of the regular expression and\nsearch text.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":23179,"byte_end":23201,"line_start":615,"line_end":615,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":36},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":27668,"byte_end":27673,"line_start":742,"line_end":742,"column_start":9,"column_end":14},"name":"bytes","qualname":"::bytes","value":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40}],"decl_id":null,"docs":"Match regular expressions on arbitrary bytes.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":27636,"byte_end":27659,"line_start":741,"line_end":741,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":112},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":43003,"byte_end":43011,"line_start":27,"line_end":27,"column_start":12,"column_end":20},"name":"Compiler","qualname":"::compile::Compiler","value":"Compiler {  }","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120}],"decl_id":null,"docs":" A compiler translates a regular expression AST to a sequence of\n instructions. The sequence of instructions represents an NFA.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":43422,"byte_end":43425,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"new","qualname":"<Compiler>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new regular expression compiler.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":44020,"byte_end":44030,"line_start":58,"line_end":58,"column_start":12,"column_end":22},"name":"size_limit","qualname":"<Compiler>::size_limit","value":"fn (mut self, size_limit: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The size of the resulting program is limited by size_limit. If\n the program approximately exceeds the given size (in bytes), then\n compilation will stop and return an error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":44775,"byte_end":44780,"line_start":74,"line_end":74,"column_start":12,"column_end":17},"name":"bytes","qualname":"<Compiler>::bytes","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" If bytes is true, then the program is compiled as a byte based\n automaton, which incorporates UTF-8 decoding into the machine. If it's\n false, then the automaton is Unicode scalar value based, e.g., an\n engine utilizing such an automaton is responsible for UTF-8 decoding.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":45063,"byte_end":45072,"line_start":83,"line_end":83,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<Compiler>::only_utf8","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When disabled, the program compiled may match arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":45555,"byte_end":45558,"line_start":95,"line_end":95,"column_start":12,"column_end":15},"name":"dfa","qualname":"<Compiler>::dfa","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set, the machine returned is suitable for use in the DFA matching\n engine.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":45793,"byte_end":45800,"line_start":102,"line_end":102,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Compiler>::reverse","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set, the machine returned is suitable for matching text in\n reverse. In particular, all concatenations are flipped.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":46154,"byte_end":46161,"line_start":112,"line_end":112,"column_start":12,"column_end":19},"name":"compile","qualname":"<Compiler>::compile","value":"fn (mut self, exprs: &[Hir]) -> result::Result<Program, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compile a regular expression given its AST.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1630},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/error.rs","byte_start":157788,"byte_end":157794,"line_start":8,"line_end":8,"column_start":5,"column_end":11},"name":"Syntax","qualname":"::error::Error::Syntax","value":"Error::Syntax(String)","parent":{"krate":0,"index":1629},"children":[],"decl_id":null,"docs":" A syntax error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1633},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/error.rs","byte_start":157914,"byte_end":157928,"line_start":11,"line_end":11,"column_start":5,"column_end":19},"name":"CompiledTooBig","qualname":"::error::Error::CompiledTooBig","value":"Error::CompiledTooBig(usize)","parent":{"krate":0,"index":1629},"children":[],"decl_id":null,"docs":" The compiled program exceeded the set size limit.\n The argument is the size limit imposed.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1636},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/error.rs","byte_start":158215,"byte_end":158230,"line_start":18,"line_end":18,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::error::Error::__Nonexhaustive","value":"Error::__Nonexhaustive","parent":{"krate":0,"index":1629},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1629},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/error.rs","byte_start":157752,"byte_end":157757,"line_start":6,"line_end":6,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Error::{Syntax, CompiledTooBig, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":1630},{"krate":0,"index":1633},{"krate":0,"index":1636}],"decl_id":null,"docs":" An error that occurred during parsing or compiling a regular expression.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":381},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":160766,"byte_end":160770,"line_start":33,"line_end":33,"column_start":12,"column_end":16},"name":"Exec","qualname":"::exec::Exec","value":"Exec {  }","parent":null,"children":[{"krate":0,"index":382},{"krate":0,"index":383}],"decl_id":null,"docs":" `Exec` manages the execution of a regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1643},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":161130,"byte_end":161140,"line_start":44,"line_end":44,"column_start":12,"column_end":22},"name":"ExecNoSync","qualname":"::exec::ExecNoSync","value":"ExecNoSync {  }","parent":null,"children":[{"krate":0,"index":1645},{"krate":0,"index":1646}],"decl_id":null,"docs":" `ExecNoSync` is like `Exec`, except it embeds a reference to a cache. This\n means it is no longer Sync, but we can now avoid the overhead of\n synchronization to fetch the cache.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":384},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":161392,"byte_end":161405,"line_start":52,"line_end":52,"column_start":12,"column_end":25},"name":"ExecNoSyncStr","qualname":"::exec::ExecNoSyncStr","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ExecNoSyncStr` is like `ExecNoSync`, but matches on &str instead of &[u8].\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":388},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":163679,"byte_end":163690,"line_start":100,"line_end":100,"column_start":12,"column_end":23},"name":"ExecBuilder","qualname":"::exec::ExecBuilder","value":"ExecBuilder {  }","parent":null,"children":[{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392}],"decl_id":null,"docs":" Facilitates the construction of an executor by exposing various knobs\n to control how a regex is executed and what kinds of resources it's\n permitted to use.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":164291,"byte_end":164294,"line_start":122,"line_end":122,"column_start":12,"column_end":15},"name":"new","qualname":"<ExecBuilder>::new","value":"fn (re: &str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a regex execution builder.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":164620,"byte_end":164628,"line_start":131,"line_end":131,"column_start":12,"column_end":20},"name":"new_many","qualname":"<ExecBuilder>::new_many","value":"fn <I, S> (res: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Like new, but compiles the union of the given regular expressions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":164943,"byte_end":164954,"line_start":142,"line_end":142,"column_start":12,"column_end":23},"name":"new_options","qualname":"<ExecBuilder>::new_options","value":"fn (opts: RegexOptions) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a regex execution builder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":165452,"byte_end":165461,"line_start":158,"line_end":158,"column_start":12,"column_end":21},"name":"automatic","qualname":"<ExecBuilder>::automatic","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the matching engine to be automatically determined.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":165776,"byte_end":165779,"line_start":168,"line_end":168,"column_start":12,"column_end":15},"name":"nfa","qualname":"<ExecBuilder>::nfa","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the matching engine to use the NFA algorithm no matter what\n optimizations are possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":166270,"byte_end":166290,"line_start":181,"line_end":181,"column_start":12,"column_end":32},"name":"bounded_backtracking","qualname":"<ExecBuilder>::bounded_backtracking","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the matching engine to use a bounded backtracking engine no\n matter what optimizations are possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":166858,"byte_end":166863,"line_start":195,"line_end":195,"column_start":12,"column_end":17},"name":"bytes","qualname":"<ExecBuilder>::bytes","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Compiles byte based programs for use with the NFA matching engines.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":167134,"byte_end":167143,"line_start":204,"line_end":204,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<ExecBuilder>::only_utf8","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When disabled, the program compiled may match arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":167266,"byte_end":167273,"line_start":210,"line_end":210,"column_start":12,"column_end":19},"name":"unicode","qualname":"<ExecBuilder>::unicode","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the Unicode flag.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":170498,"byte_end":170503,"line_start":286,"line_end":286,"column_start":12,"column_end":17},"name":"build","qualname":"<ExecBuilder>::build","value":"fn (self) -> Result<Exec, Error>","parent":null,"children":[],"decl_id":null,"docs":" Build an executor that can run a regular expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":199479,"byte_end":199494,"line_start":1140,"line_end":1140,"column_start":12,"column_end":27},"name":"many_matches_at","qualname":"<ExecNoSync>::many_matches_at","value":"fn (&self, matches: &mut [bool], text: &[u8], start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Finds which regular expressions match the given text.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":202601,"byte_end":202617,"line_start":1239,"line_end":1239,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<ExecNoSync>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":202746,"byte_end":202762,"line_start":1245,"line_end":1245,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<ExecNoSyncStr>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":202967,"byte_end":202975,"line_start":1253,"line_end":1253,"column_start":12,"column_end":20},"name":"searcher","qualname":"<Exec>::searcher","value":"fn (&self) -> ExecNoSync","parent":null,"children":[],"decl_id":null,"docs":" Get a searcher that isn't Sync.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":202939,"byte_end":202953,"line_start":1252,"line_end":1252,"column_start":41,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":203362,"byte_end":203374,"line_start":1263,"line_end":1263,"column_start":12,"column_end":24},"name":"searcher_str","qualname":"<Exec>::searcher_str","value":"fn (&self) -> ExecNoSyncStr","parent":null,"children":[],"decl_id":null,"docs":" Get a searcher that isn't Sync and can match on &str.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":203334,"byte_end":203348,"line_start":1262,"line_end":1262,"column_start":41,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":203500,"byte_end":203510,"line_start":1268,"line_end":1268,"column_start":12,"column_end":22},"name":"into_regex","qualname":"<Exec>::into_regex","value":"fn (self) -> re_unicode::Regex","parent":null,"children":[],"decl_id":null,"docs":" Build a Regex from this executor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":203641,"byte_end":203655,"line_start":1273,"line_end":1273,"column_start":12,"column_end":26},"name":"into_regex_set","qualname":"<Exec>::into_regex_set","value":"fn (self) -> re_set::unicode::RegexSet","parent":null,"children":[],"decl_id":null,"docs":" Build a RegexSet from this executor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":203830,"byte_end":203845,"line_start":1278,"line_end":1278,"column_start":12,"column_end":27},"name":"into_byte_regex","qualname":"<Exec>::into_byte_regex","value":"fn (self) -> re_bytes::Regex","parent":null,"children":[],"decl_id":null,"docs":" Build a Regex from this executor that can match arbitrary bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":204003,"byte_end":204022,"line_start":1283,"line_end":1283,"column_start":12,"column_end":31},"name":"into_byte_regex_set","qualname":"<Exec>::into_byte_regex_set","value":"fn (self) -> re_set::bytes::RegexSet","parent":null,"children":[],"decl_id":null,"docs":" Build a RegexSet from this executor that can match arbitrary bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":204209,"byte_end":204222,"line_start":1289,"line_end":1289,"column_start":12,"column_end":25},"name":"regex_strings","qualname":"<Exec>::regex_strings","value":"fn (&self) -> &[String]","parent":null,"children":[],"decl_id":null,"docs":" The original regular expressions given by the caller that were\n compiled.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":485},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":204379,"byte_end":204392,"line_start":1296,"line_end":1296,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Exec>::capture_names","value":"fn (&self) -> &[Option<String>]","parent":null,"children":[],"decl_id":null,"docs":" Return a slice of capture names.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":204567,"byte_end":204583,"line_start":1302,"line_end":1302,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<Exec>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to named groups mapping (from group name to\n group position).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1761},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":227767,"byte_end":227774,"line_start":15,"line_end":15,"column_start":12,"column_end":19},"name":"InputAt","qualname":"::input::InputAt","value":"InputAt {  }","parent":null,"children":[{"krate":0,"index":1762},{"krate":0,"index":1763},{"krate":0,"index":1764},{"krate":0,"index":1765}],"decl_id":null,"docs":" Represents a location in the input.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":227756,"byte_end":227845,"line_start":15,"line_end":20,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":227946,"byte_end":227954,"line_start":24,"line_end":24,"column_start":12,"column_end":20},"name":"is_start","qualname":"<InputAt>::is_start","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this position is at the beginning of the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":228081,"byte_end":228087,"line_start":29,"line_end":29,"column_start":12,"column_end":18},"name":"is_end","qualname":"<InputAt>::is_end","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this position is past the end of the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":228333,"byte_end":228337,"line_start":37,"line_end":37,"column_start":12,"column_end":16},"name":"char","qualname":"<InputAt>::char","value":"fn (&self) -> Char","parent":null,"children":[],"decl_id":null,"docs":" Returns the character at this position.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":228431,"byte_end":228435,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"byte","qualname":"<InputAt>::byte","value":"fn (&self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte at this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":228562,"byte_end":228565,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"len","qualname":"<InputAt>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the UTF-8 width of the character at this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":228710,"byte_end":228718,"line_start":53,"line_end":53,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<InputAt>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the UTF-8 width of the character at this position\n is zero.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":228826,"byte_end":228829,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"pos","qualname":"<InputAt>::pos","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte offset of this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":228950,"byte_end":228958,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"next_pos","qualname":"<InputAt>::next_pos","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte offset of the next position in the input.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":555},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":229084,"byte_end":229089,"line_start":69,"line_end":69,"column_start":11,"column_end":16},"name":"Input","qualname":"::input::Input","value":"Input: fmt::Debug","parent":null,"children":[{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563}],"decl_id":null,"docs":" An abstraction over input used in the matching engines.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":229174,"byte_end":229176,"line_start":71,"line_end":71,"column_start":8,"column_end":10},"name":"at","qualname":"::input::Input::at","value":"fn (&self, i: usize) -> InputAt","parent":{"krate":0,"index":555},"children":[],"decl_id":null,"docs":" Return an encoding of the position at byte offset `i`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":557},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":229353,"byte_end":229362,"line_start":76,"line_end":76,"column_start":8,"column_end":17},"name":"next_char","qualname":"::input::Input::next_char","value":"fn (&self, at: InputAt) -> Char","parent":{"krate":0,"index":555},"children":[],"decl_id":null,"docs":" Return the Unicode character occurring next to `at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":229543,"byte_end":229556,"line_start":81,"line_end":81,"column_start":8,"column_end":21},"name":"previous_char","qualname":"::input::Input::previous_char","value":"fn (&self, at: InputAt) -> Char","parent":{"krate":0,"index":555},"children":[],"decl_id":null,"docs":" Return the Unicode character occurring previous to `at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":229696,"byte_end":229710,"line_start":85,"line_end":85,"column_start":8,"column_end":22},"name":"is_empty_match","qualname":"::input::Input::is_empty_match","value":"fn (&self, at: InputAt, empty: &InstEmptyLook) -> bool","parent":{"krate":0,"index":555},"children":[],"decl_id":null,"docs":" Return true if the given empty width instruction matches at the\n input position given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":229817,"byte_end":229826,"line_start":88,"line_end":88,"column_start":8,"column_end":17},"name":"prefix_at","qualname":"::input::Input::prefix_at","value":"fn (&self, prefixes: &LiteralSearcher, at: InputAt) -> Option<InputAt>","parent":{"krate":0,"index":555},"children":[],"decl_id":null,"docs":" Scan the input for a matching prefix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":229976,"byte_end":229979,"line_start":95,"line_end":95,"column_start":8,"column_end":11},"name":"len","qualname":"::input::Input::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":555},"children":[],"decl_id":null,"docs":" The number of bytes in the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":230041,"byte_end":230049,"line_start":98,"line_end":98,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::input::Input::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":555},"children":[],"decl_id":null,"docs":" Whether the input is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":230160,"byte_end":230168,"line_start":103,"line_end":103,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::input::Input::as_bytes","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":555},"children":[],"decl_id":null,"docs":" Return the given input as a sequence of bytes.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1771},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":230972,"byte_end":230981,"line_start":142,"line_end":142,"column_start":12,"column_end":21},"name":"CharInput","qualname":"::input::CharInput","value":"","parent":null,"children":[],"decl_id":null,"docs":" An input reader over characters.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":230961,"byte_end":230996,"line_start":142,"line_end":142,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":231100,"byte_end":231103,"line_start":146,"line_end":146,"column_start":12,"column_end":15},"name":"new","qualname":"<CharInput>::new","value":"fn (s: &'t [u8]) -> CharInput<'t>","parent":null,"children":[],"decl_id":null,"docs":" Return a new character input reader for the given string.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1795},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":237251,"byte_end":237255,"line_start":348,"line_end":348,"column_start":12,"column_end":16},"name":"Char","qualname":"::input::Char","value":"","parent":null,"children":[],"decl_id":null,"docs":" An inline representation of `Option<char>`.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":237240,"byte_end":237261,"line_start":348,"line_end":348,"column_start":1,"column_end":22}},{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":237240,"byte_end":237261,"line_start":348,"line_end":348,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":237579,"byte_end":237586,"line_start":362,"line_end":362,"column_start":12,"column_end":19},"name":"is_none","qualname":"<Char>::is_none","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the character is absent.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":237558,"byte_end":237567,"line_start":361,"line_end":361,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":237790,"byte_end":237798,"line_start":370,"line_end":370,"column_start":12,"column_end":20},"name":"len_utf8","qualname":"<Char>::len_utf8","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the character's UTF-8 encoding.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":237769,"byte_end":237778,"line_start":369,"line_end":369,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":238021,"byte_end":238033,"line_start":377,"line_end":377,"column_start":12,"column_end":24},"name":"is_word_char","qualname":"<Char>::is_word_char","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the character is a word character.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":238527,"byte_end":238539,"line_start":388,"line_end":388,"column_start":12,"column_end":24},"name":"is_word_byte","qualname":"<Char>::is_word_byte","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the byte is a word byte.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1817},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":241141,"byte_end":241156,"line_start":16,"line_end":16,"column_start":12,"column_end":27},"name":"LiteralSearcher","qualname":"::literal::imp::LiteralSearcher","value":"LiteralSearcher {  }","parent":null,"children":[{"krate":0,"index":1818},{"krate":0,"index":1819},{"krate":0,"index":1820},{"krate":0,"index":1821}],"decl_id":null,"docs":" A prefix extracted from a compiled regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":242212,"byte_end":242217,"line_start":46,"line_end":46,"column_start":12,"column_end":17},"name":"empty","qualname":"<LiteralSearcher>::empty","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher that never matches and never advances the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":242368,"byte_end":242376,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"prefixes","qualname":"<LiteralSearcher>::prefixes","value":"fn (lits: Literals) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for literal prefixes from the given set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":242569,"byte_end":242577,"line_start":57,"line_end":57,"column_start":12,"column_end":20},"name":"suffixes","qualname":"<LiteralSearcher>::suffixes","value":"fn (lits: Literals) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for literal suffixes from the given set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":243438,"byte_end":243446,"line_start":78,"line_end":78,"column_start":12,"column_end":20},"name":"complete","qualname":"<LiteralSearcher>::complete","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all matches comprise the entire regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":243648,"byte_end":243652,"line_start":84,"line_end":84,"column_start":12,"column_end":16},"name":"find","qualname":"<LiteralSearcher>::find","value":"fn (&self, haystack: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Find the position of a literal in `haystack` if it exists.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":243620,"byte_end":243634,"line_start":83,"line_end":83,"column_start":41,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":244341,"byte_end":244351,"line_start":101,"line_end":101,"column_start":12,"column_end":22},"name":"find_start","qualname":"<LiteralSearcher>::find_start","value":"fn (&self, haystack: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Like find, except matches must start at index `0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":244739,"byte_end":244747,"line_start":114,"line_end":114,"column_start":12,"column_end":20},"name":"find_end","qualname":"<LiteralSearcher>::find_end","value":"fn (&self, haystack: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Like find, except matches must end at index `haystack.len()`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":245172,"byte_end":245176,"line_start":127,"line_end":127,"column_start":12,"column_end":16},"name":"iter","qualname":"<LiteralSearcher>::iter","value":"fn (&self) -> LiteralIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all literals to be matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":245743,"byte_end":245746,"line_start":139,"line_end":139,"column_start":12,"column_end":15},"name":"lcp","qualname":"<LiteralSearcher>::lcp","value":"fn (&self) -> &FreqyPacked","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for the longest common prefix of this matcher.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":245881,"byte_end":245884,"line_start":144,"line_end":144,"column_start":12,"column_end":15},"name":"lcs","qualname":"<LiteralSearcher>::lcs","value":"fn (&self) -> &FreqyPacked","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for the longest common suffix of this matcher.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":245993,"byte_end":246001,"line_start":149,"line_end":149,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<LiteralSearcher>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this prefix is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":246117,"byte_end":246120,"line_start":154,"line_end":154,"column_start":12,"column_end":15},"name":"len","qualname":"<LiteralSearcher>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of prefixes in this machine.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":246532,"byte_end":246548,"line_start":167,"line_end":167,"column_start":12,"column_end":28},"name":"approximate_size","qualname":"<LiteralSearcher>::approximate_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate heap usage of literals in bytes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":682},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":249037,"byte_end":249042,"line_start":236,"line_end":236,"column_start":5,"column_end":10},"name":"Empty","qualname":"::literal::imp::LiteralIter::Empty","value":"LiteralIter::Empty","parent":{"krate":0,"index":680},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":684},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":249048,"byte_end":249053,"line_start":237,"line_end":237,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::literal::imp::LiteralIter::Bytes","value":"LiteralIter::Bytes(&'a [u8])","parent":{"krate":0,"index":680},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":687},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":249069,"byte_end":249075,"line_start":238,"line_end":238,"column_start":5,"column_end":11},"name":"Single","qualname":"::literal::imp::LiteralIter::Single","value":"LiteralIter::Single(&'a [u8])","parent":{"krate":0,"index":680},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":690},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":249091,"byte_end":249093,"line_start":239,"line_end":239,"column_start":5,"column_end":7},"name":"AC","qualname":"::literal::imp::LiteralIter::AC","value":"LiteralIter::AC(&'a [Literal])","parent":{"krate":0,"index":680},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":693},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":249114,"byte_end":249120,"line_start":240,"line_end":240,"column_start":5,"column_end":11},"name":"Packed","qualname":"::literal::imp::LiteralIter::Packed","value":"LiteralIter::Packed(&'a [Literal])","parent":{"krate":0,"index":680},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":680},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":249015,"byte_end":249026,"line_start":235,"line_end":235,"column_start":10,"column_end":21},"name":"LiteralIter","qualname":"::literal::imp::LiteralIter","value":"LiteralIter::{Empty, Bytes, Single, AC, Packed}","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":684},{"krate":0,"index":687},{"krate":0,"index":690},{"krate":0,"index":693}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1857},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":253438,"byte_end":253449,"line_start":380,"line_end":380,"column_start":12,"column_end":23},"name":"FreqyPacked","qualname":"::literal::imp::FreqyPacked","value":"FreqyPacked {  }","parent":null,"children":[{"krate":0,"index":1858},{"krate":0,"index":1859},{"krate":0,"index":1860},{"krate":0,"index":1861},{"krate":0,"index":1862},{"krate":0,"index":1863}],"decl_id":null,"docs":" Provides an implementation of fast subtring search using frequency\n analysis.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":255898,"byte_end":255902,"line_start":456,"line_end":456,"column_start":12,"column_end":16},"name":"find","qualname":"<FreqyPacked>::find","value":"fn (&self, haystack: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":255870,"byte_end":255884,"line_start":455,"line_end":455,"column_start":41,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":256736,"byte_end":256745,"line_start":482,"line_end":482,"column_start":12,"column_end":21},"name":"is_suffix","qualname":"<FreqyPacked>::is_suffix","value":"fn (&self, text: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":256708,"byte_end":256722,"line_start":481,"line_end":481,"column_start":41,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":256920,"byte_end":256923,"line_start":489,"line_end":489,"column_start":12,"column_end":15},"name":"len","qualname":"<FreqyPacked>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":256983,"byte_end":256991,"line_start":493,"line_end":493,"column_start":12,"column_end":20},"name":"char_len","qualname":"<FreqyPacked>::char_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1915},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":292472,"byte_end":292479,"line_start":18,"line_end":18,"column_start":12,"column_end":19},"name":"Program","qualname":"::prog::Program","value":"Program { insts, matches, captures, capture_name_idx, start, byte_classes, only_utf8, is_bytes, is_dfa, is_reverse, is_anchored_start, is_anchored_end, has_unicode_word_boundary, prefixes, dfa_size_limit }","parent":null,"children":[{"krate":0,"index":1916},{"krate":0,"index":1917},{"krate":0,"index":1918},{"krate":0,"index":1919},{"krate":0,"index":1920},{"krate":0,"index":1921},{"krate":0,"index":1922},{"krate":0,"index":1923},{"krate":0,"index":1924},{"krate":0,"index":1925},{"krate":0,"index":1926},{"krate":0,"index":1927},{"krate":0,"index":1928},{"krate":0,"index":1929},{"krate":0,"index":1930}],"decl_id":null,"docs":" Program is a sequence of instructions and various facts about thos\n instructions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1916},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":292549,"byte_end":292554,"line_start":20,"line_end":20,"column_start":9,"column_end":14},"name":"insts","qualname":"::prog::Program::insts","value":"std::vec::Vec<prog::Inst>","parent":{"krate":0,"index":1915},"children":[],"decl_id":null,"docs":" A sequence of instructions that represents an NFA.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1917},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":292719,"byte_end":292726,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"name":"matches","qualname":"::prog::Program::matches","value":"std::vec::Vec<usize>","parent":{"krate":0,"index":1915},"children":[],"decl_id":null,"docs":" Pointers to each Match instruction in the sequence.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1918},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":292860,"byte_end":292868,"line_start":27,"line_end":27,"column_start":9,"column_end":17},"name":"captures","qualname":"::prog::Program::captures","value":"std::vec::Vec<std::option::Option<std::string::String>>","parent":{"krate":0,"index":1915},"children":[],"decl_id":null,"docs":" The ordered sequence of all capture groups extracted from the AST.\n Unnamed groups are `None`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1919},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":292961,"byte_end":292977,"line_start":29,"line_end":29,"column_start":9,"column_end":25},"name":"capture_name_idx","qualname":"::prog::Program::capture_name_idx","value":"std::sync::Arc<std::collections::HashMap<std::string::String, usize>>","parent":{"krate":0,"index":1915},"children":[],"decl_id":null,"docs":" Pointers to all named capture groups into `captures`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1920},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":293334,"byte_end":293339,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"start","qualname":"::prog::Program::start","value":"usize","parent":{"krate":0,"index":1915},"children":[],"decl_id":null,"docs":" A pointer to the start instruction. This can vary depending on how\n the program was compiled. For example, programs for use with the DFA\n engine have a `.*?` inserted at the beginning of unanchored regular\n expressions. The actual starting point of the program is after the\n `.*?`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1921},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":293453,"byte_end":293465,"line_start":38,"line_end":38,"column_start":9,"column_end":21},"name":"byte_classes","qualname":"::prog::Program::byte_classes","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":1915},"children":[],"decl_id":null,"docs":" A set of equivalence classes for discriminating bytes in the compiled\n program.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1922},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":293544,"byte_end":293553,"line_start":40,"line_end":40,"column_start":9,"column_end":18},"name":"only_utf8","qualname":"::prog::Program::only_utf8","value":"bool","parent":{"krate":0,"index":1915},"children":[],"decl_id":null,"docs":" When true, this program can only match valid UTF-8.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1923},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":293677,"byte_end":293685,"line_start":43,"line_end":43,"column_start":9,"column_end":17},"name":"is_bytes","qualname":"::prog::Program::is_bytes","value":"bool","parent":{"krate":0,"index":1915},"children":[],"decl_id":null,"docs":" When true, this program uses byte range instructions instead of Unicode\n range instructions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1924},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":293874,"byte_end":293880,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"name":"is_dfa","qualname":"::prog::Program::is_dfa","value":"bool","parent":{"krate":0,"index":1915},"children":[],"decl_id":null,"docs":" When true, the program is compiled for DFA matching. For example, this\n implies `is_bytes` and also inserts a preceding `.*?` for unanchored\n regexes.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1925},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":293986,"byte_end":293996,"line_start":50,"line_end":50,"column_start":9,"column_end":19},"name":"is_reverse","qualname":"::prog::Program::is_reverse","value":"bool","parent":{"krate":0,"index":1915},"children":[],"decl_id":null,"docs":" When true, the program matches text in reverse (for use only in the\n DFA).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1926},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":294078,"byte_end":294095,"line_start":52,"line_end":52,"column_start":9,"column_end":26},"name":"is_anchored_start","qualname":"::prog::Program::is_anchored_start","value":"bool","parent":{"krate":0,"index":1915},"children":[],"decl_id":null,"docs":" Whether the regex must match from the start of the input.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1927},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":294173,"byte_end":294188,"line_start":54,"line_end":54,"column_start":9,"column_end":24},"name":"is_anchored_end","qualname":"::prog::Program::is_anchored_end","value":"bool","parent":{"krate":0,"index":1915},"children":[],"decl_id":null,"docs":" Whether the regex must match at the end of the input.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1928},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":294279,"byte_end":294304,"line_start":56,"line_end":56,"column_start":9,"column_end":34},"name":"has_unicode_word_boundary","qualname":"::prog::Program::has_unicode_word_boundary","value":"bool","parent":{"krate":0,"index":1915},"children":[],"decl_id":null,"docs":" Whether this program contains a Unicode word boundary instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1929},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":294396,"byte_end":294404,"line_start":58,"line_end":58,"column_start":9,"column_end":17},"name":"prefixes","qualname":"::prog::Program::prefixes","value":"literal::imp::LiteralSearcher","parent":{"krate":0,"index":1915},"children":[],"decl_id":null,"docs":" A possibly empty machine for very quickly matching prefix literals.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1930},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":295231,"byte_end":295245,"line_start":74,"line_end":74,"column_start":9,"column_end":23},"name":"dfa_size_limit","qualname":"::prog::Program::dfa_size_limit","value":"usize","parent":{"krate":0,"index":1915},"children":[],"decl_id":null,"docs":" A limit on the size of the cache that the DFA is allowed to use while\n matching.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":777},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":295371,"byte_end":295374,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<Program>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty instruction sequence. Fields are given default\n values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":296091,"byte_end":296095,"line_start":102,"line_end":102,"column_start":12,"column_end":16},"name":"skip","qualname":"<Program>::skip","value":"fn (&self, mut pc: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" If pc is an index to a no-op instruction (like Save), then return the\n next pc that is not a no-op instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":779},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":296409,"byte_end":296423,"line_start":113,"line_end":113,"column_start":12,"column_end":26},"name":"leads_to_match","qualname":"<Program>::leads_to_match","value":"fn (&self, pc: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if an execution engine at instruction `pc` will\n always lead to a match.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":296949,"byte_end":296962,"line_start":128,"line_end":128,"column_start":12,"column_end":25},"name":"needs_dotstar","qualname":"<Program>::needs_dotstar","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the current configuration demands that an implicit\n `.*?` be prepended to the instruction sequence.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":781},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":297169,"byte_end":297179,"line_start":134,"line_end":134,"column_start":12,"column_end":22},"name":"uses_bytes","qualname":"<Program>::uses_bytes","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this program uses Byte instructions instead of\n Char/Range instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":297414,"byte_end":297423,"line_start":141,"line_end":141,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<Program>::only_utf8","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this program exclusively matches valid UTF-8 bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":783},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":297571,"byte_end":297587,"line_start":147,"line_end":147,"column_start":12,"column_end":28},"name":"approximate_size","qualname":"<Program>::approximate_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate heap usage of this instruction sequence in\n bytes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1934},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":302530,"byte_end":302535,"line_start":276,"line_end":276,"column_start":5,"column_end":10},"name":"Match","qualname":"::prog::Inst::Match","value":"Inst::Match(usize)","parent":{"krate":0,"index":1933},"children":[],"decl_id":null,"docs":" Match indicates that the program has reached a match state.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1937},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":302665,"byte_end":302669,"line_start":279,"line_end":279,"column_start":5,"column_end":9},"name":"Save","qualname":"::prog::Inst::Save","value":"Inst::Save(InstSave)","parent":{"krate":0,"index":1933},"children":[],"decl_id":null,"docs":" Save causes the program to save the current location of the input in\n the slot indicated by InstSave.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1940},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":302804,"byte_end":302809,"line_start":282,"line_end":282,"column_start":5,"column_end":10},"name":"Split","qualname":"::prog::Inst::Split","value":"Inst::Split(InstSplit)","parent":{"krate":0,"index":1933},"children":[],"decl_id":null,"docs":" Split causes the program to diverge to one of two paths in the\n program, preferring goto1 in InstSplit.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1943},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":302969,"byte_end":302978,"line_start":285,"line_end":285,"column_start":5,"column_end":14},"name":"EmptyLook","qualname":"::prog::Inst::EmptyLook","value":"Inst::EmptyLook(InstEmptyLook)","parent":{"krate":0,"index":1933},"children":[],"decl_id":null,"docs":" EmptyLook represents a zero-width assertion in a regex program. A\n zero-width assertion does not consume any of the input text.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1946},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":303120,"byte_end":303124,"line_start":288,"line_end":288,"column_start":5,"column_end":9},"name":"Char","qualname":"::prog::Inst::Char","value":"Inst::Char(InstChar)","parent":{"krate":0,"index":1933},"children":[],"decl_id":null,"docs":" Char requires the regex program to match the character in InstChar at\n the current position in the input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1949},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":303298,"byte_end":303304,"line_start":291,"line_end":291,"column_start":5,"column_end":11},"name":"Ranges","qualname":"::prog::Inst::Ranges","value":"Inst::Ranges(InstRanges)","parent":{"krate":0,"index":1933},"children":[],"decl_id":null,"docs":" Ranges requires the regex program to match the character at the current\n position in the input with one of the ranges specified in InstRanges.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1952},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":303502,"byte_end":303507,"line_start":295,"line_end":295,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::prog::Inst::Bytes","value":"Inst::Bytes(InstBytes)","parent":{"krate":0,"index":1933},"children":[],"decl_id":null,"docs":" Bytes is like Ranges, except it expresses a single byte range. It is\n used in conjunction with Split instructions to implement multi-byte\n character classes.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1933},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":302101,"byte_end":302105,"line_start":268,"line_end":268,"column_start":10,"column_end":14},"name":"Inst","qualname":"::prog::Inst","value":"Inst::{Match, Save, Split, EmptyLook, Char, Ranges, Bytes}","parent":null,"children":[{"krate":0,"index":1934},{"krate":0,"index":1937},{"krate":0,"index":1940},{"krate":0,"index":1943},{"krate":0,"index":1946},{"krate":0,"index":1949},{"krate":0,"index":1952}],"decl_id":null,"docs":" Inst is an instruction code in a Regex program.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":303611,"byte_end":303619,"line_start":300,"line_end":300,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Inst>::is_match","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this is a match instruction.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1959},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":303817,"byte_end":303825,"line_start":310,"line_end":310,"column_start":12,"column_end":20},"name":"InstSave","qualname":"::prog::InstSave","value":"InstSave { goto, slot }","parent":null,"children":[{"krate":0,"index":1960},{"krate":0,"index":1961}],"decl_id":null,"docs":" Representation of the Save instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1960},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":303889,"byte_end":303893,"line_start":312,"line_end":312,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstSave::goto","value":"usize","parent":{"krate":0,"index":1959},"children":[],"decl_id":null,"docs":" The next location to execute in the program.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1961},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":304048,"byte_end":304052,"line_start":315,"line_end":315,"column_start":9,"column_end":13},"name":"slot","qualname":"::prog::InstSave::slot","value":"usize","parent":{"krate":0,"index":1959},"children":[],"decl_id":null,"docs":" The capture slot (there are two slots for every capture in a regex,\n including the zeroth capture for the entire match).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1966},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":304144,"byte_end":304153,"line_start":320,"line_end":320,"column_start":12,"column_end":21},"name":"InstSplit","qualname":"::prog::InstSplit","value":"InstSplit { goto1, goto2 }","parent":null,"children":[{"krate":0,"index":1967},{"krate":0,"index":1968}],"decl_id":null,"docs":" Representation of the Split instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1967},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":304309,"byte_end":304314,"line_start":323,"line_end":323,"column_start":9,"column_end":14},"name":"goto1","qualname":"::prog::InstSplit::goto1","value":"usize","parent":{"krate":0,"index":1966},"children":[],"decl_id":null,"docs":" The first instruction to try. A match resulting from following goto1\n has precedence over a match resulting from following goto2.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1968},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":304479,"byte_end":304484,"line_start":326,"line_end":326,"column_start":9,"column_end":14},"name":"goto2","qualname":"::prog::InstSplit::goto2","value":"usize","parent":{"krate":0,"index":1966},"children":[],"decl_id":null,"docs":" The second instruction to try. A match resulting from following goto1\n has precedence over a match resulting from following goto2.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1973},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":304584,"byte_end":304597,"line_start":331,"line_end":331,"column_start":12,"column_end":25},"name":"InstEmptyLook","qualname":"::prog::InstEmptyLook","value":"InstEmptyLook { goto, look }","parent":null,"children":[{"krate":0,"index":1974},{"krate":0,"index":1975}],"decl_id":null,"docs":" Representation of the `EmptyLook` instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1974},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":304698,"byte_end":304702,"line_start":334,"line_end":334,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstEmptyLook::goto","value":"usize","parent":{"krate":0,"index":1973},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1975},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":304772,"byte_end":304776,"line_start":336,"line_end":336,"column_start":9,"column_end":13},"name":"look","qualname":"::prog::InstEmptyLook::look","value":"prog::EmptyLook","parent":{"krate":0,"index":1973},"children":[],"decl_id":null,"docs":" The type of zero-width assertion to check.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1981},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":304940,"byte_end":304949,"line_start":343,"line_end":343,"column_start":5,"column_end":14},"name":"StartLine","qualname":"::prog::EmptyLook::StartLine","value":"EmptyLook::StartLine","parent":{"krate":0,"index":1980},"children":[],"decl_id":null,"docs":" Start of line or input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1983},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":304985,"byte_end":304992,"line_start":345,"line_end":345,"column_start":5,"column_end":12},"name":"EndLine","qualname":"::prog::EmptyLook::EndLine","value":"EmptyLook::EndLine","parent":{"krate":0,"index":1980},"children":[],"decl_id":null,"docs":" End of line or input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1985},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":305022,"byte_end":305031,"line_start":347,"line_end":347,"column_start":5,"column_end":14},"name":"StartText","qualname":"::prog::EmptyLook::StartText","value":"EmptyLook::StartText","parent":{"krate":0,"index":1980},"children":[],"decl_id":null,"docs":" Start of input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1987},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":305059,"byte_end":305066,"line_start":349,"line_end":349,"column_start":5,"column_end":12},"name":"EndText","qualname":"::prog::EmptyLook::EndText","value":"EmptyLook::EndText","parent":{"krate":0,"index":1980},"children":[],"decl_id":null,"docs":" End of input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1989},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":305140,"byte_end":305152,"line_start":351,"line_end":351,"column_start":5,"column_end":17},"name":"WordBoundary","qualname":"::prog::EmptyLook::WordBoundary","value":"EmptyLook::WordBoundary","parent":{"krate":0,"index":1980},"children":[],"decl_id":null,"docs":" Word character on one side and non-word character on other.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1991},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":305232,"byte_end":305247,"line_start":353,"line_end":353,"column_start":5,"column_end":20},"name":"NotWordBoundary","qualname":"::prog::EmptyLook::NotWordBoundary","value":"EmptyLook::NotWordBoundary","parent":{"krate":0,"index":1980},"children":[],"decl_id":null,"docs":" Word character on both sides or non-word character on both sides.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1993},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":305282,"byte_end":305299,"line_start":355,"line_end":355,"column_start":5,"column_end":22},"name":"WordBoundaryAscii","qualname":"::prog::EmptyLook::WordBoundaryAscii","value":"EmptyLook::WordBoundaryAscii","parent":{"krate":0,"index":1980},"children":[],"decl_id":null,"docs":" ASCII word boundary.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1995},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":305338,"byte_end":305358,"line_start":357,"line_end":357,"column_start":5,"column_end":25},"name":"NotWordBoundaryAscii","qualname":"::prog::EmptyLook::NotWordBoundaryAscii","value":"EmptyLook::NotWordBoundaryAscii","parent":{"krate":0,"index":1980},"children":[],"decl_id":null,"docs":" Not ASCII word boundary.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1980},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":304892,"byte_end":304901,"line_start":341,"line_end":341,"column_start":10,"column_end":19},"name":"EmptyLook","qualname":"::prog::EmptyLook","value":"EmptyLook::{StartLine, EndLine, StartText, EndText, WordBoundary, NotWordBoundary, WordBoundaryAscii, NotWordBoundaryAscii}","parent":null,"children":[{"krate":0,"index":1981},{"krate":0,"index":1983},{"krate":0,"index":1985},{"krate":0,"index":1987},{"krate":0,"index":1989},{"krate":0,"index":1991},{"krate":0,"index":1993},{"krate":0,"index":1995}],"decl_id":null,"docs":" The set of zero-width match instructions.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":304883,"byte_end":305361,"line_start":341,"line_end":358,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":304883,"byte_end":305361,"line_start":341,"line_end":358,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":2006},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":305442,"byte_end":305450,"line_start":362,"line_end":362,"column_start":12,"column_end":20},"name":"InstChar","qualname":"::prog::InstChar","value":"InstChar { goto, c }","parent":null,"children":[{"krate":0,"index":2007},{"krate":0,"index":2008}],"decl_id":null,"docs":" Representation of the Char instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2007},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":305551,"byte_end":305555,"line_start":365,"line_end":365,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstChar::goto","value":"usize","parent":{"krate":0,"index":2006},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2008},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":305605,"byte_end":305606,"line_start":367,"line_end":367,"column_start":9,"column_end":10},"name":"c","qualname":"::prog::InstChar::c","value":"char","parent":{"krate":0,"index":2006},"children":[],"decl_id":null,"docs":" The character to test.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2013},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":305698,"byte_end":305708,"line_start":372,"line_end":372,"column_start":12,"column_end":22},"name":"InstRanges","qualname":"::prog::InstRanges","value":"InstRanges { goto, ranges }","parent":null,"children":[{"krate":0,"index":2014},{"krate":0,"index":2015}],"decl_id":null,"docs":" Representation of the Ranges instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2014},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":305809,"byte_end":305813,"line_start":375,"line_end":375,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstRanges::goto","value":"usize","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2015},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":305888,"byte_end":305894,"line_start":377,"line_end":377,"column_start":9,"column_end":15},"name":"ranges","qualname":"::prog::InstRanges::ranges","value":"std::vec::Vec<(char, char)>","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" The set of Unicode scalar value ranges to test.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":306021,"byte_end":306028,"line_start":382,"line_end":382,"column_start":12,"column_end":19},"name":"matches","qualname":"<InstRanges>::matches","value":"fn (&self, c: Char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the given input character matches this instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":306872,"byte_end":306881,"line_start":409,"line_end":409,"column_start":12,"column_end":21},"name":"num_chars","qualname":"<InstRanges>::num_chars","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of distinct characters represented by all of the\n ranges.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2020},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":307137,"byte_end":307146,"line_start":419,"line_end":419,"column_start":12,"column_end":21},"name":"InstBytes","qualname":"::prog::InstBytes","value":"InstBytes { goto, start, end }","parent":null,"children":[{"krate":0,"index":2021},{"krate":0,"index":2022},{"krate":0,"index":2023}],"decl_id":null,"docs":" Representation of the Bytes instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2021},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":307247,"byte_end":307251,"line_start":422,"line_end":422,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstBytes::goto","value":"usize","parent":{"krate":0,"index":2020},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2022},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":307320,"byte_end":307325,"line_start":424,"line_end":424,"column_start":9,"column_end":14},"name":"start","qualname":"::prog::InstBytes::start","value":"u8","parent":{"krate":0,"index":2020},"children":[],"decl_id":null,"docs":" The start (inclusive) of this byte range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2023},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":307387,"byte_end":307390,"line_start":426,"line_end":426,"column_start":9,"column_end":12},"name":"end","qualname":"::prog::InstBytes::end","value":"u8","parent":{"krate":0,"index":2020},"children":[],"decl_id":null,"docs":" The end (inclusive) of this byte range.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":307496,"byte_end":307503,"line_start":431,"line_end":431,"column_start":12,"column_end":19},"name":"matches","qualname":"<InstBytes>::matches","value":"fn (&self, byte: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given byte is in this range.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2028},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":307722,"byte_end":307734,"line_start":4,"line_end":4,"column_start":12,"column_end":24},"name":"RegexOptions","qualname":"::re_builder::RegexOptions","value":"RegexOptions { pats, size_limit, dfa_size_limit, nest_limit, case_insensitive, multi_line, dot_matches_new_line, swap_greed, ignore_whitespace, unicode, octal }","parent":null,"children":[{"krate":0,"index":2029},{"krate":0,"index":2030},{"krate":0,"index":2031},{"krate":0,"index":2032},{"krate":0,"index":2033},{"krate":0,"index":2034},{"krate":0,"index":2035},{"krate":0,"index":2036},{"krate":0,"index":2037},{"krate":0,"index":2038},{"krate":0,"index":2039}],"decl_id":null,"docs":" The set of user configurable options for compiling zero or more regexes.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":307688,"byte_end":307710,"line_start":3,"line_end":3,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2029},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":307745,"byte_end":307749,"line_start":5,"line_end":5,"column_start":9,"column_end":13},"name":"pats","qualname":"::re_builder::RegexOptions::pats","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":2028},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2030},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":307772,"byte_end":307782,"line_start":6,"line_end":6,"column_start":9,"column_end":19},"name":"size_limit","qualname":"::re_builder::RegexOptions::size_limit","value":"usize","parent":{"krate":0,"index":2028},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2031},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":307799,"byte_end":307813,"line_start":7,"line_end":7,"column_start":9,"column_end":23},"name":"dfa_size_limit","qualname":"::re_builder::RegexOptions::dfa_size_limit","value":"usize","parent":{"krate":0,"index":2028},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2032},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":307830,"byte_end":307840,"line_start":8,"line_end":8,"column_start":9,"column_end":19},"name":"nest_limit","qualname":"::re_builder::RegexOptions::nest_limit","value":"u32","parent":{"krate":0,"index":2028},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2033},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":307855,"byte_end":307871,"line_start":9,"line_end":9,"column_start":9,"column_end":25},"name":"case_insensitive","qualname":"::re_builder::RegexOptions::case_insensitive","value":"bool","parent":{"krate":0,"index":2028},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2034},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":307887,"byte_end":307897,"line_start":10,"line_end":10,"column_start":9,"column_end":19},"name":"multi_line","qualname":"::re_builder::RegexOptions::multi_line","value":"bool","parent":{"krate":0,"index":2028},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2035},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":307913,"byte_end":307933,"line_start":11,"line_end":11,"column_start":9,"column_end":29},"name":"dot_matches_new_line","qualname":"::re_builder::RegexOptions::dot_matches_new_line","value":"bool","parent":{"krate":0,"index":2028},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2036},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":307949,"byte_end":307959,"line_start":12,"line_end":12,"column_start":9,"column_end":19},"name":"swap_greed","qualname":"::re_builder::RegexOptions::swap_greed","value":"bool","parent":{"krate":0,"index":2028},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2037},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":307975,"byte_end":307992,"line_start":13,"line_end":13,"column_start":9,"column_end":26},"name":"ignore_whitespace","qualname":"::re_builder::RegexOptions::ignore_whitespace","value":"bool","parent":{"krate":0,"index":2028},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2038},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":308008,"byte_end":308015,"line_start":14,"line_end":14,"column_start":9,"column_end":16},"name":"unicode","qualname":"::re_builder::RegexOptions::unicode","value":"bool","parent":{"krate":0,"index":2028},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2039},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":308031,"byte_end":308036,"line_start":15,"line_end":15,"column_start":9,"column_end":14},"name":"octal","qualname":"::re_builder::RegexOptions::octal","value":"bool","parent":{"krate":0,"index":2028},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2132},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":326962,"byte_end":326967,"line_start":20,"line_end":20,"column_start":12,"column_end":17},"name":"Match","qualname":"::re_bytes::Match","value":"Match {  }","parent":null,"children":[{"krate":0,"index":2134},{"krate":0,"index":2135},{"krate":0,"index":2136}],"decl_id":null,"docs":" Match represents a single match of a regex in a haystack.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":326951,"byte_end":327029,"line_start":20,"line_end":24,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":326951,"byte_end":327029,"line_start":20,"line_end":24,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":327148,"byte_end":327153,"line_start":29,"line_end":29,"column_start":12,"column_end":17},"name":"start","qualname":"<Match>::start","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":327127,"byte_end":327136,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":835},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":327292,"byte_end":327295,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"end","qualname":"<Match>::end","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the ending byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":327271,"byte_end":327280,"line_start":34,"line_end":34,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":327397,"byte_end":327405,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Match>::as_bytes","value":"fn (&self) -> &'t [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the matched text.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":327376,"byte_end":327385,"line_start":40,"line_end":40,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2152},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":328374,"byte_end":328379,"line_start":64,"line_end":64,"column_start":12,"column_end":17},"name":"Regex","qualname":"::re_bytes::Regex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A compiled regular expression for matching arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":329438,"byte_end":329441,"line_start":105,"line_end":105,"column_start":12,"column_end":15},"name":"new","qualname":"<Regex>::new","value":"fn (re: &str) -> Result<Regex, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compiles a regular expression. Once compiled, it can be used repeatedly\n to search, split or replace text in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":849},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":330172,"byte_end":330180,"line_start":127,"line_end":127,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex>::is_match","value":"fn (&self, text: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the regex matches the string given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":331042,"byte_end":331046,"line_start":151,"line_end":151,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex>::find","value":"fn <'t> (&self, text: &'t [u8]) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end byte range of the leftmost-first match in\n `text`. If no match exists, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":331762,"byte_end":331771,"line_start":173,"line_end":173,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex>::find_iter","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> Matches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator for each successive non-overlapping match in\n `text`, returning the start and end byte indices with respect to\n `text`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":855},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":334908,"byte_end":334916,"line_start":240,"line_end":240,"column_start":12,"column_end":20},"name":"captures","qualname":"<Regex>::captures","value":"fn <'t> (&self, text: &'t [u8]) -> Option<Captures<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture groups corresponding to the leftmost-first\n match in `text`. Capture group `0` always corresponds to the entire\n match. If no match is found, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":336361,"byte_end":336374,"line_start":275,"line_end":275,"column_start":12,"column_end":25},"name":"captures_iter","qualname":"<Regex>::captures_iter","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> CaptureMatches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all the non-overlapping capture groups matched\n in `text`. This is operationally the same as `find_iter`, except it\n yields information about capturing group matches.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":337292,"byte_end":337297,"line_start":302,"line_end":302,"column_start":12,"column_end":17},"name":"split","qualname":"<Regex>::split","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> Split<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of substrings of `text` delimited by a match of the\n regular expression. Namely, each element of the iterator corresponds to\n text that *isn't* matched by the regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":338280,"byte_end":338286,"line_start":326,"line_end":326,"column_start":12,"column_end":18},"name":"splitn","qualname":"<Regex>::splitn","value":"fn <'r, 't> (&'r self, text: &'t [u8], limit: usize) -> SplitN<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of `text` delimited\n by a match of the regular expression. (A `limit` of `0` will return no\n substrings.) Namely, each element of the iterator corresponds to text\n that *isn't* matched by the regular expression. The remainder of the\n string that is not split will be the last element in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":343036,"byte_end":343043,"line_start":442,"line_end":442,"column_start":12,"column_end":19},"name":"replace","qualname":"<Regex>::replace","value":"fn <'t, R> (&self, text: &'t [u8], rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the leftmost-first match with the replacement provided. The\n replacement can be a regular byte string (where `$N` and `$name` are\n expanded to match capture groups) or a function that takes the matches'\n `Captures` and returns the replaced byte string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":343500,"byte_end":343511,"line_start":456,"line_end":456,"column_start":12,"column_end":23},"name":"replace_all","qualname":"<Regex>::replace_all","value":"fn <'t, R> (&self, text: &'t [u8], rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces all non-overlapping matches in `text` with the replacement\n provided. This is the same as calling `replacen` with `limit` set to\n `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":343980,"byte_end":343988,"line_start":470,"line_end":470,"column_start":12,"column_end":20},"name":"replacen","qualname":"<Regex>::replacen","value":"fn <'t, R> (&self, text: &'t [u8], limit: usize, mut rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces at most `limit` non-overlapping matches in `text` with the\n replacement provided. If `limit` is 0, then all non-overlapping matches\n are replaced.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":346465,"byte_end":346479,"line_start":541,"line_end":541,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex>::shortest_match","value":"fn (&self, text: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the end location of a match in the text given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":346867,"byte_end":346884,"line_start":551,"line_end":551,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex>::shortest_match_at","value":"fn (&self, text: &[u8], start: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as shortest_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":347328,"byte_end":347339,"line_start":565,"line_end":565,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex>::is_match_at","value":"fn (&self, text: &[u8], start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as is_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":347736,"byte_end":347743,"line_start":575,"line_end":575,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex>::find_at","value":"fn <'t> (&self, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as find, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":883},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":348417,"byte_end":348430,"line_start":596,"line_end":596,"column_start":12,"column_end":25},"name":"captures_read","qualname":"<Regex>::captures_read","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t [u8]) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" This is like `captures`, but uses\n [`CaptureLocations`](struct.CaptureLocations.html)\n instead of\n [`Captures`](struct.Captures.html) in order to amortize allocations.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":885},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":348937,"byte_end":348953,"line_start":610,"line_end":610,"column_start":12,"column_end":28},"name":"captures_read_at","qualname":"<Regex>::captures_read_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as `captures_read`, but starts the search at the given\n offset and populates the capture locations given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":349498,"byte_end":349514,"line_start":628,"line_end":628,"column_start":12,"column_end":28},"name":"read_captures_at","qualname":"<Regex>::read_captures_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" An undocumented alias for `captures_read_at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":891},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":349803,"byte_end":349809,"line_start":641,"line_end":641,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Regex>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original string of this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":349932,"byte_end":349945,"line_start":646,"line_end":646,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Regex>::capture_names","value":"fn (&self) -> CaptureNames","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the capture names.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":350081,"byte_end":350093,"line_start":651,"line_end":651,"column_start":12,"column_end":24},"name":"captures_len","qualname":"<Regex>::captures_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":350304,"byte_end":350321,"line_start":657,"line_end":657,"column_start":12,"column_end":29},"name":"capture_locations","qualname":"<Regex>::capture_locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set of capture locations that can be reused in\n multiple calls to `captures_read` or `captures_read_at`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":350668,"byte_end":350677,"line_start":666,"line_end":666,"column_start":12,"column_end":21},"name":"locations","qualname":"<Regex>::locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" An alias for `capture_locations` to preserve backward compatibility.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":896},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":351167,"byte_end":351174,"line_start":679,"line_end":679,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_bytes::Matches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular string.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":907},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":351747,"byte_end":351761,"line_start":697,"line_end":697,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_bytes::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all non-overlapping capture groups matching a\n particular regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":918},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":352349,"byte_end":352354,"line_start":717,"line_end":717,"column_start":12,"column_end":17},"name":"Split","qualname":"::re_bytes::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":921},{"krate":0,"index":922}],"decl_id":null,"docs":" Yields all substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":928},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":353337,"byte_end":353343,"line_start":752,"line_end":752,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::re_bytes::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":931},{"krate":0,"index":932}],"decl_id":null,"docs":" Yields at most `N` substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":938},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":354039,"byte_end":354051,"line_start":780,"line_end":780,"column_start":12,"column_end":24},"name":"CaptureNames","qualname":"::re_bytes::CaptureNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the names of all possible captures.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2157},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":355212,"byte_end":355228,"line_start":813,"line_end":813,"column_start":12,"column_end":28},"name":"CaptureLocations","qualname":"::re_bytes::CaptureLocations","value":"","parent":null,"children":[],"decl_id":null,"docs":" CaptureLocations is a low level representation of the raw offsets of each\n submatch.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":949},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":355550,"byte_end":355559,"line_start":821,"line_end":821,"column_start":10,"column_end":19},"name":"Locations","qualname":"::re_bytes::Locations","value":"CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `CaptureLocations` for backwards compatibility.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":951},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":355917,"byte_end":355920,"line_start":829,"line_end":829,"column_start":12,"column_end":15},"name":"get","qualname":"<CaptureLocations>::get","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":355896,"byte_end":355905,"line_start":828,"line_end":828,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":356215,"byte_end":356218,"line_start":838,"line_end":838,"column_start":12,"column_end":15},"name":"len","qualname":"<CaptureLocations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":356194,"byte_end":356203,"line_start":837,"line_end":837,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":953},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":356578,"byte_end":356581,"line_start":849,"line_end":849,"column_start":12,"column_end":15},"name":"pos","qualname":"<CaptureLocations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" An alias for the `get` method for backwards compatibility.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":356557,"byte_end":356566,"line_start":848,"line_end":848,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":954},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":357215,"byte_end":357223,"line_start":865,"line_end":865,"column_start":12,"column_end":20},"name":"Captures","qualname":"::re_bytes::Captures","value":"Captures {  }","parent":null,"children":[{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958}],"decl_id":null,"docs":" Captures represents a group of captured byte strings for a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":961},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":358158,"byte_end":358161,"line_start":891,"line_end":891,"column_start":12,"column_end":15},"name":"get","qualname":"<Captures>::get","value":"fn (&self, i: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match associated with the capture group at index `i`. If\n `i` does not correspond to a capture group, or if the capture group\n did not participate in the match, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":963},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":358446,"byte_end":358450,"line_start":897,"line_end":897,"column_start":12,"column_end":16},"name":"name","qualname":"<Captures>::name","value":"fn (&self, name: &str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match for the capture group named `name`. If `name` isn't a\n valid capture group or didn't match anything, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":965},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":358882,"byte_end":358886,"line_start":906,"line_end":906,"column_start":12,"column_end":16},"name":"iter","qualname":"<Captures>::iter","value":"fn <'c> (&'c self) -> SubCaptureMatches<'c, 't>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which\n they appear in the regex. If a particular capture group didn't\n participate in the match, then `None` is yielded for that capture.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":967},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":359897,"byte_end":359903,"line_start":926,"line_end":926,"column_start":12,"column_end":18},"name":"expand","qualname":"<Captures>::expand","value":"fn (&self, replacement: &[u8], dst: &mut Vec<u8>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expands all instances of `$name` in `replacement` to the corresponding\n capture group `name`, and writes them to the `dst` buffer given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":360214,"byte_end":360217,"line_start":935,"line_end":935,"column_start":12,"column_end":15},"name":"len","qualname":"<Captures>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captured groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":360193,"byte_end":360202,"line_start":934,"line_end":934,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1000},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":363373,"byte_end":363390,"line_start":1034,"line_end":1034,"column_start":12,"column_end":29},"name":"SubCaptureMatches","qualname":"::re_bytes::SubCaptureMatches","value":"SubCaptureMatches {  }","parent":null,"children":[{"krate":0,"index":1003},{"krate":0,"index":1004}],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which they\n appear in the regex.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1012},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":364096,"byte_end":364104,"line_start":1056,"line_end":1056,"column_start":11,"column_end":19},"name":"Replacer","qualname":"::re_bytes::Replacer","value":"Replacer","parent":null,"children":[{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1016}],"decl_id":null,"docs":" Replacer describes types that can be used to replace matches in a byte\n string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1013},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":364390,"byte_end":364404,"line_start":1064,"line_end":1064,"column_start":8,"column_end":22},"name":"replace_append","qualname":"::re_bytes::Replacer::replace_append","value":"fn (&mut self, caps: &Captures, dst: &mut Vec<u8>) -> ()","parent":{"krate":0,"index":1012},"children":[],"decl_id":null,"docs":" Appends text to `dst` to replace the current match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":364815,"byte_end":364827,"line_start":1073,"line_end":1073,"column_start":8,"column_end":20},"name":"no_expansion","qualname":"::re_bytes::Replacer::no_expansion","value":"fn <'r> (&'r mut self) -> Option<Cow<'r, [u8]>>","parent":{"krate":0,"index":1012},"children":[],"decl_id":null,"docs":" Return a fixed unchanging replacement byte string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":365558,"byte_end":365564,"line_start":1098,"line_end":1098,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::re_bytes::Replacer::by_ref","value":"fn <'r> (&'r mut self) -> ReplacerRef<'r, Self>","parent":{"krate":0,"index":1012},"children":[],"decl_id":null,"docs":" Return a `Replacer` that borrows and wraps this `Replacer`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2164},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":365792,"byte_end":365803,"line_start":1107,"line_end":1107,"column_start":12,"column_end":23},"name":"ReplacerRef","qualname":"::re_bytes::ReplacerRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" By-reference adaptor for a `Replacer`","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1032},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":367100,"byte_end":367108,"line_start":1149,"line_end":1149,"column_start":12,"column_end":20},"name":"NoExpand","qualname":"::re_bytes::NoExpand","value":"","parent":null,"children":[],"decl_id":null,"docs":" `NoExpand` indicates literal byte string replacement.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2323},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":382957,"byte_end":382966,"line_start":12,"line_end":12,"column_start":12,"column_end":21},"name":"Locations","qualname":"::re_trait::Locations","value":"","parent":null,"children":[],"decl_id":null,"docs":" Locations represents the offsets of each capturing group in a regex for\n a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1045},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":383295,"byte_end":383298,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"pos","qualname":"<Locations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1046},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":383742,"byte_end":383746,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"iter","qualname":"<Locations>::iter","value":"fn (&self) -> SubCapturesPosIter","parent":null,"children":[],"decl_id":null,"docs":" Creates an iterator of all the capture group positions in order of\n appearance in the regular expression. Positions are byte indices\n in terms of the original string matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1047},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":384041,"byte_end":384044,"line_start":38,"line_end":38,"column_start":12,"column_end":15},"name":"len","qualname":"<Locations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1049},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":384457,"byte_end":384475,"line_start":54,"line_end":54,"column_start":12,"column_end":30},"name":"SubCapturesPosIter","qualname":"::re_trait::SubCapturesPosIter","value":"SubCapturesPosIter {  }","parent":null,"children":[{"krate":0,"index":1051},{"krate":0,"index":1052}],"decl_id":null,"docs":" An iterator over capture group positions for a particular match of a\n regular expression.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1057},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":385647,"byte_end":385664,"line_start":87,"line_end":87,"column_start":11,"column_end":28},"name":"RegularExpression","qualname":"::re_trait::RegularExpression","value":"RegularExpression: Sized","parent":null,"children":[{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1064},{"krate":0,"index":1065},{"krate":0,"index":1066},{"krate":0,"index":1067}],"decl_id":null,"docs":" `RegularExpression` describes types that can implement regex searching.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1058},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":385717,"byte_end":385721,"line_start":89,"line_end":89,"column_start":10,"column_end":14},"name":"Text","qualname":"::re_trait::RegularExpression::Text","value":"type Text: ?Sized;","parent":{"krate":0,"index":1057},"children":[],"decl_id":null,"docs":" The type of the haystack.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1059},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":385896,"byte_end":385905,"line_start":93,"line_end":93,"column_start":8,"column_end":17},"name":"slots_len","qualname":"::re_trait::RegularExpression::slots_len","value":"fn (&self) -> usize","parent":{"krate":0,"index":1057},"children":[],"decl_id":null,"docs":" The number of capture slots in the compiled regular expression. This is\n always two times the number of capture groups (two slots per group).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":386001,"byte_end":386010,"line_start":96,"line_end":96,"column_start":8,"column_end":17},"name":"locations","qualname":"::re_trait::RegularExpression::locations","value":"fn (&self) -> Locations","parent":{"krate":0,"index":1057},"children":[],"decl_id":null,"docs":" Allocates fresh space for all capturing groups in this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1061},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":386356,"byte_end":386372,"line_start":105,"line_end":105,"column_start":8,"column_end":24},"name":"next_after_empty","qualname":"::re_trait::RegularExpression::next_after_empty","value":"fn (&self, text: &Self::Text, i: usize) -> usize","parent":{"krate":0,"index":1057},"children":[],"decl_id":null,"docs":" Returns the position of the next character after `i`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":386479,"byte_end":386496,"line_start":108,"line_end":108,"column_start":8,"column_end":25},"name":"shortest_match_at","qualname":"::re_trait::RegularExpression::shortest_match_at","value":"fn (&self, text: &Self::Text, start: usize) -> Option<usize>","parent":{"krate":0,"index":1057},"children":[],"decl_id":null,"docs":" Returns the location of the shortest match.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1063},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":386652,"byte_end":386663,"line_start":115,"line_end":115,"column_start":8,"column_end":19},"name":"is_match_at","qualname":"::re_trait::RegularExpression::is_match_at","value":"fn (&self, text: &Self::Text, start: usize) -> bool","parent":{"krate":0,"index":1057},"children":[],"decl_id":null,"docs":" Returns whether the regex matches the text given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1064},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":386786,"byte_end":386793,"line_start":118,"line_end":118,"column_start":8,"column_end":15},"name":"find_at","qualname":"::re_trait::RegularExpression::find_at","value":"fn (&self, text: &Self::Text, start: usize) -> Option<(usize, usize)>","parent":{"krate":0,"index":1057},"children":[],"decl_id":null,"docs":" Returns the leftmost-first match location if one exists.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1065},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":387028,"byte_end":387044,"line_start":126,"line_end":126,"column_start":8,"column_end":24},"name":"captures_read_at","qualname":"::re_trait::RegularExpression::captures_read_at","value":"fn (&self, locs: &mut Locations, text: &Self::Text, start: usize) -> Option<(usize, usize)>","parent":{"krate":0,"index":1057},"children":[],"decl_id":null,"docs":" Returns the leftmost-first match location if one exists, and also\n fills in any matching capture slot locations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1066},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":387277,"byte_end":387286,"line_start":135,"line_end":135,"column_start":8,"column_end":17},"name":"find_iter","qualname":"::re_trait::RegularExpression::find_iter","value":"fn (self, text: &Self::Text) -> Matches<Self>","parent":{"krate":0,"index":1057},"children":[],"decl_id":null,"docs":" Returns an iterator over all non-overlapping successive leftmost-first\n matches.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1067},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":387527,"byte_end":387540,"line_start":141,"line_end":141,"column_start":8,"column_end":21},"name":"captures_iter","qualname":"::re_trait::RegularExpression::captures_iter","value":"fn (self, text: &Self::Text) -> CaptureMatches<Self>","parent":{"krate":0,"index":1057},"children":[],"decl_id":null,"docs":" Returns an iterator over all non-overlapping successive leftmost-first\n matches with captures.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1068},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":387733,"byte_end":387740,"line_start":147,"line_end":147,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_trait::Matches","value":"Matches {  }","parent":null,"children":[{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":1074}],"decl_id":null,"docs":" An iterator over all non-overlapping successive leftmost-first matches.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":388017,"byte_end":388021,"line_start":164,"line_end":164,"column_start":12,"column_end":16},"name":"text","qualname":"<Matches>::text","value":"fn (&self) -> &'t R::Text","parent":null,"children":[],"decl_id":null,"docs":" Return the text being searched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1079},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":388119,"byte_end":388124,"line_start":169,"line_end":169,"column_start":12,"column_end":17},"name":"regex","qualname":"<Matches>::regex","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying regex.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1085},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":389325,"byte_end":389339,"line_start":209,"line_end":209,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_trait::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping successive leftmost-first matches with\n captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1093},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":389549,"byte_end":389553,"line_start":220,"line_end":220,"column_start":12,"column_end":16},"name":"text","qualname":"<CaptureMatches>::text","value":"fn (&self) -> &'t R::Text","parent":null,"children":[],"decl_id":null,"docs":" Return the text being searched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":389655,"byte_end":389660,"line_start":225,"line_end":225,"column_start":12,"column_end":17},"name":"regex","qualname":"<CaptureMatches>::regex","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying regex.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1119},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":391077,"byte_end":391083,"line_start":21,"line_end":21,"column_start":8,"column_end":14},"name":"escape","qualname":"::re_unicode::escape","value":"fn (text: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Escapes all regular expression meta characters in `text`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2330},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":391334,"byte_end":391339,"line_start":29,"line_end":29,"column_start":12,"column_end":17},"name":"Match","qualname":"::re_unicode::Match","value":"Match {  }","parent":null,"children":[{"krate":0,"index":2332},{"krate":0,"index":2333},{"krate":0,"index":2334}],"decl_id":null,"docs":" Match represents a single match of a regex in a haystack.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":391323,"byte_end":391400,"line_start":29,"line_end":33,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":391323,"byte_end":391400,"line_start":29,"line_end":33,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":391519,"byte_end":391524,"line_start":38,"line_end":38,"column_start":12,"column_end":17},"name":"start","qualname":"<Match>::start","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":391498,"byte_end":391507,"line_start":37,"line_end":37,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1123},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":391663,"byte_end":391666,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"end","qualname":"<Match>::end","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the ending byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":391642,"byte_end":391651,"line_start":43,"line_end":43,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":391768,"byte_end":391774,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Match>::as_str","value":"fn (&self) -> &'t str","parent":null,"children":[],"decl_id":null,"docs":" Returns the matched text.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":391747,"byte_end":391756,"line_start":49,"line_end":49,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2350},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":394434,"byte_end":394439,"line_start":123,"line_end":123,"column_start":12,"column_end":17},"name":"Regex","qualname":"::re_unicode::Regex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A compiled regular expression for matching Unicode strings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1139},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":395381,"byte_end":395384,"line_start":161,"line_end":161,"column_start":12,"column_end":15},"name":"new","qualname":"<Regex>::new","value":"fn (re: &str) -> Result<Regex, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compiles a regular expression. Once compiled, it can be used repeatedly\n to search, split or replace text in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1140},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":396114,"byte_end":396122,"line_start":183,"line_end":183,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex>::is_match","value":"fn (&self, text: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the regex matches the string given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1141},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":396998,"byte_end":397002,"line_start":208,"line_end":208,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex>::find","value":"fn <'t> (&self, text: &'t str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end byte range of the leftmost-first match in\n `text`. If no match exists, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1143},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":397716,"byte_end":397725,"line_start":230,"line_end":230,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex>::find_iter","value":"fn <'r, 't> (&'r self, text: &'t str) -> Matches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator for each successive non-overlapping match in\n `text`, returning the start and end byte indices with respect to\n `text`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1146},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":400805,"byte_end":400813,"line_start":297,"line_end":297,"column_start":12,"column_end":20},"name":"captures","qualname":"<Regex>::captures","value":"fn <'t> (&self, text: &'t str) -> Option<Captures<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture groups corresponding to the leftmost-first\n match in `text`. Capture group `0` always corresponds to the entire\n match. If no match is found, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1149},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":402146,"byte_end":402159,"line_start":331,"line_end":331,"column_start":12,"column_end":25},"name":"captures_iter","qualname":"<Regex>::captures_iter","value":"fn <'r, 't> (&'r self, text: &'t str) -> CaptureMatches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all the non-overlapping capture groups matched\n in `text`. This is operationally the same as `find_iter`, except it\n yields information about capturing group matches.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1152},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":403018,"byte_end":403023,"line_start":356,"line_end":356,"column_start":12,"column_end":17},"name":"split","qualname":"<Regex>::split","value":"fn <'r, 't> (&'r self, text: &'t str) -> Split<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of substrings of `text` delimited by a match of the\n regular expression. Namely, each element of the iterator corresponds to\n text that *isn't* matched by the regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1155},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":403978,"byte_end":403984,"line_start":380,"line_end":380,"column_start":12,"column_end":18},"name":"splitn","qualname":"<Regex>::splitn","value":"fn <'r, 't> (&'r self, text: &'t str, limit: usize) -> SplitN<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of `text` delimited\n by a match of the regular expression. (A `limit` of `0` will return no\n substrings.) Namely, each element of the iterator corresponds to text\n that *isn't* matched by the regular expression. The remainder of the\n string that is not split will be the last element in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1158},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":408494,"byte_end":408501,"line_start":492,"line_end":492,"column_start":12,"column_end":19},"name":"replace","qualname":"<Regex>::replace","value":"fn <'t, R> (&self, text: &'t str, rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the leftmost-first match with the replacement provided.\n The replacement can be a regular string (where `$N` and `$name` are\n expanded to match capture groups) or a function that takes the matches'\n `Captures` and returns the replaced string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1161},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":408958,"byte_end":408969,"line_start":506,"line_end":506,"column_start":12,"column_end":23},"name":"replace_all","qualname":"<Regex>::replace_all","value":"fn <'t, R> (&self, text: &'t str, rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces all non-overlapping matches in `text` with the replacement\n provided. This is the same as calling `replacen` with `limit` set to\n `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1164},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":409438,"byte_end":409446,"line_start":520,"line_end":520,"column_start":12,"column_end":20},"name":"replacen","qualname":"<Regex>::replacen","value":"fn <'t, R> (&self, text: &'t str, limit: usize, mut rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces at most `limit` non-overlapping matches in `text` with the\n replacement provided. If `limit` is 0, then all non-overlapping matches\n are replaced.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1168},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":412404,"byte_end":412418,"line_start":600,"line_end":600,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex>::shortest_match","value":"fn (&self, text: &str) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the end location of a match in the text given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1169},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":412805,"byte_end":412822,"line_start":610,"line_end":610,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex>::shortest_match_at","value":"fn (&self, text: &str, start: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as shortest_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1170},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":413269,"byte_end":413280,"line_start":624,"line_end":624,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex>::is_match_at","value":"fn (&self, text: &str, start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as is_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1171},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":413676,"byte_end":413683,"line_start":634,"line_end":634,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex>::find_at","value":"fn <'t> (&self, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as find, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1174},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":414360,"byte_end":414373,"line_start":655,"line_end":655,"column_start":12,"column_end":25},"name":"captures_read","qualname":"<Regex>::captures_read","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" This is like `captures`, but uses\n [`CaptureLocations`](struct.CaptureLocations.html)\n instead of\n [`Captures`](struct.Captures.html) in order to amortize allocations.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1176},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":414872,"byte_end":414888,"line_start":669,"line_end":669,"column_start":12,"column_end":28},"name":"captures_read_at","qualname":"<Regex>::captures_read_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as captures, but starts the search at the given\n offset and populates the capture locations given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1179},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":415436,"byte_end":415452,"line_start":687,"line_end":687,"column_start":12,"column_end":28},"name":"read_captures_at","qualname":"<Regex>::read_captures_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" An undocumented alias for `captures_read_at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":415740,"byte_end":415746,"line_start":700,"line_end":700,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Regex>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original string of this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1183},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":415869,"byte_end":415882,"line_start":705,"line_end":705,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Regex>::capture_names","value":"fn (&self) -> CaptureNames","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the capture names.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1184},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":416018,"byte_end":416030,"line_start":710,"line_end":710,"column_start":12,"column_end":24},"name":"captures_len","qualname":"<Regex>::captures_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1185},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":416241,"byte_end":416258,"line_start":716,"line_end":716,"column_start":12,"column_end":29},"name":"capture_locations","qualname":"<Regex>::capture_locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set of capture locations that can be reused in\n multiple calls to `captures_read` or `captures_read_at`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1186},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":416609,"byte_end":416618,"line_start":725,"line_end":725,"column_start":12,"column_end":21},"name":"locations","qualname":"<Regex>::locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" An alias for `capture_locations` to preserve backward compatibility.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1187},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":416974,"byte_end":416986,"line_start":736,"line_end":736,"column_start":12,"column_end":24},"name":"CaptureNames","qualname":"::re_unicode::CaptureNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the names of all possible captures.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1198},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":417575,"byte_end":417580,"line_start":757,"line_end":757,"column_start":12,"column_end":17},"name":"Split","qualname":"::re_unicode::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":1201},{"krate":0,"index":1202}],"decl_id":null,"docs":" Yields all substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1208},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":418556,"byte_end":418562,"line_start":792,"line_end":792,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::re_unicode::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":1211},{"krate":0,"index":1212}],"decl_id":null,"docs":" Yields at most `N` substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2355},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":419769,"byte_end":419785,"line_start":830,"line_end":830,"column_start":12,"column_end":28},"name":"CaptureLocations","qualname":"::re_unicode::CaptureLocations","value":"","parent":null,"children":[],"decl_id":null,"docs":" CaptureLocations is a low level representation of the raw offsets of each\n submatch.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1218},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":420107,"byte_end":420116,"line_start":838,"line_end":838,"column_start":10,"column_end":19},"name":"Locations","qualname":"::re_unicode::Locations","value":"CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `CaptureLocations` for backwards compatibility.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1220},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":420474,"byte_end":420477,"line_start":846,"line_end":846,"column_start":12,"column_end":15},"name":"get","qualname":"<CaptureLocations>::get","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":420453,"byte_end":420462,"line_start":845,"line_end":845,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1221},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":420772,"byte_end":420775,"line_start":855,"line_end":855,"column_start":12,"column_end":15},"name":"len","qualname":"<CaptureLocations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":420751,"byte_end":420760,"line_start":854,"line_end":854,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1222},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":421135,"byte_end":421138,"line_start":866,"line_end":866,"column_start":12,"column_end":15},"name":"pos","qualname":"<CaptureLocations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" An alias for the `get` method for backwards compatibility.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":421114,"byte_end":421123,"line_start":865,"line_end":865,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1223},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":421762,"byte_end":421770,"line_start":882,"line_end":882,"column_start":12,"column_end":20},"name":"Captures","qualname":"::re_unicode::Captures","value":"Captures {  }","parent":null,"children":[{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227}],"decl_id":null,"docs":" Captures represents a group of captured strings for a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1230},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":422668,"byte_end":422671,"line_start":908,"line_end":908,"column_start":12,"column_end":15},"name":"get","qualname":"<Captures>::get","value":"fn (&self, i: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match associated with the capture group at index `i`. If\n `i` does not correspond to a capture group, or if the capture group\n did not participate in the match, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1232},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":422956,"byte_end":422960,"line_start":914,"line_end":914,"column_start":12,"column_end":16},"name":"name","qualname":"<Captures>::name","value":"fn (&self, name: &str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match for the capture group named `name`. If `name` isn't a\n valid capture group or didn't match anything, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1234},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":423392,"byte_end":423396,"line_start":923,"line_end":923,"column_start":12,"column_end":16},"name":"iter","qualname":"<Captures>::iter","value":"fn <'c> (&'c self) -> SubCaptureMatches<'c, 't>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which\n they appear in the regex. If a particular capture group didn't\n participate in the match, then `None` is yielded for that capture.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1236},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":424407,"byte_end":424413,"line_start":943,"line_end":943,"column_start":12,"column_end":18},"name":"expand","qualname":"<Captures>::expand","value":"fn (&self, replacement: &str, dst: &mut String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expands all instances of `$name` in `replacement` to the corresponding\n capture group `name`, and writes them to the `dst` buffer given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1237},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":424720,"byte_end":424723,"line_start":952,"line_end":952,"column_start":12,"column_end":15},"name":"len","qualname":"<Captures>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captured groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":424699,"byte_end":424708,"line_start":951,"line_end":951,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1266},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":427427,"byte_end":427444,"line_start":1036,"line_end":1036,"column_start":12,"column_end":29},"name":"SubCaptureMatches","qualname":"::re_unicode::SubCaptureMatches","value":"SubCaptureMatches {  }","parent":null,"children":[{"krate":0,"index":1269},{"krate":0,"index":1270}],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which they\n appear in the regex.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1278},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":428084,"byte_end":428098,"line_start":1058,"line_end":1058,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_unicode::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all non-overlapping capture groups matching a\n particular regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1289},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":428790,"byte_end":428797,"line_start":1081,"line_end":1081,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_unicode::Matches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular string.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1300},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":429422,"byte_end":429430,"line_start":1098,"line_end":1098,"column_start":11,"column_end":19},"name":"Replacer","qualname":"::re_unicode::Replacer","value":"Replacer","parent":null,"children":[{"krate":0,"index":1301},{"krate":0,"index":1302},{"krate":0,"index":1304}],"decl_id":null,"docs":" Replacer describes types that can be used to replace matches in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1301},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":429737,"byte_end":429751,"line_start":1106,"line_end":1106,"column_start":8,"column_end":22},"name":"replace_append","qualname":"::re_unicode::Replacer::replace_append","value":"fn (&mut self, caps: &Captures, dst: &mut String) -> ()","parent":{"krate":0,"index":1300},"children":[],"decl_id":null,"docs":" Appends text to `dst` to replace the current match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1302},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":430156,"byte_end":430168,"line_start":1115,"line_end":1115,"column_start":8,"column_end":20},"name":"no_expansion","qualname":"::re_unicode::Replacer::no_expansion","value":"fn <'r> (&'r mut self) -> Option<Cow<'r, str>>","parent":{"krate":0,"index":1300},"children":[],"decl_id":null,"docs":" Return a fixed unchanging replacement string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1304},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":430889,"byte_end":430895,"line_start":1140,"line_end":1140,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::re_unicode::Replacer::by_ref","value":"fn <'r> (&'r mut self) -> ReplacerRef<'r, Self>","parent":{"krate":0,"index":1300},"children":[],"decl_id":null,"docs":" Return a `Replacer` that borrows and wraps this `Replacer`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2362},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":431123,"byte_end":431134,"line_start":1149,"line_end":1149,"column_start":12,"column_end":23},"name":"ReplacerRef","qualname":"::re_unicode::ReplacerRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" By-reference adaptor for a `Replacer`","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1319},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":432404,"byte_end":432412,"line_start":1191,"line_end":1191,"column_start":12,"column_end":20},"name":"NoExpand","qualname":"::re_unicode::NoExpand","value":"","parent":null,"children":[],"decl_id":null,"docs":" `NoExpand` indicates literal string replacement.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2371},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/sparse.rs","byte_start":433293,"byte_end":433302,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"SparseSet","qualname":"::sparse::SparseSet","value":"SparseSet {  }","parent":null,"children":[{"krate":0,"index":2372},{"krate":0,"index":2373}],"decl_id":null,"docs":" A sparse set used for representing ordered NFA states.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1331},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/sparse.rs","byte_start":433681,"byte_end":433684,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<SparseSet>::new","value":"fn (size: usize) -> SparseSet","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1332},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/sparse.rs","byte_start":433860,"byte_end":433863,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"len","qualname":"<SparseSet>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1333},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/sparse.rs","byte_start":433925,"byte_end":433933,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<SparseSet>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1334},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/sparse.rs","byte_start":433999,"byte_end":434007,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"capacity","qualname":"<SparseSet>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1335},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/sparse.rs","byte_start":434074,"byte_end":434080,"line_start":46,"line_end":46,"column_start":12,"column_end":18},"name":"insert","qualname":"<SparseSet>::insert","value":"fn (&mut self, value: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/sparse.rs","byte_start":434256,"byte_end":434264,"line_start":53,"line_end":53,"column_start":12,"column_end":20},"name":"contains","qualname":"<SparseSet>::contains","value":"fn (&self, value: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1337},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/sparse.rs","byte_start":434392,"byte_end":434397,"line_start":58,"line_end":58,"column_start":12,"column_end":17},"name":"clear","qualname":"<SparseSet>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1359},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28366,"byte_end":28374,"line_start":779,"line_end":779,"column_start":9,"column_end":17},"name":"internal","qualname":"::internal","value":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1360},{"krate":0,"index":1361},{"krate":0,"index":1364},{"krate":0,"index":1369},{"krate":0,"index":1370}],"decl_id":null,"docs":" The `internal` module exists to support suspicious activity, such as\n testing different matching engines and supporting the `regex-debug` CLI\n utility.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28334,"byte_end":28357,"line_start":778,"line_end":778,"column_start":1,"column_end":24}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/backtrack.rs","byte_start":30861,"byte_end":30866,"line_start":60,"line_end":60,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/backtrack.rs","byte_start":31528,"byte_end":31535,"line_start":79,"line_end":79,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/cache.rs","byte_start":40033,"byte_end":40039,"line_start":23,"line_end":23,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/cache.rs","byte_start":40315,"byte_end":40326,"line_start":33,"line_end":33,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":43264,"byte_end":43272,"line_start":38,"line_end":38,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":70205,"byte_end":70214,"line_start":743,"line_end":743,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":72551,"byte_end":72559,"line_start":821,"line_end":821,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":73375,"byte_end":73387,"line_start":846,"line_end":846,"column_start":14,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":78139,"byte_end":78150,"line_start":977,"line_end":977,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":79359,"byte_end":79371,"line_start":1016,"line_end":1016,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":91888,"byte_end":91894,"line_start":215,"line_end":215,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":94227,"byte_end":94235,"line_start":287,"line_end":287,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":94657,"byte_end":94662,"line_start":304,"line_end":304,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":98866,"byte_end":98871,"line_start":412,"line_end":412,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":99690,"byte_end":99700,"line_start":436,"line_end":436,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":99992,"byte_end":99995,"line_start":445,"line_end":445,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":264},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":148653,"byte_end":148661,"line_start":1609,"line_end":1609,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":149455,"byte_end":149466,"line_start":1645,"line_end":1645,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":151294,"byte_end":151304,"line_start":1699,"line_end":1699,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":151740,"byte_end":151744,"line_start":1725,"line_end":1725,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":152356,"byte_end":152361,"line_start":1756,"line_end":1756,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":152641,"byte_end":152652,"line_start":1766,"line_end":1766,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":153074,"byte_end":153088,"line_start":1780,"line_end":1780,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":153594,"byte_end":153604,"line_start":1798,"line_end":1798,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/error.rs","byte_start":158264,"byte_end":158269,"line_start":21,"line_end":21,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/error.rs","byte_start":158536,"byte_end":158541,"line_start":31,"line_end":31,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/error.rs","byte_start":159198,"byte_end":159203,"line_start":49,"line_end":49,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":163997,"byte_end":164008,"line_start":116,"line_end":116,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":415},{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":173711,"byte_end":173724,"line_start":372,"line_end":372,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":174798,"byte_end":174808,"line_start":409,"line_end":409,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":185392,"byte_end":185402,"line_start":676,"line_end":676,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":440},{"krate":0,"index":446},{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":453},{"krate":0,"index":455},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":470},{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":202715,"byte_end":202728,"line_start":1244,"line_end":1244,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":202852,"byte_end":202856,"line_start":1250,"line_end":1250,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":477},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":204687,"byte_end":204691,"line_start":1307,"line_end":1307,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":488}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":204797,"byte_end":204809,"line_start":1313,"line_end":1313,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":493},{"krate":0,"index":495}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":212125,"byte_end":212142,"line_start":1512,"line_end":1512,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":498}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/expand.rs","byte_start":219164,"byte_end":219167,"line_start":112,"line_end":112,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/expand.rs","byte_start":219263,"byte_end":219266,"line_start":118,"line_end":118,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":227852,"byte_end":227859,"line_start":22,"line_end":22,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":231007,"byte_end":231016,"line_start":144,"line_end":144,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":231190,"byte_end":231199,"line_start":151,"line_end":151,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":231305,"byte_end":231314,"line_start":159,"line_end":159,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":583},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":592},{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":233516,"byte_end":233525,"line_start":233,"line_end":233,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":596}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":233754,"byte_end":233763,"line_start":240,"line_end":240,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":599},{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":233872,"byte_end":233881,"line_start":248,"line_end":248,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":606},{"krate":0,"index":608},{"krate":0,"index":610},{"krate":0,"index":612},{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":237283,"byte_end":237287,"line_start":350,"line_end":350,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":237497,"byte_end":237501,"line_start":359,"line_end":359,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":620},{"krate":0,"index":621}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":238742,"byte_end":238746,"line_start":396,"line_end":396,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":238840,"byte_end":238844,"line_start":402,"line_end":402,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":625}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":238967,"byte_end":238971,"line_start":408,"line_end":408,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":239224,"byte_end":239228,"line_start":422,"line_end":422,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":242108,"byte_end":242123,"line_start":44,"line_end":44,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":674}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":246963,"byte_end":246970,"line_start":180,"line_end":180,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":679}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":249162,"byte_end":249173,"line_start":243,"line_end":243,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":698},{"krate":0,"index":699}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":250596,"byte_end":250609,"line_start":297,"line_end":297,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":254526,"byte_end":254537,"line_start":406,"line_end":406,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":708},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":259856,"byte_end":259872,"line_start":569,"line_end":569,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/pikevm.rs","byte_start":282052,"byte_end":282057,"line_start":75,"line_end":75,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":749}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/pikevm.rs","byte_start":282306,"byte_end":282309,"line_start":83,"line_end":83,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":756},{"krate":0,"index":758},{"krate":0,"index":759}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/pikevm.rs","byte_start":291484,"byte_end":291491,"line_start":342,"line_end":342,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":764}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":295262,"byte_end":295269,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":783}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":298250,"byte_end":298257,"line_start":161,"line_end":161,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":785},{"krate":0,"index":786}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":298433,"byte_end":298440,"line_start":170,"line_end":170,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":788}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":303528,"byte_end":303532,"line_start":298,"line_end":298,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":800}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":305923,"byte_end":305933,"line_start":380,"line_end":380,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":802},{"krate":0,"index":804}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":307404,"byte_end":307413,"line_start":429,"line_end":429,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":308064,"byte_end":308076,"line_start":18,"line_end":18,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":327040,"byte_end":327045,"line_start":26,"line_end":26,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":328410,"byte_end":328415,"line_start":66,"line_end":66,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":839}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":328592,"byte_end":328597,"line_start":73,"line_end":73,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":841}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":328902,"byte_end":328907,"line_start":84,"line_end":84,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":328991,"byte_end":328996,"line_start":90,"line_end":90,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":845},{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":329207,"byte_end":329212,"line_start":100,"line_end":100,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":852},{"krate":0,"index":855},{"krate":0,"index":858},{"krate":0,"index":861},{"krate":0,"index":864},{"krate":0,"index":867},{"krate":0,"index":870},{"krate":0,"index":873}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":345664,"byte_end":345669,"line_start":519,"line_end":519,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":883},{"krate":0,"index":885},{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":349733,"byte_end":349738,"line_start":639,"line_end":639,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":895}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":351250,"byte_end":351257,"line_start":681,"line_end":681,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":904},{"krate":0,"index":905}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":351851,"byte_end":351865,"line_start":701,"line_end":701,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":915},{"krate":0,"index":916}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":352440,"byte_end":352445,"line_start":722,"line_end":722,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":926},{"krate":0,"index":927}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":353424,"byte_end":353430,"line_start":757,"line_end":757,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":936},{"krate":0,"index":937}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":354120,"byte_end":354132,"line_start":782,"line_end":782,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":948}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":355586,"byte_end":355602,"line_start":823,"line_end":823,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":357340,"byte_end":357348,"line_start":871,"line_end":871,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":961},{"krate":0,"index":963},{"krate":0,"index":965},{"krate":0,"index":967},{"krate":0,"index":968}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":360293,"byte_end":360301,"line_start":940,"line_end":940,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":971}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":360528,"byte_end":360541,"line_start":948,"line_end":948,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":980}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":362032,"byte_end":362040,"line_start":993,"line_end":993,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":988},{"krate":0,"index":989}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":362689,"byte_end":362697,"line_start":1015,"line_end":1015,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":995},{"krate":0,"index":996}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":363494,"byte_end":363511,"line_start":1039,"line_end":1039,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1008},{"krate":0,"index":1009}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":365886,"byte_end":365897,"line_start":1109,"line_end":1109,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1021},{"krate":0,"index":1022}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":366486,"byte_end":366487,"line_start":1131,"line_end":1131,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1031}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":367151,"byte_end":367159,"line_start":1151,"line_end":1151,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1038},{"krate":0,"index":1039}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":382985,"byte_end":382994,"line_start":14,"line_end":14,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1045},{"krate":0,"index":1046},{"krate":0,"index":1047},{"krate":0,"index":1048}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":384548,"byte_end":384566,"line_start":59,"line_end":59,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1055},{"krate":0,"index":1056}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":387900,"byte_end":387907,"line_start":158,"line_end":158,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1078},{"krate":0,"index":1079}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":388191,"byte_end":388198,"line_start":174,"line_end":174,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1083},{"krate":0,"index":1084}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":389425,"byte_end":389439,"line_start":214,"line_end":214,"column_start":13,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1093},{"krate":0,"index":1094}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":389733,"byte_end":389747,"line_start":230,"line_end":230,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1098},{"krate":0,"index":1099}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":391411,"byte_end":391416,"line_start":35,"line_end":35,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1125}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":394470,"byte_end":394475,"line_start":125,"line_end":125,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1130}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":394652,"byte_end":394657,"line_start":132,"line_end":132,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1132}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":394845,"byte_end":394850,"line_start":140,"line_end":140,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1134}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":394934,"byte_end":394939,"line_start":146,"line_end":146,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1136},{"krate":0,"index":1137}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":395150,"byte_end":395155,"line_start":156,"line_end":156,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1139},{"krate":0,"index":1140},{"krate":0,"index":1141},{"krate":0,"index":1143},{"krate":0,"index":1146},{"krate":0,"index":1149},{"krate":0,"index":1152},{"krate":0,"index":1155},{"krate":0,"index":1158},{"krate":0,"index":1161},{"krate":0,"index":1164}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":411611,"byte_end":411616,"line_start":578,"line_end":578,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":1170},{"krate":0,"index":1171},{"krate":0,"index":1174},{"krate":0,"index":1176},{"krate":0,"index":1179}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":415670,"byte_end":415675,"line_start":698,"line_end":698,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1182},{"krate":0,"index":1183},{"krate":0,"index":1184},{"krate":0,"index":1185},{"krate":0,"index":1186}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":417055,"byte_end":417067,"line_start":738,"line_end":738,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1193},{"krate":0,"index":1194},{"krate":0,"index":1197}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":417666,"byte_end":417671,"line_start":762,"line_end":762,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1206},{"krate":0,"index":1207}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":418643,"byte_end":418649,"line_start":797,"line_end":797,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1216},{"krate":0,"index":1217}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":420143,"byte_end":420159,"line_start":840,"line_end":840,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1222}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":421886,"byte_end":421894,"line_start":888,"line_end":888,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1230},{"krate":0,"index":1232},{"krate":0,"index":1234},{"krate":0,"index":1236},{"krate":0,"index":1237}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":424799,"byte_end":424807,"line_start":957,"line_end":957,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1240}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":425034,"byte_end":425047,"line_start":965,"line_end":965,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1249}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":426094,"byte_end":426102,"line_start":995,"line_end":995,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1254},{"krate":0,"index":1255}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":426747,"byte_end":426755,"line_start":1017,"line_end":1017,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1261},{"krate":0,"index":1262}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":427548,"byte_end":427565,"line_start":1041,"line_end":1041,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1274},{"krate":0,"index":1275}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":428191,"byte_end":428205,"line_start":1062,"line_end":1062,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1286},{"krate":0,"index":1287}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":428876,"byte_end":428883,"line_start":1083,"line_end":1083,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1297},{"krate":0,"index":1298}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":431217,"byte_end":431228,"line_start":1151,"line_end":1151,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1309},{"krate":0,"index":1310}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":431811,"byte_end":431812,"line_start":1173,"line_end":1173,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1318}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":432454,"byte_end":432462,"line_start":1193,"line_end":1193,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1325},{"krate":0,"index":1326}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/sparse.rs","byte_start":433658,"byte_end":433667,"line_start":26,"line_end":26,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1334},{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1337}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/sparse.rs","byte_start":434463,"byte_end":434472,"line_start":63,"line_end":63,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1339},{"krate":0,"index":1340}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/backtrack.rs","byte_start":30861,"byte_end":30866,"line_start":60,"line_end":60,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/backtrack.rs","byte_start":31528,"byte_end":31535,"line_start":79,"line_end":79,"column_start":32,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/cache.rs","byte_start":40033,"byte_end":40039,"line_start":23,"line_end":23,"column_start":19,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1412},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/cache.rs","byte_start":40315,"byte_end":40326,"line_start":33,"line_end":33,"column_start":23,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1419},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":43264,"byte_end":43272,"line_start":38,"line_end":38,"column_start":6,"column_end":14},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":112},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":70205,"byte_end":70214,"line_start":743,"line_end":743,"column_start":6,"column_end":15},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1444},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":72551,"byte_end":72559,"line_start":821,"line_end":821,"column_start":6,"column_end":14},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1463},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":73375,"byte_end":73387,"line_start":846,"line_end":846,"column_start":14,"column_end":26},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":173},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":78139,"byte_end":78150,"line_start":977,"line_end":977,"column_start":6,"column_end":17},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":186},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":79359,"byte_end":79371,"line_start":1016,"line_end":1016,"column_start":6,"column_end":18},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":195},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":91888,"byte_end":91894,"line_start":215,"line_end":215,"column_start":9,"column_end":15},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1549},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":94227,"byte_end":94235,"line_start":287,"line_end":287,"column_start":23,"column_end":31},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":228},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":94657,"byte_end":94662,"line_start":304,"line_end":304,"column_start":6,"column_end":11},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1565},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":98866,"byte_end":98871,"line_start":412,"line_end":412,"column_start":6,"column_end":11},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1516},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":99690,"byte_end":99700,"line_start":436,"line_end":436,"column_start":6,"column_end":16},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1522},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":99992,"byte_end":99995,"line_start":445,"line_end":445,"column_start":10,"column_end":13},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1537},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":148653,"byte_end":148661,"line_start":1609,"line_end":1609,"column_start":6,"column_end":14},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1623},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":149455,"byte_end":149466,"line_start":1645,"line_end":1645,"column_start":6,"column_end":17},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1532},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":151294,"byte_end":151304,"line_start":1699,"line_end":1699,"column_start":6,"column_end":16},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1607},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":151740,"byte_end":151744,"line_start":1725,"line_end":1725,"column_start":6,"column_end":10},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1577},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":152356,"byte_end":152361,"line_start":1756,"line_end":1756,"column_start":21,"column_end":26},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1565},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":152641,"byte_end":152652,"line_start":1766,"line_end":1766,"column_start":21,"column_end":32},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1532},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":153074,"byte_end":153088,"line_start":1780,"line_end":1780,"column_start":25,"column_end":39},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":322},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/dfa.rs","byte_start":153594,"byte_end":153604,"line_start":1798,"line_end":1798,"column_start":21,"column_end":31},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1607},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/error.rs","byte_start":158264,"byte_end":158269,"line_start":21,"line_end":21,"column_start":30,"column_end":35},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1629},"to":{"krate":1,"index":1542}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/error.rs","byte_start":158536,"byte_end":158541,"line_start":31,"line_end":31,"column_start":23,"column_end":28},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1629},"to":{"krate":2,"index":6826}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/error.rs","byte_start":159198,"byte_end":159203,"line_start":49,"line_end":49,"column_start":21,"column_end":26},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1629},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":163997,"byte_end":164008,"line_start":116,"line_end":116,"column_start":6,"column_end":17},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":173711,"byte_end":173724,"line_start":372,"line_end":372,"column_start":32,"column_end":45},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":384},"to":{"krate":0,"index":1057}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":174798,"byte_end":174808,"line_start":409,"line_end":409,"column_start":32,"column_end":42},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1643},"to":{"krate":0,"index":1057}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":185392,"byte_end":185402,"line_start":676,"line_end":676,"column_start":10,"column_end":20},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":202715,"byte_end":202728,"line_start":1244,"line_end":1244,"column_start":10,"column_end":23},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":202852,"byte_end":202856,"line_start":1250,"line_end":1250,"column_start":6,"column_end":10},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":381},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":204687,"byte_end":204691,"line_start":1307,"line_end":1307,"column_start":16,"column_end":20},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":381},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":204797,"byte_end":204809,"line_start":1313,"line_end":1313,"column_start":6,"column_end":18},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1650},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":212125,"byte_end":212142,"line_start":1512,"line_end":1512,"column_start":6,"column_end":23},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1712},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/expand.rs","byte_start":219164,"byte_end":219167,"line_start":112,"line_end":112,"column_start":28,"column_end":31},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1738},"to":{"krate":2,"index":2096}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/expand.rs","byte_start":219263,"byte_end":219266,"line_start":118,"line_end":118,"column_start":22,"column_end":25},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1738},"to":{"krate":2,"index":2096}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":227852,"byte_end":227859,"line_start":22,"line_end":22,"column_start":6,"column_end":13},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1761},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":229096,"byte_end":229101,"line_start":69,"line_end":69,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":6824},"to":{"krate":0,"index":555}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":231007,"byte_end":231016,"line_start":144,"line_end":144,"column_start":10,"column_end":19},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1771},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":231190,"byte_end":231199,"line_start":151,"line_end":151,"column_start":25,"column_end":34},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1771},"to":{"krate":2,"index":1601}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":231305,"byte_end":231314,"line_start":159,"line_end":159,"column_start":20,"column_end":29},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1771},"to":{"krate":0,"index":555}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":233516,"byte_end":233525,"line_start":233,"line_end":233,"column_start":10,"column_end":19},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1783},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":233754,"byte_end":233763,"line_start":240,"line_end":240,"column_start":25,"column_end":34},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1783},"to":{"krate":2,"index":1601}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":233872,"byte_end":233881,"line_start":248,"line_end":248,"column_start":20,"column_end":29},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1783},"to":{"krate":0,"index":555}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":237283,"byte_end":237287,"line_start":350,"line_end":350,"column_start":21,"column_end":25},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1795},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":237497,"byte_end":237501,"line_start":359,"line_end":359,"column_start":6,"column_end":10},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1795},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":238742,"byte_end":238746,"line_start":396,"line_end":396,"column_start":21,"column_end":25},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1795},"to":{"krate":2,"index":2096}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":238840,"byte_end":238844,"line_start":402,"line_end":402,"column_start":29,"column_end":33},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1795},"to":{"krate":2,"index":2096}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":238967,"byte_end":238971,"line_start":408,"line_end":408,"column_start":26,"column_end":30},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1795},"to":{"krate":2,"index":1936}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":239224,"byte_end":239228,"line_start":422,"line_end":422,"column_start":27,"column_end":31},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1795},"to":{"krate":2,"index":1970}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":242108,"byte_end":242123,"line_start":44,"line_end":44,"column_start":6,"column_end":21},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1817},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":246963,"byte_end":246970,"line_start":180,"line_end":180,"column_start":6,"column_end":13},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1826},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":249162,"byte_end":249173,"line_start":243,"line_end":243,"column_start":23,"column_end":34},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":680},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":250596,"byte_end":250609,"line_start":297,"line_end":297,"column_start":6,"column_end":19},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1848},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":254526,"byte_end":254537,"line_start":406,"line_end":406,"column_start":6,"column_end":17},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1857},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/imp.rs","byte_start":259856,"byte_end":259872,"line_start":569,"line_end":569,"column_start":6,"column_end":22},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1868},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/pikevm.rs","byte_start":282052,"byte_end":282057,"line_start":75,"line_end":75,"column_start":6,"column_end":11},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1888},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/pikevm.rs","byte_start":282306,"byte_end":282309,"line_start":83,"line_end":83,"column_start":20,"column_end":23},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1878},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/pikevm.rs","byte_start":291484,"byte_end":291491,"line_start":342,"line_end":342,"column_start":6,"column_end":13},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1896},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":295262,"byte_end":295269,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1915},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":298250,"byte_end":298257,"line_start":161,"line_end":161,"column_start":16,"column_end":23},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1915},"to":{"krate":2,"index":1601}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":298433,"byte_end":298440,"line_start":170,"line_end":170,"column_start":21,"column_end":28},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1915},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":303528,"byte_end":303532,"line_start":298,"line_end":298,"column_start":6,"column_end":10},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1933},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":305923,"byte_end":305933,"line_start":380,"line_end":380,"column_start":6,"column_end":16},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":2013},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":307404,"byte_end":307413,"line_start":429,"line_end":429,"column_start":6,"column_end":15},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2020},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":308064,"byte_end":308076,"line_start":18,"line_end":18,"column_start":18,"column_end":30},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2028},"to":{"krate":2,"index":2080}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":327040,"byte_end":327045,"line_start":26,"line_end":26,"column_start":10,"column_end":15},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2132},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":328410,"byte_end":328415,"line_start":66,"line_end":66,"column_start":23,"column_end":28},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2152},"to":{"krate":2,"index":6826}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":328592,"byte_end":328597,"line_start":73,"line_end":73,"column_start":21,"column_end":26},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2152},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":328902,"byte_end":328907,"line_start":84,"line_end":84,"column_start":21,"column_end":26},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2152},"to":{"krate":2,"index":2096}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":328991,"byte_end":328996,"line_start":90,"line_end":90,"column_start":18,"column_end":23},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2152},"to":{"krate":2,"index":6022}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":329207,"byte_end":329212,"line_start":100,"line_end":100,"column_start":6,"column_end":11},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":345664,"byte_end":345669,"line_start":519,"line_end":519,"column_start":6,"column_end":11},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":2152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":349733,"byte_end":349738,"line_start":639,"line_end":639,"column_start":6,"column_end":11},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":351250,"byte_end":351257,"line_start":681,"line_end":681,"column_start":27,"column_end":34},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":896},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":351851,"byte_end":351865,"line_start":701,"line_end":701,"column_start":27,"column_end":41},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":907},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":352440,"byte_end":352445,"line_start":722,"line_end":722,"column_start":27,"column_end":32},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":918},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":353424,"byte_end":353430,"line_start":757,"line_end":757,"column_start":27,"column_end":33},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":928},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":354120,"byte_end":354132,"line_start":782,"line_end":782,"column_start":23,"column_end":35},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":938},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":355586,"byte_end":355602,"line_start":823,"line_end":823,"column_start":6,"column_end":22},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":2157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":357340,"byte_end":357348,"line_start":871,"line_end":871,"column_start":10,"column_end":18},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":954},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":360293,"byte_end":360301,"line_start":940,"line_end":940,"column_start":25,"column_end":33},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":954},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":360528,"byte_end":360541,"line_start":948,"line_end":948,"column_start":29,"column_end":42},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":972},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":362032,"byte_end":362040,"line_start":993,"line_end":993,"column_start":27,"column_end":35},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":954},"to":{"krate":2,"index":1677}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":362689,"byte_end":362697,"line_start":1015,"line_end":1015,"column_start":33,"column_end":41},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":954},"to":{"krate":2,"index":1677}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":363494,"byte_end":363511,"line_start":1039,"line_end":1039,"column_start":27,"column_end":44},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1000},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":365886,"byte_end":365897,"line_start":1109,"line_end":1109,"column_start":50,"column_end":61},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":2164},"to":{"krate":0,"index":1012}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":366486,"byte_end":366487,"line_start":1131,"line_end":1131,"column_start":25,"column_end":26},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1029},"to":{"krate":0,"index":1012}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":367151,"byte_end":367159,"line_start":1151,"line_end":1151,"column_start":23,"column_end":31},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1032},"to":{"krate":0,"index":1012}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":382985,"byte_end":382994,"line_start":14,"line_end":14,"column_start":6,"column_end":15},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":2323},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":384548,"byte_end":384566,"line_start":59,"line_end":59,"column_start":23,"column_end":41},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1049},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":385666,"byte_end":385671,"line_start":87,"line_end":87,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1442},"to":{"krate":0,"index":1057}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":387900,"byte_end":387907,"line_start":158,"line_end":158,"column_start":13,"column_end":20},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1068},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":388191,"byte_end":388198,"line_start":174,"line_end":174,"column_start":26,"column_end":33},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1068},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":389425,"byte_end":389439,"line_start":214,"line_end":214,"column_start":13,"column_end":27},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1085},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":389733,"byte_end":389747,"line_start":230,"line_end":230,"column_start":26,"column_end":40},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1085},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":391411,"byte_end":391416,"line_start":35,"line_end":35,"column_start":10,"column_end":15},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":394470,"byte_end":394475,"line_start":125,"line_end":125,"column_start":23,"column_end":28},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2350},"to":{"krate":2,"index":6826}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":394652,"byte_end":394657,"line_start":132,"line_end":132,"column_start":21,"column_end":26},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2350},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":394845,"byte_end":394850,"line_start":140,"line_end":140,"column_start":21,"column_end":26},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":2350},"to":{"krate":2,"index":2096}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":394934,"byte_end":394939,"line_start":146,"line_end":146,"column_start":18,"column_end":23},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2350},"to":{"krate":2,"index":6022}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":395150,"byte_end":395155,"line_start":156,"line_end":156,"column_start":6,"column_end":11},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2350},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":411611,"byte_end":411616,"line_start":578,"line_end":578,"column_start":6,"column_end":11},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2350},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":415670,"byte_end":415675,"line_start":698,"line_end":698,"column_start":6,"column_end":11},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2350},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":417055,"byte_end":417067,"line_start":738,"line_end":738,"column_start":23,"column_end":35},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1187},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":417666,"byte_end":417671,"line_start":762,"line_end":762,"column_start":27,"column_end":32},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1198},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":418643,"byte_end":418649,"line_start":797,"line_end":797,"column_start":27,"column_end":33},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1208},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":420143,"byte_end":420159,"line_start":840,"line_end":840,"column_start":6,"column_end":22},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2355},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":421886,"byte_end":421894,"line_start":888,"line_end":888,"column_start":10,"column_end":18},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1223},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":424799,"byte_end":424807,"line_start":957,"line_end":957,"column_start":25,"column_end":33},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1223},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":425034,"byte_end":425047,"line_start":965,"line_end":965,"column_start":29,"column_end":42},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1241},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":426094,"byte_end":426102,"line_start":995,"line_end":995,"column_start":27,"column_end":35},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1223},"to":{"krate":2,"index":1677}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":426747,"byte_end":426755,"line_start":1017,"line_end":1017,"column_start":33,"column_end":41},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1223},"to":{"krate":2,"index":1677}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":427548,"byte_end":427565,"line_start":1041,"line_end":1041,"column_start":27,"column_end":44},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1266},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":428191,"byte_end":428205,"line_start":1062,"line_end":1062,"column_start":27,"column_end":41},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1278},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":428876,"byte_end":428883,"line_start":1083,"line_end":1083,"column_start":27,"column_end":34},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1289},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":431217,"byte_end":431228,"line_start":1151,"line_end":1151,"column_start":50,"column_end":61},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":2362},"to":{"krate":0,"index":1300}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":431811,"byte_end":431812,"line_start":1173,"line_end":1173,"column_start":25,"column_end":26},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1316},"to":{"krate":0,"index":1300}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":432454,"byte_end":432462,"line_start":1193,"line_end":1193,"column_start":23,"column_end":31},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1319},"to":{"krate":0,"index":1300}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/sparse.rs","byte_start":433658,"byte_end":433667,"line_start":26,"line_end":26,"column_start":6,"column_end":15},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2371},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/sparse.rs","byte_start":434463,"byte_end":434472,"line_start":63,"line_end":63,"column_start":16,"column_end":25},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2371},"to":{"krate":2,"index":1601}}]}