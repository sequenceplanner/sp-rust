{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0","program":"/home/endre/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","itertools","/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"use_std\"","-C","metadata=60fe1e99b1a323bb","-C","extra-filename=-60fe1e99b1a323bb","--out-dir","/home/endre/sp-rust/sp-codegen/target/rls/debug/deps","-L","dependency=/home/endre/sp-rust/sp-codegen/target/rls/debug/deps","--extern","either=/home/endre/sp-rust/sp-codegen/target/rls/debug/deps/libeither-503fe5e21198d271.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/endre/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/endre/sp-rust/sp-codegen/target/rls/debug/deps/libitertools-60fe1e99b1a323bb.rmeta"},"prelude":{"crate_id":{"name":"itertools","disambiguator":[3139104700749154409,10199568976528272272]},"crate_root":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src","external_crates":[{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3103785602532093942,17390144583497853382]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[3916277366462804126,4478459115610208312]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[1713477286964588179,15844277248566971785]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13012427356130990406,14608520140697239788]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6447241057134257354,1413806012037948949]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4393201617425879462,3310437476178738552]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7079830315103279809,4606718705203350064]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5206394019873543407,10667910451093706265]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[9386824491997906070,17212049238264027415]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16927035401729681780,12437521449932722366]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[11652895559356135055,9563436424588767888]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[16517787911197841201,14116661015581648310]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","num":13,"id":{"name":"backtrace_sys","disambiguator":[5448928475534237502,8623809376237663283]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[9897490559936190142,12325087316115451923]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","num":15,"id":{"name":"either","disambiguator":[205964971681739247,10541612449047268478]}}],"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":0,"byte_end":72271,"line_start":1,"line_end":2176,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":15,"index":170},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":1446,"byte_end":1452,"line_start":55,"line_end":55,"column_start":17,"column_end":23},"alias_span":null,"name":"Either","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":2,"index":2895},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":1917,"byte_end":1921,"line_start":76,"line_end":76,"column_start":14,"column_end":18},"alias_span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":1925,"byte_end":1935,"line_start":76,"line_end":76,"column_start":22,"column_end":32},"name":"__std_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":308},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2021,"byte_end":2026,"line_start":81,"line_end":81,"column_start":9,"column_end":14},"alias_span":null,"name":"Dedup","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":1463},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2036,"byte_end":2046,"line_start":82,"line_end":82,"column_start":9,"column_end":19},"alias_span":null,"name":"Interleave","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":1477},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2056,"byte_end":2074,"line_start":83,"line_end":83,"column_start":9,"column_end":27},"alias_span":null,"name":"InterleaveShortest","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":1501},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2084,"byte_end":2091,"line_start":84,"line_end":84,"column_start":9,"column_end":16},"alias_span":null,"name":"Product","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":1491},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2101,"byte_end":2108,"line_start":85,"line_end":85,"column_start":9,"column_end":16},"alias_span":null,"name":"PutBack","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":1516},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2118,"byte_end":2126,"line_start":86,"line_end":86,"column_start":9,"column_end":17},"alias_span":null,"name":"Batching","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":379},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2136,"byte_end":2143,"line_start":87,"line_end":87,"column_start":9,"column_end":16},"alias_span":null,"name":"MapInto","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":406},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2153,"byte_end":2163,"line_start":88,"line_end":88,"column_start":9,"column_end":19},"alias_span":null,"name":"MapResults","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":235},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2173,"byte_end":2178,"line_start":89,"line_end":89,"column_start":9,"column_end":14},"alias_span":null,"name":"Merge","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":256},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2188,"byte_end":2195,"line_start":90,"line_end":90,"column_start":9,"column_end":16},"alias_span":null,"name":"MergeBy","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":328},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2205,"byte_end":2217,"line_start":91,"line_end":91,"column_start":9,"column_end":21},"alias_span":null,"name":"TakeWhileRef","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":1551},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2227,"byte_end":2236,"line_start":92,"line_end":92,"column_start":9,"column_end":18},"alias_span":null,"name":"WhileSome","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":287},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2246,"byte_end":2254,"line_start":93,"line_end":93,"column_start":9,"column_end":17},"alias_span":null,"name":"Coalesce","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":1560},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2264,"byte_end":2281,"line_start":94,"line_end":94,"column_start":9,"column_end":26},"alias_span":null,"name":"TupleCombinations","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":434},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2291,"byte_end":2300,"line_start":95,"line_end":95,"column_start":9,"column_end":18},"alias_span":null,"name":"Positions","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":453},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2310,"byte_end":2316,"line_start":96,"line_end":96,"column_start":9,"column_end":15},"alias_span":null,"name":"Update","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":1526},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2372,"byte_end":2376,"line_start":99,"line_end":99,"column_start":23,"column_end":27},"alias_span":null,"name":"Step","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":1438},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2432,"byte_end":2444,"line_start":101,"line_end":101,"column_start":23,"column_end":35},"alias_span":null,"name":"MultiProduct","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":562},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2504,"byte_end":2516,"line_start":103,"line_end":103,"column_start":27,"column_end":39},"alias_span":null,"name":"Combinations","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":1831},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2548,"byte_end":2558,"line_start":104,"line_end":104,"column_start":31,"column_end":41},"alias_span":null,"name":"ConsTuples","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":1848},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2581,"byte_end":2587,"line_start":105,"line_end":105,"column_start":22,"column_end":28},"alias_span":null,"name":"Format","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":614},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2589,"byte_end":2599,"line_start":105,"line_end":105,"column_start":30,"column_end":40},"alias_span":null,"name":"FormatWith","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":764},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2660,"byte_end":2670,"line_start":107,"line_end":107,"column_start":27,"column_end":37},"alias_span":null,"name":"IntoChunks","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":788},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2672,"byte_end":2677,"line_start":107,"line_end":107,"column_start":39,"column_end":44},"alias_span":null,"name":"Chunk","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":778},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2679,"byte_end":2685,"line_start":107,"line_end":107,"column_start":46,"column_end":52},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":703},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2687,"byte_end":2694,"line_start":107,"line_end":107,"column_start":54,"column_end":61},"alias_span":null,"name":"GroupBy","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":741},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2696,"byte_end":2701,"line_start":107,"line_end":107,"column_start":63,"column_end":68},"alias_span":null,"name":"Group","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":727},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2703,"byte_end":2709,"line_start":107,"line_end":107,"column_start":70,"column_end":76},"alias_span":null,"name":"Groups","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":1901},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2737,"byte_end":2748,"line_start":108,"line_end":108,"column_start":26,"column_end":37},"alias_span":null,"name":"Intersperse","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":834},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2808,"byte_end":2814,"line_start":110,"line_end":110,"column_start":27,"column_end":33},"alias_span":null,"name":"KMerge","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":853},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2816,"byte_end":2824,"line_start":110,"line_end":110,"column_start":35,"column_end":43},"alias_span":null,"name":"KMergeBy","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":886},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2851,"byte_end":2862,"line_start":111,"line_end":111,"column_start":25,"column_end":36},"alias_span":null,"name":"MergeJoinBy","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":1945},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2924,"byte_end":2933,"line_start":113,"line_end":113,"column_start":29,"column_end":38},"alias_span":null,"name":"MultiPeek","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":1956},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2957,"byte_end":2965,"line_start":114,"line_end":114,"column_start":23,"column_end":31},"alias_span":null,"name":"PadUsing","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":975},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":2999,"byte_end":3015,"line_start":115,"line_end":115,"column_start":33,"column_end":49},"alias_span":null,"name":"PeekingTakeWhile","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":2012},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3051,"byte_end":3065,"line_start":116,"line_end":116,"column_start":35,"column_end":49},"alias_span":null,"name":"ProcessResults","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":2023},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3128,"byte_end":3136,"line_start":118,"line_end":118,"column_start":30,"column_end":38},"alias_span":null,"name":"PutBackN","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":2033},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3195,"byte_end":3201,"line_start":120,"line_end":120,"column_start":26,"column_end":32},"alias_span":null,"name":"RcIter","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":2039},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3224,"byte_end":3231,"line_start":121,"line_end":121,"column_start":22,"column_end":29},"alias_span":null,"name":"RepeatN","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":1074},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3280,"byte_end":3290,"line_start":123,"line_end":123,"column_start":23,"column_end":33},"alias_span":null,"name":"RepeatCall","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":2048},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3292,"byte_end":3298,"line_start":123,"line_end":123,"column_start":35,"column_end":41},"alias_span":null,"name":"Unfold","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":2057},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3300,"byte_end":3307,"line_start":123,"line_end":123,"column_start":43,"column_end":50},"alias_span":null,"name":"Iterate","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":2077},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3359,"byte_end":3362,"line_start":125,"line_end":125,"column_start":18,"column_end":21},"alias_span":null,"name":"Tee","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":2084},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3389,"byte_end":3400,"line_start":126,"line_end":126,"column_start":26,"column_end":37},"alias_span":null,"name":"TupleBuffer","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":2091},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3402,"byte_end":3414,"line_start":126,"line_end":126,"column_start":39,"column_end":51},"alias_span":null,"name":"TupleWindows","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":1141},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3416,"byte_end":3422,"line_start":126,"line_end":126,"column_start":53,"column_end":59},"alias_span":null,"name":"Tuples","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":2161},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3483,"byte_end":3489,"line_start":128,"line_end":128,"column_start":27,"column_end":33},"alias_span":null,"name":"Unique","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":2148},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3491,"byte_end":3499,"line_start":128,"line_end":128,"column_start":35,"column_end":43},"alias_span":null,"name":"UniqueBy","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":1218},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3529,"byte_end":3541,"line_start":129,"line_end":129,"column_start":28,"column_end":40},"alias_span":null,"name":"WithPosition","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":2194},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3568,"byte_end":3573,"line_start":130,"line_end":130,"column_start":26,"column_end":31},"alias_span":null,"name":"ZipEq","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":2207},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3600,"byte_end":3610,"line_start":131,"line_end":131,"column_start":26,"column_end":36},"alias_span":null,"name":"ZipLongest","value":"","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":2220},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3634,"byte_end":3637,"line_start":132,"line_end":132,"column_start":23,"column_end":26},"alias_span":null,"name":"Zip","value":"","parent":{"krate":0,"index":27}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3679,"byte_end":3680,"line_start":135,"line_end":135,"column_start":18,"column_end":19},"alias_span":null,"name":"*","value":"PadUsing, KMergeBy, Intersperse, FormatWith, Update, Coalesce, MergeBy, MapInto, Product, Dedup, TupleWindows, Tee, Unique, WithPosition, Combinations, Step, TupleCombinations, TakeWhileRef, ZipLongest, PutBack, Interleave, Tuples, MapResults, UniqueBy, PeekingTakeWhile, MergeJoinBy, KMerge, GroupBy, IntoChunks, Format, MultiProduct, Positions, WhileSome, Merge, ZipEq, InterleaveShortest, Batching, PutBackN","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":546},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3703,"byte_end":3709,"line_start":136,"line_end":136,"column_start":22,"column_end":28},"alias_span":null,"name":"concat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":556},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3737,"byte_end":3748,"line_start":137,"line_end":137,"column_start":27,"column_end":38},"alias_span":null,"name":"cons_tuples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":606},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3764,"byte_end":3773,"line_start":138,"line_end":138,"column_start":15,"column_end":24},"alias_span":null,"name":"diff_with","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":590},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3789,"byte_end":3793,"line_start":139,"line_end":139,"column_start":15,"column_end":19},"alias_span":null,"name":"Diff","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":861},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3845,"byte_end":3854,"line_start":141,"line_end":141,"column_start":23,"column_end":32},"alias_span":null,"name":"kmerge_by","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1922},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3873,"byte_end":3885,"line_start":142,"line_end":142,"column_start":17,"column_end":29},"alias_span":null,"name":"MinMaxResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":960},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3915,"byte_end":3926,"line_start":143,"line_end":143,"column_start":29,"column_end":40},"alias_span":null,"name":"PeekingNext","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1001},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3958,"byte_end":3973,"line_start":144,"line_end":144,"column_start":31,"column_end":46},"alias_span":null,"name":"process_results","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1045},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":3992,"byte_end":4000,"line_start":145,"line_end":145,"column_start":18,"column_end":26},"alias_span":null,"name":"repeat_n","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1079},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":4041,"byte_end":4052,"line_start":147,"line_end":147,"column_start":19,"column_end":30},"alias_span":null,"name":"repeat_call","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1088},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":4054,"byte_end":4060,"line_start":147,"line_end":147,"column_start":32,"column_end":38},"alias_span":null,"name":"unfold","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1111},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":4062,"byte_end":4069,"line_start":147,"line_end":147,"column_start":40,"column_end":47},"alias_span":null,"name":"iterate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2168},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":4095,"byte_end":4103,"line_start":148,"line_end":148,"column_start":24,"column_end":32},"alias_span":null,"name":"Position","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1274},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":4123,"byte_end":4131,"line_start":149,"line_end":149,"column_start":19,"column_end":27},"alias_span":null,"name":"multizip","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1651},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":4191,"byte_end":4203,"line_start":152,"line_end":152,"column_start":25,"column_end":37},"alias_span":null,"name":"EitherOrBoth","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":146},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/free.rs","byte_start":114080,"byte_end":114090,"line_start":16,"line_end":16,"column_start":5,"column_end":15},"alias_span":null,"name":"interleave","value":"","parent":{"krate":0,"index":493}},{"kind":"Use","ref_id":{"krate":0,"index":246},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/free.rs","byte_start":114096,"byte_end":114101,"line_start":17,"line_end":17,"column_start":5,"column_end":10},"alias_span":null,"name":"merge","value":"","parent":{"krate":0,"index":493}},{"kind":"Use","ref_id":{"krate":0,"index":165},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/free.rs","byte_start":114107,"byte_end":114115,"line_start":18,"line_end":18,"column_start":5,"column_end":13},"alias_span":null,"name":"put_back","value":"","parent":{"krate":0,"index":493}},{"kind":"Use","ref_id":{"krate":0,"index":1010},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/free.rs","byte_start":114173,"byte_end":114183,"line_start":21,"line_end":21,"column_start":26,"column_end":36},"alias_span":null,"name":"put_back_n","value":"","parent":{"krate":0,"index":493}},{"kind":"Use","ref_id":{"krate":0,"index":918},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/free.rs","byte_start":114237,"byte_end":114246,"line_start":23,"line_end":23,"column_start":25,"column_end":34},"alias_span":null,"name":"multipeek","value":"","parent":{"krate":0,"index":493}},{"kind":"Use","ref_id":{"krate":0,"index":839},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/free.rs","byte_start":114297,"byte_end":114303,"line_start":25,"line_end":25,"column_start":22,"column_end":28},"alias_span":null,"name":"kmerge","value":"","parent":{"krate":0,"index":493}},{"kind":"Use","ref_id":{"krate":0,"index":1236},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/free.rs","byte_start":114326,"byte_end":114332,"line_start":26,"line_end":26,"column_start":22,"column_end":28},"alias_span":null,"name":"zip_eq","value":"","parent":{"krate":0,"index":493}},{"kind":"Use","ref_id":{"krate":0,"index":882},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/free.rs","byte_start":114354,"byte_end":114367,"line_start":27,"line_end":27,"column_start":21,"column_end":34},"alias_span":null,"name":"merge_join_by","value":"","parent":{"krate":0,"index":493}},{"kind":"Use","ref_id":{"krate":0,"index":1024},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/free.rs","byte_start":114418,"byte_end":114424,"line_start":29,"line_end":29,"column_start":22,"column_end":28},"alias_span":null,"name":"rciter","value":"","parent":{"krate":0,"index":493}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":4263,"byte_end":4264,"line_start":156,"line_end":156,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"merge_join_by, zip_eq, interleave, kmerge, merge","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":0,"byte_end":72271,"line_start":1,"line_end":2176,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":481},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":550},{"krate":0,"index":559},{"krate":0,"index":587},{"krate":0,"index":611},{"krate":0,"index":638},{"krate":0,"index":646},{"krate":0,"index":803},{"krate":0,"index":813},{"krate":0,"index":874},{"krate":0,"index":904},{"krate":0,"index":913},{"krate":0,"index":937},{"krate":0,"index":956},{"krate":0,"index":992},{"krate":0,"index":1008},{"krate":0,"index":1020},{"krate":0,"index":1044},{"krate":0,"index":1057},{"krate":0,"index":1071},{"krate":0,"index":1114},{"krate":0,"index":1128},{"krate":0,"index":1177},{"krate":0,"index":1214},{"krate":0,"index":1234},{"krate":0,"index":1248},{"krate":0,"index":1272},{"krate":0,"index":1278},{"krate":0,"index":1279},{"krate":0,"index":1280},{"krate":0,"index":1421},{"krate":0,"index":1423},{"krate":0,"index":1426},{"krate":0,"index":1429},{"krate":0,"index":2393},{"krate":0,"index":2414},{"krate":0,"index":2411},{"krate":0,"index":2408},{"krate":0,"index":2405},{"krate":0,"index":2401},{"krate":0,"index":1434}],"decl_id":null,"docs":" Extra iterator adaptors, functions and macros.","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"crate_name = \"itertools\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":23,"byte_end":49,"line_start":2,"line_end":2,"column_start":1,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":27},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":1979,"byte_end":1986,"line_start":79,"line_end":79,"column_start":9,"column_end":16},"name":"structs","qualname":"::structs","value":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86}],"decl_id":null,"docs":" The concrete iterator types.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1438},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/multi_product.rs","byte_start":106020,"byte_end":106032,"line_start":15,"line_end":15,"column_start":12,"column_end":24},"name":"MultiProduct","qualname":"::adaptors::multi_product::MultiProduct","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that iterates over the cartesian product of\n multiple iterators of type `I`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/multi_product.rs","byte_start":105935,"byte_end":106008,"line_start":14,"line_end":14,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1463},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":73673,"byte_end":73683,"line_start":35,"line_end":35,"column_start":12,"column_end":22},"name":"Interleave","qualname":"::adaptors::Interleave","value":"Interleave {  }","parent":null,"children":[{"krate":0,"index":1466},{"krate":0,"index":1467},{"krate":0,"index":1468}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from two iterators until both\n run out.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":73588,"byte_end":73661,"line_start":34,"line_end":34,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":146},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":74013,"byte_end":74023,"line_start":52,"line_end":52,"column_start":8,"column_end":18},"name":"interleave","qualname":"::adaptors::interleave","value":"fn <I, J> (i: I, j: J) -> Interleave<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that interleaves elements in `i` and `j`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1477},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":75288,"byte_end":75306,"line_start":98,"line_end":98,"column_start":12,"column_end":30},"name":"InterleaveShortest","qualname":"::adaptors::InterleaveShortest","value":"InterleaveShortest {  }","parent":null,"children":[{"krate":0,"index":1480},{"krate":0,"index":1481},{"krate":0,"index":1482}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from the two iterators until\n one of them runs out.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":75203,"byte_end":75276,"line_start":97,"line_end":97,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1491},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":77708,"byte_end":77715,"line_start":187,"line_end":187,"column_start":12,"column_end":19},"name":"PutBack","qualname":"::adaptors::PutBack","value":"PutBack {  }","parent":null,"children":[{"krate":0,"index":1493},{"krate":0,"index":1494}],"decl_id":null,"docs":" An iterator adaptor that allows putting back a single\n item to the front of the iterator.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":165},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":77852,"byte_end":77860,"line_start":195,"line_end":195,"column_start":8,"column_end":16},"name":"put_back","qualname":"::adaptors::put_back","value":"fn <I> (iterable: I) -> PutBack<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator where you can put back a single item\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":78109,"byte_end":78119,"line_start":208,"line_end":208,"column_start":12,"column_end":22},"name":"with_value","qualname":"<PutBack<I>>::with_value","value":"fn (mut self, value: I::Item) -> Self","parent":null,"children":[],"decl_id":null,"docs":" put back value `value` (builder method)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":78275,"byte_end":78285,"line_start":215,"line_end":215,"column_start":12,"column_end":22},"name":"into_parts","qualname":"<PutBack<I>>::into_parts","value":"fn (self) -> (Option<I::Item>, I)","parent":null,"children":[],"decl_id":null,"docs":" Split the `PutBack` into its parts.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":78254,"byte_end":78263,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":78550,"byte_end":78558,"line_start":224,"line_end":224,"column_start":12,"column_end":20},"name":"put_back","qualname":"<PutBack<I>>::put_back","value":"fn (&mut self, x: I::Item) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Put back a single value to the front of the iterator.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":78529,"byte_end":78538,"line_start":223,"line_end":223,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1501},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":80019,"byte_end":80026,"line_start":276,"line_end":276,"column_start":12,"column_end":19},"name":"Product","qualname":"::adaptors::Product","value":"Product {  }","parent":null,"children":[{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1506},{"krate":0,"index":1507}],"decl_id":null,"docs":" An iterator adaptor that iterates over the cartesian product of\n the element sets of two iterators `I` and `J`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":79934,"byte_end":80007,"line_start":275,"line_end":275,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1516},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":82866,"byte_end":82874,"line_start":372,"line_end":372,"column_start":12,"column_end":20},"name":"Batching","qualname":"::adaptors::Batching","value":"Batching {  }","parent":null,"children":[{"krate":0,"index":1519},{"krate":0,"index":1520}],"decl_id":null,"docs":" A “meta iterator adaptor”. Its closure receives a reference to the iterator\n and may pick off as many elements as it likes, to produce the next iterator element.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":82781,"byte_end":82854,"line_start":371,"line_end":371,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1526},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":83998,"byte_end":84002,"line_start":414,"line_end":414,"column_start":12,"column_end":16},"name":"Step","qualname":"::adaptors::Step","value":"Step {  }","parent":null,"children":[{"krate":0,"index":1528},{"krate":0,"index":1529}],"decl_id":null,"docs":" An iterator adaptor that steps a number elements in the base iterator\n for each iteration.","sig":null,"attributes":[{"value":"deprecated(note = \"Use std .step_by() instead\", since = \"0.8\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":83806,"byte_end":83867,"line_start":410,"line_end":410,"column_start":1,"column_end":62}},{"value":"allow(deprecated)","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":83868,"byte_end":83888,"line_start":411,"line_end":411,"column_start":1,"column_end":21}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":83913,"byte_end":83986,"line_start":413,"line_end":413,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":235},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":86813,"byte_end":86818,"line_start":531,"line_end":531,"column_start":12,"column_end":17},"name":"Merge","qualname":"::adaptors::Merge","value":"Merge {  }","parent":null,"children":[{"krate":0,"index":238}],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":86728,"byte_end":86801,"line_start":530,"line_end":530,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":246},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":87606,"byte_end":87611,"line_start":567,"line_end":567,"column_start":8,"column_end":13},"name":"merge","qualname":"::adaptors::merge","value":"fn <I, J> (i: I, j: J) -> Merge<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements in `i` and `j`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":256},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":88684,"byte_end":88691,"line_start":604,"line_end":604,"column_start":12,"column_end":19},"name":"MergeBy","qualname":"::adaptors::MergeBy","value":"MergeBy {  }","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":261}],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":88599,"byte_end":88672,"line_start":603,"line_end":603,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":287},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":91242,"byte_end":91250,"line_start":705,"line_end":705,"column_start":12,"column_end":20},"name":"Coalesce","qualname":"::adaptors::Coalesce","value":"Coalesce {  }","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":291}],"decl_id":null,"docs":" An iterator adaptor that may join together adjacent elements.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":91157,"byte_end":91230,"line_start":704,"line_end":704,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":308},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":92481,"byte_end":92486,"line_start":760,"line_end":760,"column_start":12,"column_end":17},"name":"Dedup","qualname":"::adaptors::Dedup","value":"Dedup {  }","parent":null,"children":[{"krate":0,"index":310}],"decl_id":null,"docs":" An iterator adaptor that removes repeated duplicates.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":92396,"byte_end":92469,"line_start":759,"line_end":759,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":328},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":94197,"byte_end":94209,"line_start":833,"line_end":833,"column_start":12,"column_end":24},"name":"TakeWhileRef","qualname":"::adaptors::TakeWhileRef","value":"TakeWhileRef {  }","parent":null,"children":[{"krate":0,"index":332},{"krate":0,"index":333}],"decl_id":null,"docs":" An iterator adaptor that borrows from a `Clone`-able iterator\n to only pick off elements while the predicate returns `true`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":94112,"byte_end":94185,"line_start":832,"line_end":832,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1551},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":95582,"byte_end":95591,"line_start":884,"line_end":884,"column_start":12,"column_end":21},"name":"WhileSome","qualname":"::adaptors::WhileSome","value":"WhileSome {  }","parent":null,"children":[{"krate":0,"index":1553}],"decl_id":null,"docs":" An iterator adaptor that filters `Option<A>` iterator elements\n and produces `A`. Stops on the first `None` encountered.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":95497,"byte_end":95570,"line_start":883,"line_end":883,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1560},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":96442,"byte_end":96459,"line_start":918,"line_end":918,"column_start":12,"column_end":29},"name":"TupleCombinations","qualname":"::adaptors::TupleCombinations","value":"TupleCombinations {  }","parent":null,"children":[{"krate":0,"index":1563},{"krate":0,"index":1564},{"krate":0,"index":1565}],"decl_id":null,"docs":" An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples\n of a specific size.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":96357,"byte_end":96430,"line_start":917,"line_end":917,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":356},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":96610,"byte_end":96624,"line_start":927,"line_end":927,"column_start":11,"column_end":25},"name":"HasCombination","qualname":"::adaptors::HasCombination","value":"HasCombination<I>: Sized","parent":null,"children":[{"krate":0,"index":358}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":358},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":96646,"byte_end":96657,"line_start":928,"line_end":928,"column_start":10,"column_end":21},"name":"Combination","qualname":"::adaptors::HasCombination::Combination","value":"type Combination: From<I> + Iterator<Item = Self>;","parent":{"krate":0,"index":356},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1570},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":97278,"byte_end":97295,"line_start":956,"line_end":956,"column_start":12,"column_end":29},"name":"Tuple1Combination","qualname":"::adaptors::Tuple1Combination","value":"Tuple1Combination {  }","parent":null,"children":[{"krate":0,"index":1572}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1593},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":99516,"byte_end":99533,"line_start":1037,"line_end":1037,"column_start":25,"column_end":42},"name":"Tuple2Combination","qualname":"::adaptors::Tuple2Combination","value":"Tuple2Combination {  }","parent":null,"children":[{"krate":0,"index":1595},{"krate":0,"index":1596},{"krate":0,"index":1597}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1618},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":99592,"byte_end":99609,"line_start":1038,"line_end":1038,"column_start":25,"column_end":42},"name":"Tuple3Combination","qualname":"::adaptors::Tuple3Combination","value":"Tuple3Combination {  }","parent":null,"children":[{"krate":0,"index":1620},{"krate":0,"index":1621},{"krate":0,"index":1622}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1643},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":99673,"byte_end":99690,"line_start":1039,"line_end":1039,"column_start":25,"column_end":42},"name":"Tuple4Combination","qualname":"::adaptors::Tuple4Combination","value":"Tuple4Combination {  }","parent":null,"children":[{"krate":0,"index":1645},{"krate":0,"index":1646},{"krate":0,"index":1647}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":379},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":99979,"byte_end":99986,"line_start":1045,"line_end":1045,"column_start":12,"column_end":19},"name":"MapInto","qualname":"::adaptors::MapInto","value":"MapInto {  }","parent":null,"children":[{"krate":0,"index":382},{"krate":0,"index":383}],"decl_id":null,"docs":" An iterator adapter to apply `Into` conversion to each element.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":99894,"byte_end":99967,"line_start":1044,"line_end":1044,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":406},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":101347,"byte_end":101357,"line_start":1102,"line_end":1102,"column_start":12,"column_end":22},"name":"MapResults","qualname":"::adaptors::MapResults","value":"MapResults {  }","parent":null,"children":[{"krate":0,"index":409},{"krate":0,"index":410}],"decl_id":null,"docs":" An iterator adapter to apply a transformation within a nested `Result`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":101262,"byte_end":101335,"line_start":1101,"line_end":1101,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":434},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":102648,"byte_end":102657,"line_start":1151,"line_end":1151,"column_start":12,"column_end":21},"name":"Positions","qualname":"::adaptors::Positions","value":"Positions {  }","parent":null,"children":[{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439}],"decl_id":null,"docs":" An iterator adapter to get the positions of each element that matches a predicate.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":102563,"byte_end":102636,"line_start":1150,"line_end":1150,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":453},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":104073,"byte_end":104079,"line_start":1209,"line_end":1209,"column_start":12,"column_end":18},"name":"Update","qualname":"::adaptors::Update","value":"Update {  }","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":457}],"decl_id":null,"docs":" An iterator adapter to apply a mutating function to each element before yielding it.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":103988,"byte_end":104061,"line_start":1208,"line_end":1208,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1654},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/either_or_both.rs","byte_start":112007,"byte_end":112011,"line_start":7,"line_end":7,"column_start":5,"column_end":9},"name":"Both","qualname":"::either_or_both::EitherOrBoth::Both","value":"EitherOrBoth::Both(A, B)","parent":{"krate":0,"index":1651},"children":[],"decl_id":null,"docs":" Both values are present.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1658},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/either_or_both.rs","byte_start":112075,"byte_end":112079,"line_start":9,"line_end":9,"column_start":5,"column_end":9},"name":"Left","qualname":"::either_or_both::EitherOrBoth::Left","value":"EitherOrBoth::Left(A)","parent":{"krate":0,"index":1651},"children":[],"decl_id":null,"docs":" Only the left value of type `A` is present.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1661},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/either_or_both.rs","byte_start":112141,"byte_end":112146,"line_start":11,"line_end":11,"column_start":5,"column_end":10},"name":"Right","qualname":"::either_or_both::EitherOrBoth::Right","value":"EitherOrBoth::Right(B)","parent":{"krate":0,"index":1651},"children":[],"decl_id":null,"docs":" Only the right value of type `B` is present.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1651},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/either_or_both.rs","byte_start":111949,"byte_end":111961,"line_start":5,"line_end":5,"column_start":10,"column_end":22},"name":"EitherOrBoth","qualname":"::either_or_both::EitherOrBoth","value":"EitherOrBoth::{Both, Left, Right}","parent":null,"children":[{"krate":0,"index":1654},{"krate":0,"index":1658},{"krate":0,"index":1661}],"decl_id":null,"docs":" Value that either holds a single A or B, or both.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/either_or_both.rs","byte_start":111940,"byte_end":112152,"line_start":5,"line_end":12,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/either_or_both.rs","byte_start":112265,"byte_end":112273,"line_start":16,"line_end":16,"column_start":12,"column_end":20},"name":"has_left","qualname":"<EitherOrBoth<A, B>>::has_left","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If `Left`, or `Both`, return true, otherwise, return false.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/either_or_both.rs","byte_start":112417,"byte_end":112426,"line_start":21,"line_end":21,"column_start":12,"column_end":21},"name":"has_right","qualname":"<EitherOrBoth<A, B>>::has_right","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If `Right`, or `Both`, return true, otherwise, return false.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/either_or_both.rs","byte_start":112593,"byte_end":112597,"line_start":26,"line_end":26,"column_start":12,"column_end":16},"name":"left","qualname":"<EitherOrBoth<A, B>>::left","value":"fn (self) -> Option<A>","parent":null,"children":[],"decl_id":null,"docs":" If `Left`, or `Both`, return `Some` with the left value, otherwise, return `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/either_or_both.rs","byte_start":112837,"byte_end":112842,"line_start":34,"line_end":34,"column_start":12,"column_end":17},"name":"right","qualname":"<EitherOrBoth<A, B>>::right","value":"fn (self) -> Option<B>","parent":null,"children":[],"decl_id":null,"docs":" If `Right`, or `Both`, return `Some` with the right value, otherwise, return `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/either_or_both.rs","byte_start":113064,"byte_end":113070,"line_start":42,"line_end":42,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<EitherOrBoth<A, B>>::as_ref","value":"fn (&self) -> EitherOrBoth<&A, &B>","parent":null,"children":[],"decl_id":null,"docs":" Converts from `&EitherOrBoth<A, B>` to `EitherOrBoth<&A, &B>`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/either_or_both.rs","byte_start":113385,"byte_end":113391,"line_start":51,"line_end":51,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<EitherOrBoth<A, B>>::as_mut","value":"fn (&mut self) -> EitherOrBoth<&mut A, &mut B>","parent":null,"children":[],"decl_id":null,"docs":" Converts from `&mut EitherOrBoth<A, B>` to `EitherOrBoth<&mut A, &mut B>`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":493},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/free.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"free","qualname":"::free","value":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/free.rs","parent":null,"children":[{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":498},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":513},{"krate":0,"index":515},{"krate":0,"index":518},{"krate":0,"index":521},{"krate":0,"index":525},{"krate":0,"index":529},{"krate":0,"index":532},{"krate":0,"index":535},{"krate":0,"index":537},{"krate":0,"index":539},{"krate":0,"index":541}],"decl_id":null,"docs":" Free functions that create iterator adaptors or call iterator methods.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":511},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/free.rs","byte_start":114665,"byte_end":114674,"line_start":42,"line_end":42,"column_start":8,"column_end":17},"name":"enumerate","qualname":"::free::enumerate","value":"fn <I> (iterable: I) -> iter::Enumerate<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` with a running index.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":513},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/free.rs","byte_start":114996,"byte_end":114999,"line_start":59,"line_end":59,"column_start":8,"column_end":11},"name":"rev","qualname":"::free::rev","value":"fn <I> (iterable: I) -> iter::Rev<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` in reverse.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":515},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/free.rs","byte_start":115400,"byte_end":115403,"line_start":78,"line_end":78,"column_start":8,"column_end":11},"name":"zip","qualname":"::free::zip","value":"fn <I, J> (i: I, j: J) -> Zip<I::IntoIter, J::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `i` and `j` in lock step.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":518},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/free.rs","byte_start":115783,"byte_end":115788,"line_start":96,"line_end":96,"column_start":8,"column_end":13},"name":"chain","qualname":"::free::chain","value":"fn <I, J> (i: I, j: J) -> iter::Chain<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that first iterates `i` and then `j`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":521},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/free.rs","byte_start":116211,"byte_end":116217,"line_start":112,"line_end":112,"column_start":8,"column_end":14},"name":"cloned","qualname":"::free::cloned","value":"fn <'a, I, T> (iterable: I) -> iter::Cloned<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that clones each element from &T to T","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":525},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/free.rs","byte_start":116605,"byte_end":116609,"line_start":128,"line_end":128,"column_start":8,"column_end":12},"name":"fold","qualname":"::free::fold","value":"fn <I, B, F> (iterable: I, init: B, f: F) -> B","parent":null,"children":[],"decl_id":null,"docs":" Perform a fold operation over the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":529},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/free.rs","byte_start":116984,"byte_end":116987,"line_start":144,"line_end":144,"column_start":8,"column_end":11},"name":"all","qualname":"::free::all","value":"fn <I, F> (iterable: I, f: F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for all elements in the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":532},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/free.rs","byte_start":117347,"byte_end":117350,"line_start":160,"line_end":160,"column_start":8,"column_end":11},"name":"any","qualname":"::free::any","value":"fn <I, F> (iterable: I, f: F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for any elements in the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":535},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/free.rs","byte_start":117675,"byte_end":117678,"line_start":176,"line_end":176,"column_start":8,"column_end":11},"name":"max","qualname":"::free::max","value":"fn <I> (iterable: I) -> Option<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Return the maximum value of the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":537},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/free.rs","byte_start":117991,"byte_end":117994,"line_start":192,"line_end":192,"column_start":8,"column_end":11},"name":"min","qualname":"::free::min","value":"fn <I> (iterable: I) -> Option<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Return the minimum value of the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":539},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/free.rs","byte_start":118387,"byte_end":118391,"line_start":210,"line_end":210,"column_start":8,"column_end":12},"name":"join","qualname":"::free::join","value":"fn <I> (iterable: I, sep: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Combine all iterator elements into one String, seperated by `sep`.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/free.rs","byte_start":118352,"byte_end":118379,"line_start":209,"line_end":209,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":541},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/free.rs","byte_start":118887,"byte_end":118893,"line_start":230,"line_end":230,"column_start":8,"column_end":14},"name":"sorted","qualname":"::free::sorted","value":"fn <I> (iterable: I) -> VecIntoIter<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/free.rs","byte_start":118852,"byte_end":118879,"line_start":229,"line_end":229,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":546},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/concat_impl.rs","byte_start":119526,"byte_end":119532,"line_start":17,"line_end":17,"column_start":8,"column_end":14},"name":"concat","qualname":"::concat_impl::concat","value":"fn <I> (iterable: I) -> I::Item","parent":null,"children":[],"decl_id":null,"docs":" Combine all an iterator's elements into one element by using `Extend`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1831},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/cons_tuples_impl.rs","byte_start":121308,"byte_end":121318,"line_start":46,"line_end":46,"column_start":12,"column_end":22},"name":"ConsTuples","qualname":"::cons_tuples_impl::ConsTuples","value":"ConsTuples {  }","parent":null,"children":[{"krate":0,"index":1834}],"decl_id":null,"docs":" An iterator that maps an iterator of tuples like\n `((A, B), C)` to an iterator of `(A, B, C)`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/cons_tuples_impl.rs","byte_start":121206,"byte_end":121279,"line_start":44,"line_end":44,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":556},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/cons_tuples_impl.rs","byte_start":121659,"byte_end":121670,"line_start":64,"line_end":64,"column_start":8,"column_end":19},"name":"cons_tuples","qualname":"::cons_tuples_impl::cons_tuples","value":"fn <I, J> (iterable: I) -> ConsTuples<I, J>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that maps for example iterators of\n `((A, B), C)` to `(A, B, C)`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":562},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/combinations.rs","byte_start":122095,"byte_end":122107,"line_start":9,"line_end":9,"column_start":12,"column_end":24},"name":"Combinations","qualname":"::combinations::Combinations","value":"Combinations {  }","parent":null,"children":[{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567}],"decl_id":null,"docs":" An iterator to iterate through all the `n`-length combinations in an iterator.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/combinations.rs","byte_start":122010,"byte_end":122083,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":593},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/diff.rs","byte_start":126548,"byte_end":126561,"line_start":21,"line_end":21,"column_start":5,"column_end":18},"name":"FirstMismatch","qualname":"::diff::Diff::FirstMismatch","value":"Diff::FirstMismatch(usize, PutBack<I>, PutBack<J>)","parent":{"krate":0,"index":590},"children":[],"decl_id":null,"docs":" The index of the first non-matching element along with both iterator's remaining elements\n starting with the first mis-match.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":598},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/diff.rs","byte_start":126694,"byte_end":126701,"line_start":23,"line_end":23,"column_start":5,"column_end":12},"name":"Shorter","qualname":"::diff::Diff::Shorter","value":"Diff::Shorter(usize, PutBack<I>)","parent":{"krate":0,"index":590},"children":[],"decl_id":null,"docs":" The total number of elements that were in `J` along with the remaining elements of `I`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":602},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/diff.rs","byte_start":126822,"byte_end":126828,"line_start":25,"line_end":25,"column_start":5,"column_end":11},"name":"Longer","qualname":"::diff::Diff::Longer","value":"Diff::Longer(usize, PutBack<J>)","parent":{"krate":0,"index":590},"children":[],"decl_id":null,"docs":" The total number of elements that were in `I` along with the remaining elements of `J`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":590},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/diff.rs","byte_start":126345,"byte_end":126349,"line_start":15,"line_end":15,"column_start":10,"column_end":14},"name":"Diff","qualname":"::diff::Diff","value":"Diff::{FirstMismatch, Shorter, Longer}","parent":null,"children":[{"krate":0,"index":593},{"krate":0,"index":598},{"krate":0,"index":602}],"decl_id":null,"docs":" A type returned by the [`diff_with`](./fn.diff_with.html) function.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":606},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/diff.rs","byte_start":127577,"byte_end":127586,"line_start":40,"line_end":40,"column_start":8,"column_end":17},"name":"diff_with","qualname":"::diff::diff_with","value":"fn <I, J, F> (i: I, j: J, is_equal: F) -> Option<Diff<I::IntoIter, J::IntoIter>>","parent":null,"children":[],"decl_id":null,"docs":" Compares every element yielded by both `i` and `j` with the given function in lock-step and\n returns a `Diff` which describes how `j` differs from `i`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":614},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/format.rs","byte_start":128706,"byte_end":128716,"line_start":10,"line_end":10,"column_start":12,"column_end":22},"name":"FormatWith","qualname":"::format::FormatWith","value":"FormatWith {  }","parent":null,"children":[{"krate":0,"index":618},{"krate":0,"index":619}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1848},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/format.rs","byte_start":129139,"byte_end":129145,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"Format","qualname":"::format::Format","value":"Format {  }","parent":null,"children":[{"krate":0,"index":1851},{"krate":0,"index":1852}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":653},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":132422,"byte_end":132425,"line_start":6,"line_end":6,"column_start":10,"column_end":13},"name":"Key","qualname":"::groupbylazy::KeyFunction::Key","value":"type Key;","parent":{"krate":0,"index":651},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":703},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":141891,"byte_end":141898,"line_start":289,"line_end":289,"column_start":12,"column_end":19},"name":"GroupBy","qualname":"::groupbylazy::GroupBy","value":"GroupBy {  }","parent":null,"children":[{"krate":0,"index":707},{"krate":0,"index":708}],"decl_id":null,"docs":" `GroupBy` is the storage for the lazy grouping operation.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":141806,"byte_end":141879,"line_start":288,"line_end":288,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":727},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":143765,"byte_end":143771,"line_start":359,"line_end":359,"column_start":12,"column_end":18},"name":"Groups","qualname":"::groupbylazy::Groups","value":"Groups {  }","parent":null,"children":[{"krate":0,"index":732}],"decl_id":null,"docs":" An iterator that yields the Group iterators.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":143680,"byte_end":143753,"line_start":358,"line_end":358,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":741},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":144639,"byte_end":144644,"line_start":393,"line_end":393,"column_start":12,"column_end":17},"name":"Group","qualname":"::groupbylazy::Group","value":"Group {  }","parent":null,"children":[{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748}],"decl_id":null,"docs":" An iterator for the elements in a single group.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":764},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":146579,"byte_end":146589,"line_start":465,"line_end":465,"column_start":12,"column_end":22},"name":"IntoChunks","qualname":"::groupbylazy::IntoChunks","value":"IntoChunks {  }","parent":null,"children":[{"krate":0,"index":766},{"krate":0,"index":767}],"decl_id":null,"docs":" `ChunkLazy` is the storage for a lazy chunking operation.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":146494,"byte_end":146567,"line_start":464,"line_end":464,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":778},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":147712,"byte_end":147718,"line_start":510,"line_end":510,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::groupbylazy::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":781}],"decl_id":null,"docs":" An iterator that yields the Chunk iterators.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":147627,"byte_end":147700,"line_start":509,"line_end":509,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":788},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":148436,"byte_end":148441,"line_start":541,"line_end":541,"column_start":12,"column_end":17},"name":"Chunk","qualname":"::groupbylazy::Chunk","value":"Chunk {  }","parent":null,"children":[{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":793}],"decl_id":null,"docs":" An iterator for the elements in a single chunk.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1901},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/intersperse.rs","byte_start":149485,"byte_end":149496,"line_start":15,"line_end":15,"column_start":12,"column_end":23},"name":"Intersperse","qualname":"::intersperse::Intersperse","value":"Intersperse {  }","parent":null,"children":[{"krate":0,"index":1903},{"krate":0,"index":1904},{"krate":0,"index":1905}],"decl_id":null,"docs":" An iterator adaptor to insert a particular value\n between each element of the adapted iterator.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/intersperse.rs","byte_start":149383,"byte_end":149456,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":834},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/kmerge_impl.rs","byte_start":153697,"byte_end":153703,"line_start":115,"line_end":115,"column_start":12,"column_end":18},"name":"KMerge","qualname":"::kmerge_impl::KMerge","value":"KMerge {  }","parent":null,"children":[{"krate":0,"index":836}],"decl_id":null,"docs":" An iterator adaptor that merges an abitrary number of base iterators in ascending order.\n If all base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/kmerge_impl.rs","byte_start":153612,"byte_end":153685,"line_start":114,"line_end":114,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":839},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/kmerge_impl.rs","byte_start":154223,"byte_end":154229,"line_start":140,"line_end":140,"column_start":8,"column_end":14},"name":"kmerge","qualname":"::kmerge_impl::kmerge","value":"fn <I> (iterable: I) -> KMerge<<I::Item as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements of the contained iterators using\n the ordering function.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":853},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/kmerge_impl.rs","byte_start":155883,"byte_end":155891,"line_start":197,"line_end":197,"column_start":12,"column_end":20},"name":"KMergeBy","qualname":"::kmerge_impl::KMergeBy","value":"KMergeBy {  }","parent":null,"children":[{"krate":0,"index":856},{"krate":0,"index":857}],"decl_id":null,"docs":" An iterator adaptor that merges an abitrary number of base iterators\n according to an ordering function.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/kmerge_impl.rs","byte_start":155798,"byte_end":155871,"line_start":196,"line_end":196,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":861},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/kmerge_impl.rs","byte_start":156270,"byte_end":156279,"line_start":214,"line_end":214,"column_start":8,"column_end":17},"name":"kmerge_by","qualname":"::kmerge_impl::kmerge_by","value":"fn <I, F> (iterable: I, mut less_than: F) -> KMergeBy<<I::Item as IntoIterator>::IntoIter, F>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements of the contained iterators.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":882},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/merge_join.rs","byte_start":158002,"byte_end":158015,"line_start":11,"line_end":11,"column_start":8,"column_end":21},"name":"merge_join_by","qualname":"::merge_join::merge_join_by","value":"fn <I, J, F> (left: I, right: J, cmp_fn: F) -> MergeJoinBy<I::IntoIter, J::IntoIter, F>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":886},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/merge_join.rs","byte_start":158641,"byte_end":158652,"line_start":28,"line_end":28,"column_start":12,"column_end":23},"name":"MergeJoinBy","qualname":"::merge_join::MergeJoinBy","value":"MergeJoinBy {  }","parent":null,"children":[{"krate":0,"index":890},{"krate":0,"index":891},{"krate":0,"index":892}],"decl_id":null,"docs":" An iterator adaptor that merge-joins items from the two base iterators in ascending order.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/merge_join.rs","byte_start":158556,"byte_end":158629,"line_start":27,"line_end":27,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1924},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/minmax.rs","byte_start":160661,"byte_end":160671,"line_start":7,"line_end":7,"column_start":5,"column_end":15},"name":"NoElements","qualname":"::minmax::MinMaxResult::NoElements","value":"MinMaxResult::NoElements","parent":{"krate":0,"index":1922},"children":[],"decl_id":null,"docs":" Empty iterator\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1926},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/minmax.rs","byte_start":160753,"byte_end":160763,"line_start":10,"line_end":10,"column_start":5,"column_end":15},"name":"OneElement","qualname":"::minmax::MinMaxResult::OneElement","value":"MinMaxResult::OneElement(T)","parent":{"krate":0,"index":1922},"children":[],"decl_id":null,"docs":" Iterator with one element, so the minimum and maximum are the same\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1929},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/minmax.rs","byte_start":160876,"byte_end":160882,"line_start":14,"line_end":14,"column_start":5,"column_end":11},"name":"MinMax","qualname":"::minmax::MinMaxResult::MinMax","value":"MinMaxResult::MinMax(T, T)","parent":{"krate":0,"index":1922},"children":[],"decl_id":null,"docs":" More than one element in the iterator, the first element is not larger\n than the second\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1922},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/minmax.rs","byte_start":160616,"byte_end":160628,"line_start":5,"line_end":5,"column_start":10,"column_end":22},"name":"MinMaxResult","qualname":"::minmax::MinMaxResult","value":"MinMaxResult::{NoElements, OneElement, MinMax}","parent":null,"children":[{"krate":0,"index":1924},{"krate":0,"index":1926},{"krate":0,"index":1929}],"decl_id":null,"docs":" `MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for\n more detail.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/minmax.rs","byte_start":160607,"byte_end":160890,"line_start":5,"line_end":15,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":907},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/minmax.rs","byte_start":161700,"byte_end":161711,"line_start":38,"line_end":38,"column_start":12,"column_end":23},"name":"into_option","qualname":"<MinMaxResult<T>>::into_option","value":"fn (self) -> Option<(T, T)>","parent":null,"children":[],"decl_id":null,"docs":" `into_option` creates an `Option` of type `(T, T)`. The returned `Option`\n has variant `None` if and only if the `MinMaxResult` has variant\n `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`.\n If the `MinMaxResult` has variant `OneElement(x)`, performing this\n operation will make one clone of `x`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1945},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/multipeek_impl.rs","byte_start":164511,"byte_end":164520,"line_start":10,"line_end":10,"column_start":12,"column_end":21},"name":"MultiPeek","qualname":"::multipeek_impl::MultiPeek","value":"MultiPeek {  }","parent":null,"children":[{"krate":0,"index":1947},{"krate":0,"index":1948},{"krate":0,"index":1949}],"decl_id":null,"docs":" See [`multipeek()`](../fn.multipeek.html) for more information.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":918},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/multipeek_impl.rs","byte_start":164746,"byte_end":164755,"line_start":20,"line_end":20,"column_start":8,"column_end":17},"name":"multipeek","qualname":"::multipeek_impl::multipeek","value":"fn <I> (iterable: I) -> MultiPeek<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that allows the user to peek at multiple `.next()`\n values without advancing the base iterator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":922},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/multipeek_impl.rs","byte_start":165037,"byte_end":165047,"line_start":34,"line_end":34,"column_start":12,"column_end":22},"name":"reset_peek","qualname":"<MultiPeek<I>>::reset_peek","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the peeking “cursor”\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":925},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/multipeek_impl.rs","byte_start":165311,"byte_end":165315,"line_start":43,"line_end":43,"column_start":12,"column_end":16},"name":"peek","qualname":"<MultiPeek<I>>::peek","value":"fn (&mut self) -> Option<&I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Works exactly like `.next()` with the only difference that it doesn't\n advance itself. `.peek()` can be called multiple times, to peek\n further ahead.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1956},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/pad_tail.rs","byte_start":167114,"byte_end":167122,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"name":"PadUsing","qualname":"::pad_tail::PadUsing","value":"PadUsing {  }","parent":null,"children":[{"krate":0,"index":1959},{"krate":0,"index":1960},{"krate":0,"index":1961},{"krate":0,"index":1962}],"decl_id":null,"docs":" An iterator adaptor that pads a sequence to a minimum length by filling\n missing elements using a closure.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/pad_tail.rs","byte_start":167029,"byte_end":167102,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":960},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/peeking_take_while.rs","byte_start":169320,"byte_end":169331,"line_start":15,"line_end":15,"column_start":11,"column_end":22},"name":"PeekingNext","qualname":"::peeking_take_while::PeekingNext","value":"PeekingNext: Iterator","parent":null,"children":[{"krate":0,"index":961}],"decl_id":null,"docs":" An iterator that allows peeking at an element before deciding to accept it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":961},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/peeking_take_while.rs","byte_start":169515,"byte_end":169527,"line_start":19,"line_end":19,"column_start":8,"column_end":20},"name":"peeking_next","qualname":"::peeking_take_while::PeekingNext::peeking_next","value":"fn <F> (&mut self, accept: F) -> Option<Self::Item>","parent":{"krate":0,"index":960},"children":[],"decl_id":null,"docs":" Pass a reference to the next iterator element to the closure `accept`;\n if `accept` returns true, return it as the next element,\n else None.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":975},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/peeking_take_while.rs","byte_start":171046,"byte_end":171062,"line_start":80,"line_end":80,"column_start":12,"column_end":28},"name":"PeekingTakeWhile","qualname":"::peeking_take_while::PeekingTakeWhile","value":"PeekingTakeWhile {  }","parent":null,"children":[{"krate":0,"index":979},{"krate":0,"index":980}],"decl_id":null,"docs":" An iterator adaptor that takes items while a closure returns `true`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/peeking_take_while.rs","byte_start":170961,"byte_end":171034,"line_start":79,"line_end":79,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2012},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/process_results_impl.rs","byte_start":173548,"byte_end":173562,"line_start":9,"line_end":9,"column_start":12,"column_end":26},"name":"ProcessResults","qualname":"::process_results_impl::ProcessResults","value":"ProcessResults {  }","parent":null,"children":[{"krate":0,"index":2016},{"krate":0,"index":2017}],"decl_id":null,"docs":" An iterator that produces only the `T` values as long as the\n inner iterator produces `Ok(T)`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/process_results_impl.rs","byte_start":173446,"byte_end":173519,"line_start":7,"line_end":7,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":1001},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/process_results_impl.rs","byte_start":175467,"byte_end":175482,"line_start":71,"line_end":71,"column_start":8,"column_end":23},"name":"process_results","qualname":"::process_results_impl::process_results","value":"fn <I, F, T, E, R> (iterable: I, processor: F) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" “Lift” a function of the values of an iterator so that it can process\n an iterator of `Result` values instead.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2023},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/put_back_n_impl.rs","byte_start":176006,"byte_end":176014,"line_start":8,"line_end":8,"column_start":12,"column_end":20},"name":"PutBackN","qualname":"::put_back_n_impl::PutBackN","value":"PutBackN {  }","parent":null,"children":[{"krate":0,"index":2025},{"krate":0,"index":2026}],"decl_id":null,"docs":" An iterator adaptor that allows putting multiple\n items in front of the iterator.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1010},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/put_back_n_impl.rs","byte_start":176217,"byte_end":176227,"line_start":17,"line_end":17,"column_start":8,"column_end":18},"name":"put_back_n","qualname":"::put_back_n_impl::put_back_n","value":"fn <I> (iterable: I) -> PutBackN<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator where you can put back multiple values to the front\n of the iteration.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/put_back_n_impl.rs","byte_start":176810,"byte_end":176818,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"put_back","qualname":"<PutBackN<I>>::put_back","value":"fn (&mut self, x: I::Item) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Puts x in front of the iterator.\n The values are yielded in order of the most recently put back\n values first.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/put_back_n_impl.rs","byte_start":176789,"byte_end":176798,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2033},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/rciter_impl.rs","byte_start":177449,"byte_end":177455,"line_start":8,"line_end":8,"column_start":12,"column_end":18},"name":"RcIter","qualname":"::rciter_impl::RcIter","value":"RcIter { rciter }","parent":null,"children":[{"krate":0,"index":2035}],"decl_id":null,"docs":" A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2035},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/rciter_impl.rs","byte_start":177497,"byte_end":177503,"line_start":10,"line_end":10,"column_start":9,"column_end":15},"name":"rciter","qualname":"::rciter_impl::RcIter::rciter","value":"std::rc::Rc<std::cell::RefCell<I>>","parent":{"krate":0,"index":2033},"children":[],"decl_id":null,"docs":" The boxed iterator.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1024},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/rciter_impl.rs","byte_start":178772,"byte_end":178778,"line_start":47,"line_end":47,"column_start":8,"column_end":14},"name":"rciter","qualname":"::rciter_impl::rciter","value":"fn <I> (iterable: I) -> RcIter<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator inside a `Rc<RefCell<_>>` wrapper.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2039},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/repeatn.rs","byte_start":180285,"byte_end":180292,"line_start":7,"line_end":7,"column_start":12,"column_end":19},"name":"RepeatN","qualname":"::repeatn::RepeatN","value":"RepeatN {  }","parent":null,"children":[{"krate":0,"index":2041},{"krate":0,"index":2042}],"decl_id":null,"docs":" An iterator that produces *n* repetitions of an element.","sig":null,"attributes":[{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/repeatn.rs","byte_start":180191,"byte_end":180256,"line_start":5,"line_end":5,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":1045},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/repeatn.rs","byte_start":180409,"byte_end":180417,"line_start":13,"line_end":13,"column_start":8,"column_end":16},"name":"repeat_n","qualname":"::repeatn::repeat_n","value":"fn <A> (element: A, n: usize) -> RepeatN<A>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that produces `n` repetitions of `element`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1074},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/sources.rs","byte_start":184115,"byte_end":184125,"line_start":10,"line_end":10,"column_start":12,"column_end":22},"name":"RepeatCall","qualname":"::sources::RepeatCall","value":"RepeatCall {  }","parent":null,"children":[{"krate":0,"index":1076}],"decl_id":null,"docs":" See [`repeat_call`](../fn.repeat_call.html) for more information.\n","sig":null,"attributes":[{"value":"deprecated(note = \"Use std repeat_with() instead\", since = \"0.8\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/sources.rs","byte_start":184039,"byte_end":184103,"line_start":9,"line_end":9,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":1079},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/sources.rs","byte_start":184882,"byte_end":184893,"line_start":42,"line_end":42,"column_start":8,"column_end":19},"name":"repeat_call","qualname":"::sources::repeat_call","value":"fn <F, A> (function: F) -> RepeatCall<F>","parent":null,"children":[],"decl_id":null,"docs":" An iterator source that produces elements indefinitely by calling\n a given closure.","sig":null,"attributes":[{"value":"deprecated(note = \"Use std repeat_with() instead\", since = \"0.8\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/sources.rs","byte_start":184810,"byte_end":184874,"line_start":41,"line_end":41,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":1088},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/sources.rs","byte_start":186500,"byte_end":186506,"line_start":100,"line_end":100,"column_start":8,"column_end":14},"name":"unfold","qualname":"::sources::unfold","value":"fn <A, St, F> (initial_state: St, f: F) -> Unfold<St, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new unfold source with the specified closure as the \"iterator\n function\" and an initial state to eventually pass to the closure","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2048},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/sources.rs","byte_start":186932,"byte_end":186938,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"name":"Unfold","qualname":"::sources::Unfold","value":"Unfold { state }","parent":null,"children":[{"krate":0,"index":2051},{"krate":0,"index":2052}],"decl_id":null,"docs":" See [`unfold`](../fn.unfold.html) for more information.\n","sig":null,"attributes":[{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/sources.rs","byte_start":186855,"byte_end":186920,"line_start":117,"line_end":117,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":2052},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/sources.rs","byte_start":187046,"byte_end":187051,"line_start":121,"line_end":121,"column_start":9,"column_end":14},"name":"state","qualname":"::sources::Unfold::state","value":"St","parent":{"krate":0,"index":2048},"children":[],"decl_id":null,"docs":" Internal state that will be passed to the closure on the next iteration\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2057},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/sources.rs","byte_start":187711,"byte_end":187718,"line_start":148,"line_end":148,"column_start":12,"column_end":19},"name":"Iterate","qualname":"::sources::Iterate","value":"Iterate {  }","parent":null,"children":[{"krate":0,"index":2060},{"krate":0,"index":2061}],"decl_id":null,"docs":" An iterator that infinitely applies function to value and yields results.","sig":null,"attributes":[{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/sources.rs","byte_start":187634,"byte_end":187699,"line_start":147,"line_end":147,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":1111},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/sources.rs","byte_start":188475,"byte_end":188482,"line_start":183,"line_end":183,"column_start":8,"column_end":15},"name":"iterate","qualname":"::sources::iterate","value":"fn <St, F> (initial_value: St, f: F) -> Iterate<St, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that infinitely applies function to value and yields results.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2077},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tee.rs","byte_start":189203,"byte_end":189206,"line_start":21,"line_end":21,"column_start":12,"column_end":15},"name":"Tee","qualname":"::tee::Tee","value":"Tee {  }","parent":null,"children":[{"krate":0,"index":2079},{"krate":0,"index":2080}],"decl_id":null,"docs":" One half of an iterator pair where both return the same elements.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tee.rs","byte_start":189101,"byte_end":189174,"line_start":19,"line_end":19,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2084},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":191052,"byte_end":191063,"line_start":10,"line_end":10,"column_start":12,"column_end":23},"name":"TupleBuffer","qualname":"::tuple_impl::TupleBuffer","value":"TupleBuffer {  }","parent":null,"children":[{"krate":0,"index":2086},{"krate":0,"index":2087}],"decl_id":null,"docs":" An iterator over a incomplete tuple.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1141},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":192289,"byte_end":192295,"line_start":65,"line_end":65,"column_start":12,"column_end":18},"name":"Tuples","qualname":"::tuple_impl::Tuples","value":"Tuples {  }","parent":null,"children":[{"krate":0,"index":1144},{"krate":0,"index":1145}],"decl_id":null,"docs":" An iterator that groups the items in tuples of a specific size.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":192204,"byte_end":192277,"line_start":64,"line_end":64,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1157},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":193334,"byte_end":193345,"line_start":109,"line_end":109,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Tuples<I, T>>::into_buffer","value":"fn (self) -> TupleBuffer<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a buffer with the produced items that was not enough to be grouped in a tuple.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2091},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":193709,"byte_end":193721,"line_start":121,"line_end":121,"column_start":12,"column_end":24},"name":"TupleWindows","qualname":"::tuple_impl::TupleWindows","value":"TupleWindows {  }","parent":null,"children":[{"krate":0,"index":2094},{"krate":0,"index":2095}],"decl_id":null,"docs":" An iterator over all contiguous windows that produces tuples of a specific size.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":193607,"byte_end":193680,"line_start":119,"line_end":119,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":1167},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":195018,"byte_end":195030,"line_start":174,"line_end":174,"column_start":11,"column_end":23},"name":"TupleCollect","qualname":"::tuple_impl::TupleCollect","value":"TupleCollect: Sized","parent":null,"children":[{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":1170},{"krate":0,"index":1172},{"krate":0,"index":1174},{"krate":0,"index":1175}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1168},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":195049,"byte_end":195053,"line_start":175,"line_end":175,"column_start":10,"column_end":14},"name":"Item","qualname":"::tuple_impl::TupleCollect::Item","value":"type Item;","parent":{"krate":0,"index":1167},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1169},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":195064,"byte_end":195070,"line_start":176,"line_end":176,"column_start":10,"column_end":16},"name":"Buffer","qualname":"::tuple_impl::TupleCollect::Buffer","value":"type Buffer: Default + AsRef<[Option<Self::Item>]> + AsMut<[Option<Self::Item>]>;","parent":{"krate":0,"index":1167},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1170},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":195149,"byte_end":195166,"line_start":178,"line_end":178,"column_start":8,"column_end":25},"name":"collect_from_iter","qualname":"::tuple_impl::TupleCollect::collect_from_iter","value":"fn <I> (iter: I, buf: &mut Self::Buffer) -> Option<Self>","parent":{"krate":0,"index":1167},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1172},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":195277,"byte_end":195301,"line_start":181,"line_end":181,"column_start":8,"column_end":32},"name":"collect_from_iter_no_buf","qualname":"::tuple_impl::TupleCollect::collect_from_iter_no_buf","value":"fn <I> (iter: I) -> Option<Self>","parent":{"krate":0,"index":1167},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1174},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":195388,"byte_end":195397,"line_start":184,"line_end":184,"column_start":8,"column_end":17},"name":"num_items","qualname":"::tuple_impl::TupleCollect::num_items","value":"fn () -> usize","parent":{"krate":0,"index":1167},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1175},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":195418,"byte_end":195433,"line_start":186,"line_end":186,"column_start":8,"column_end":23},"name":"left_shift_push","qualname":"::tuple_impl::TupleCollect::left_shift_push","value":"fn (&mut self, item: Self::Item) -> ()","parent":{"krate":0,"index":1167},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2148},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/unique_impl.rs","byte_start":198160,"byte_end":198168,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"name":"UniqueBy","qualname":"::unique_impl::UniqueBy","value":"UniqueBy {  }","parent":null,"children":[{"krate":0,"index":2152},{"krate":0,"index":2153},{"krate":0,"index":2154}],"decl_id":null,"docs":" An iterator adapter to filter out duplicate elements.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/unique_impl.rs","byte_start":198075,"byte_end":198148,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2161},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/unique_impl.rs","byte_start":200790,"byte_end":200796,"line_start":112,"line_end":112,"column_start":12,"column_end":18},"name":"Unique","qualname":"::unique_impl::Unique","value":"Unique {  }","parent":null,"children":[{"krate":0,"index":2163}],"decl_id":null,"docs":" An iterator adapter to filter out duplicate elements.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/unique_impl.rs","byte_start":200705,"byte_end":200778,"line_start":111,"line_end":111,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1218},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/with_position.rs","byte_start":201597,"byte_end":201609,"line_start":9,"line_end":9,"column_start":12,"column_end":24},"name":"WithPosition","qualname":"::with_position::WithPosition","value":"WithPosition {  }","parent":null,"children":[{"krate":0,"index":1220},{"krate":0,"index":1221}],"decl_id":null,"docs":" An iterator adaptor that wraps each element in an [`Position`](../enum.Position.html).","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/with_position.rs","byte_start":201512,"byte_end":201585,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2170},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/with_position.rs","byte_start":202226,"byte_end":202231,"line_start":33,"line_end":33,"column_start":5,"column_end":10},"name":"First","qualname":"::with_position::Position::First","value":"Position::First(T)","parent":{"krate":0,"index":2168},"children":[],"decl_id":null,"docs":" This is the first element.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2173},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/with_position.rs","byte_start":202296,"byte_end":202302,"line_start":35,"line_end":35,"column_start":5,"column_end":11},"name":"Middle","qualname":"::with_position::Position::Middle","value":"Position::Middle(T)","parent":{"krate":0,"index":2168},"children":[],"decl_id":null,"docs":" This is neither the first nor the last element.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2176},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/with_position.rs","byte_start":202345,"byte_end":202349,"line_start":37,"line_end":37,"column_start":5,"column_end":9},"name":"Last","qualname":"::with_position::Position::Last","value":"Position::Last(T)","parent":{"krate":0,"index":2168},"children":[],"decl_id":null,"docs":" This is the last element.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2179},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/with_position.rs","byte_start":202392,"byte_end":202396,"line_start":39,"line_end":39,"column_start":5,"column_end":9},"name":"Only","qualname":"::with_position::Position::Only","value":"Position::Only(T)","parent":{"krate":0,"index":2168},"children":[],"decl_id":null,"docs":" This is the only element.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2168},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/with_position.rs","byte_start":202173,"byte_end":202181,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"Position","qualname":"::with_position::Position","value":"Position::{First, Middle, Last, Only}","parent":null,"children":[{"krate":0,"index":2170},{"krate":0,"index":2173},{"krate":0,"index":2176},{"krate":0,"index":2179}],"decl_id":null,"docs":" A value yielded by `WithPosition`.\n Indicates the position of this element in the iterator results.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/with_position.rs","byte_start":202164,"byte_end":202402,"line_start":31,"line_end":40,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1226},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/with_position.rs","byte_start":202469,"byte_end":202479,"line_start":44,"line_end":44,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Position<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the inner value.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2194},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/zip_eq_impl.rs","byte_start":204285,"byte_end":204290,"line_start":8,"line_end":8,"column_start":12,"column_end":17},"name":"ZipEq","qualname":"::zip_eq_impl::ZipEq","value":"ZipEq {  }","parent":null,"children":[{"krate":0,"index":2197},{"krate":0,"index":2198}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/zip_eq_impl.rs","byte_start":204200,"byte_end":204273,"line_start":7,"line_end":7,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":1236},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/zip_eq_impl.rs","byte_start":204665,"byte_end":204671,"line_start":27,"line_end":27,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::zip_eq_impl::zip_eq","value":"fn <I, J> (i: I, j: J) -> ZipEq<I::IntoIter, J::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `i` and `j` in lock step.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2207},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/zip_longest.rs","byte_start":206096,"byte_end":206106,"line_start":17,"line_end":17,"column_start":12,"column_end":22},"name":"ZipLongest","qualname":"::zip_longest::ZipLongest","value":"ZipLongest {  }","parent":null,"children":[{"krate":0,"index":2210},{"krate":0,"index":2211}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/zip_longest.rs","byte_start":206011,"byte_end":206084,"line_start":16,"line_end":16,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2220},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/ziptuple.rs","byte_start":208130,"byte_end":208133,"line_start":6,"line_end":6,"column_start":12,"column_end":15},"name":"Zip","qualname":"::ziptuple::Zip","value":"Zip {  }","parent":null,"children":[{"krate":0,"index":2222}],"decl_id":null,"docs":" See [`multizip`](../fn.multizip.html) for more information.\n","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/ziptuple.rs","byte_start":208045,"byte_end":208118,"line_start":5,"line_end":5,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":1274},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/ziptuple.rs","byte_start":209297,"byte_end":209305,"line_start":41,"line_end":41,"column_start":8,"column_end":16},"name":"multizip","qualname":"::ziptuple::multizip","value":"fn <T, U> (t: U) -> Zip<T>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1280},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":9397,"byte_end":9406,"line_start":331,"line_end":331,"column_start":11,"column_end":20},"name":"Itertools","qualname":"::Itertools","value":"Itertools: Iterator","parent":null,"children":[{"krate":0,"index":1281},{"krate":0,"index":1283},{"krate":0,"index":1285},{"krate":0,"index":1286},{"krate":0,"index":1288},{"krate":0,"index":1290},{"krate":0,"index":1293},{"krate":0,"index":1296},{"krate":0,"index":1297},{"krate":0,"index":1299},{"krate":0,"index":1301},{"krate":0,"index":1302},{"krate":0,"index":1303},{"krate":0,"index":1305},{"krate":0,"index":1310},{"krate":0,"index":1312},{"krate":0,"index":1315},{"krate":0,"index":1318},{"krate":0,"index":1319},{"krate":0,"index":1321},{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1328},{"krate":0,"index":1331},{"krate":0,"index":1333},{"krate":0,"index":1335},{"krate":0,"index":1337},{"krate":0,"index":1339},{"krate":0,"index":1340},{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1345},{"krate":0,"index":1347},{"krate":0,"index":1349},{"krate":0,"index":1351},{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1358},{"krate":0,"index":1359},{"krate":0,"index":1360},{"krate":0,"index":1364},{"krate":0,"index":1365},{"krate":0,"index":1366},{"krate":0,"index":1368},{"krate":0,"index":1373},{"krate":0,"index":1377},{"krate":0,"index":1380},{"krate":0,"index":1392},{"krate":0,"index":1395},{"krate":0,"index":1396},{"krate":0,"index":1398},{"krate":0,"index":1401},{"krate":0,"index":1407},{"krate":0,"index":1410},{"krate":0,"index":1413},{"krate":0,"index":1417}],"decl_id":null,"docs":" An [`Iterator`] blanket implementation that provides extra adaptors and\n methods.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1281},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":9805,"byte_end":9815,"line_start":346,"line_end":346,"column_start":8,"column_end":18},"name":"interleave","qualname":"::Itertools::interleave","value":"fn <J> (self, other: J) -> Interleave<Self, J::IntoIter>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Alternate elements from two iterators until both have run out.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1283},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":10338,"byte_end":10357,"line_start":364,"line_end":364,"column_start":8,"column_end":27},"name":"interleave_shortest","qualname":"::Itertools::interleave_shortest","value":"fn <J> (self, other: J) -> InterleaveShortest<Self, J::IntoIter>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Alternate elements from two iterators until at least one of them has run\n out.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1285},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":10936,"byte_end":10947,"line_start":383,"line_end":383,"column_start":8,"column_end":19},"name":"intersperse","qualname":"::Itertools::intersperse","value":"fn (self, element: Self::Item) -> Intersperse<Self>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" An iterator adaptor to insert a particular value\n between each element of the adapted iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1286},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":12190,"byte_end":12201,"line_start":417,"line_end":417,"column_start":8,"column_end":19},"name":"zip_longest","qualname":"::Itertools::zip_longest","value":"fn <J> (self, other: J) -> ZipLongest<Self, J::IntoIter>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Create an iterator which iterates over both this and the specified\n iterator simultaneously, yielding pairs of two optional elements.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":12173,"byte_end":12182,"line_start":416,"line_end":416,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1288},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":12639,"byte_end":12645,"line_start":430,"line_end":430,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::Itertools::zip_eq","value":"fn <J> (self, other: J) -> ZipEq<Self, J::IntoIter>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Create an iterator which iterates over both this and the specified\n iterator simultaneously, yielding pairs of elements.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":12622,"byte_end":12631,"line_start":429,"line_end":429,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1290},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":13561,"byte_end":13569,"line_start":460,"line_end":460,"column_start":8,"column_end":16},"name":"batching","qualname":"::Itertools::batching","value":"fn <B, F> (self, f: F) -> Batching<Self, F>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" A “meta iterator adaptor”. Its closure receives a reference to the\n iterator and may pick off as many elements as it likes, to produce the\n next iterator element.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1293},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":15200,"byte_end":15208,"line_start":501,"line_end":501,"column_start":8,"column_end":16},"name":"group_by","qualname":"::Itertools::group_by","value":"fn <K, F> (self, key: F) -> GroupBy<K, Self, F>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return an *iterable* that can group iterator elements.\n Consecutive elements that map to the same key (“runs”), are assigned\n to the same group.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":15165,"byte_end":15192,"line_start":500,"line_end":500,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1296},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":16487,"byte_end":16493,"line_start":537,"line_end":537,"column_start":8,"column_end":14},"name":"chunks","qualname":"::Itertools::chunks","value":"fn (self, size: usize) -> IntoChunks<Self>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return an *iterable* that can chunk the iterator.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":16452,"byte_end":16479,"line_start":536,"line_end":536,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1297},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":17849,"byte_end":17862,"line_start":575,"line_end":575,"column_start":8,"column_end":21},"name":"tuple_windows","qualname":"::Itertools::tuple_windows","value":"fn <T> (self) -> TupleWindows<Self, T>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return an iterator over all contiguous windows producing tuples of\n a specific size (up to 4).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1299},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":19171,"byte_end":19177,"line_start":614,"line_end":614,"column_start":8,"column_end":14},"name":"tuples","qualname":"::Itertools::tuples","value":"fn <T> (self) -> Tuples<Self, T>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return an iterator that groups the items in tuples of a specific size\n (up to 4).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1301},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":19986,"byte_end":19989,"line_start":639,"line_end":639,"column_start":8,"column_end":11},"name":"tee","qualname":"::Itertools::tee","value":"fn (self) -> (Tee<Self>, Tee<Self>)","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Split into an iterator pair that both yield all elements from\n the original iterator.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":19951,"byte_end":19978,"line_start":638,"line_end":638,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1302},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":20718,"byte_end":20722,"line_start":664,"line_end":664,"column_start":8,"column_end":12},"name":"step","qualname":"::Itertools::step","value":"fn (self, n: usize) -> Step<Self>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that steps `n` elements in the base iterator\n for each iteration.","sig":null,"attributes":[{"value":"deprecated(note = \"Use std .step_by() instead\", since = \"0.8\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":20624,"byte_end":20685,"line_start":662,"line_end":662,"column_start":5,"column_end":66}},{"value":"allow(deprecated)","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":20690,"byte_end":20710,"line_start":663,"line_end":663,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1303},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":21030,"byte_end":21038,"line_start":677,"line_end":677,"column_start":8,"column_end":16},"name":"map_into","qualname":"::Itertools::map_into","value":"fn <R> (self) -> MapInto<Self, R>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Convert each item of the iterator using the `Into` trait.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1305},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":21591,"byte_end":21602,"line_start":695,"line_end":695,"column_start":8,"column_end":19},"name":"map_results","qualname":"::Itertools::map_results","value":"fn <F, T, U, E> (self, f: F) -> MapResults<Self, F>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that applies the provided closure\n to every `Result::Ok` value. `Result::Err` values are\n unchanged.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1310},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":22265,"byte_end":22270,"line_start":716,"line_end":716,"column_start":8,"column_end":13},"name":"merge","qualname":"::Itertools::merge","value":"fn <J> (self, other: J) -> Merge<Self, J::IntoIter>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merges the two base iterators in\n ascending order.  If both base iterators are sorted (ascending), the\n result is sorted.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":23047,"byte_end":23055,"line_start":740,"line_end":740,"column_start":8,"column_end":16},"name":"merge_by","qualname":"::Itertools::merge_by","value":"fn <J, F> (self, other: J, is_first: F) -> MergeBy<Self, J::IntoIter, F>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merges the two base iterators in order.\n This is much like `.merge()` but allows for a custom ordering.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1315},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":24645,"byte_end":24658,"line_start":780,"line_end":780,"column_start":8,"column_end":21},"name":"merge_join_by","qualname":"::Itertools::merge_join_by","value":"fn <J, F> (self, other: J, cmp_fn: F) -> MergeJoinBy<Self, J::IntoIter, F>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Create an iterator that merges items from both this and the specified\n iterator in ascending order.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":24628,"byte_end":24637,"line_start":779,"line_end":779,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1318},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":25492,"byte_end":25498,"line_start":806,"line_end":806,"column_start":8,"column_end":14},"name":"kmerge","qualname":"::Itertools::kmerge","value":"fn (self) -> KMerge<<Self::Item as IntoIterator>::IntoIter>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that flattens an iterator of iterators by\n merging them in ascending order.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":25457,"byte_end":25484,"line_start":805,"line_end":805,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1319},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":26503,"byte_end":26512,"line_start":835,"line_end":835,"column_start":8,"column_end":17},"name":"kmerge_by","qualname":"::Itertools::kmerge_by","value":"fn <F> (self, first: F) -> KMergeBy<<Self::Item as IntoIterator>::IntoIter, F>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that flattens an iterator of iterators by\n merging them according to the given closure.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":26468,"byte_end":26495,"line_start":834,"line_end":834,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1321},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":27264,"byte_end":27281,"line_start":856,"line_end":856,"column_start":8,"column_end":25},"name":"cartesian_product","qualname":"::Itertools::cartesian_product","value":"fn <J> (self, other: J) -> Product<Self, J::IntoIter>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the cartesian product of\n the element sets of two iterators `self` and `J`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1323},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":28736,"byte_end":28759,"line_start":891,"line_end":891,"column_start":8,"column_end":31},"name":"multi_cartesian_product","qualname":"::Itertools::multi_cartesian_product","value":"fn (self) -> MultiProduct<<Self::Item as IntoIterator>::IntoIter>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the cartesian product of\n all subiterators returned by meta-iterator `self`.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":28701,"byte_end":28728,"line_start":890,"line_end":890,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1324},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":30252,"byte_end":30260,"line_start":928,"line_end":928,"column_start":8,"column_end":16},"name":"coalesce","qualname":"::Itertools::coalesce","value":"fn <F> (self, f: F) -> Coalesce<Self, F>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that uses the passed-in closure to\n optionally merge together consecutive elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1326},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":30974,"byte_end":30979,"line_start":950,"line_end":950,"column_start":8,"column_end":13},"name":"dedup","qualname":"::Itertools::dedup","value":"fn (self) -> Dedup<Self>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Remove duplicates from sections of consecutive identical elements.\n If the iterator is sorted, all elements will be unique.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1327},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":31670,"byte_end":31676,"line_start":972,"line_end":972,"column_start":8,"column_end":14},"name":"unique","qualname":"::Itertools::unique","value":"fn (self) -> Unique<Self>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters out elements that have\n already been produced once during the iteration. Duplicates\n are detected using hash and equality.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":31635,"byte_end":31662,"line_start":971,"line_end":971,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1328},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":32433,"byte_end":32442,"line_start":994,"line_end":994,"column_start":8,"column_end":17},"name":"unique_by","qualname":"::Itertools::unique_by","value":"fn <V, F> (self, f: F) -> UniqueBy<Self, V, F>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters out elements that have\n already been produced once during the iteration.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":32398,"byte_end":32425,"line_start":993,"line_end":993,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1331},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":33179,"byte_end":33197,"line_start":1014,"line_end":1014,"column_start":8,"column_end":26},"name":"peeking_take_while","qualname":"::Itertools::peeking_take_while","value":"fn <F> (&mut self, accept: F) -> PeekingTakeWhile<Self, F>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that borrows from this iterator and\n takes items while the closure `accept` returns `true`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1333},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":34143,"byte_end":34157,"line_start":1039,"line_end":1039,"column_start":8,"column_end":22},"name":"take_while_ref","qualname":"::Itertools::take_while_ref","value":"fn <F> (&mut self, accept: F) -> TakeWhileRef<Self, F>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that borrows from a `Clone`-able iterator\n to only pick off elements while the predicate `accept` returns `true`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1335},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":34823,"byte_end":34833,"line_start":1060,"line_end":1060,"column_start":8,"column_end":18},"name":"while_some","qualname":"::Itertools::while_some","value":"fn <A> (self) -> WhileSome<Self>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters `Option<A>` iterator elements\n and produces `A`. Stops on the first `None` encountered.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1337},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":36264,"byte_end":36282,"line_start":1099,"line_end":1099,"column_start":8,"column_end":26},"name":"tuple_combinations","qualname":"::Itertools::tuple_combinations","value":"fn <T> (self) -> TupleCombinations<Self, T>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the combinations of the\n elements from an iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1339},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":37088,"byte_end":37100,"line_start":1125,"line_end":1125,"column_start":8,"column_end":20},"name":"combinations","qualname":"::Itertools::combinations","value":"fn (self, n: usize) -> Combinations<Self>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the `n`-length combinations of\n the elements from an iterator.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":37053,"byte_end":37080,"line_start":1124,"line_end":1124,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":37930,"byte_end":37939,"line_start":1149,"line_end":1149,"column_start":8,"column_end":17},"name":"pad_using","qualname":"::Itertools::pad_using","value":"fn <F> (self, min: usize, f: F) -> PadUsing<Self, F>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that pads the sequence to a minimum length of\n `min` by filling missing elements using a closure `f`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1342},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":38864,"byte_end":38877,"line_start":1175,"line_end":1175,"column_start":8,"column_end":21},"name":"with_position","qualname":"::Itertools::with_position","value":"fn (self) -> WithPosition<Self>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that wraps each element in a `Position` to\n ease special-case handling of the first or last elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1343},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":39556,"byte_end":39565,"line_start":1194,"line_end":1194,"column_start":8,"column_end":17},"name":"positions","qualname":"::Itertools::positions","value":"fn <P> (self, predicate: P) -> Positions<Self, P>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that yields the indices of all elements\n satisfying a predicate, counted from the start of the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1345},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":40118,"byte_end":40124,"line_start":1211,"line_end":1211,"column_start":8,"column_end":14},"name":"update","qualname":"::Itertools::update","value":"fn <F> (self, updater: F) -> Update<Self, F>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that applies a mutating function\n to each element before yielding it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1347},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":40749,"byte_end":40759,"line_start":1232,"line_end":1232,"column_start":8,"column_end":18},"name":"next_tuple","qualname":"::Itertools::next_tuple","value":"fn <T> (&mut self) -> Option<T>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Advances the iterator and returns the next items grouped in a tuple of\n a specific size (up to 4).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1349},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":41501,"byte_end":41514,"line_start":1257,"line_end":1257,"column_start":8,"column_end":21},"name":"collect_tuple","qualname":"::Itertools::collect_tuple","value":"fn <T> (mut self) -> Option<T>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Collects all items from the iterator into a tuple of a specific size\n (up to 4).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1351},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":42195,"byte_end":42208,"line_start":1281,"line_end":1281,"column_start":8,"column_end":21},"name":"find_position","qualname":"::Itertools::find_position","value":"fn <P> (&mut self, mut pred: P) -> Option<(usize, Self::Item)>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Find the position and value of the first element satisfying a predicate.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1353},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":43057,"byte_end":43066,"line_start":1310,"line_end":1310,"column_start":8,"column_end":17},"name":"all_equal","qualname":"::Itertools::all_equal","value":"fn (&mut self) -> bool","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Check whether all elements compare equal.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1354},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":43746,"byte_end":43754,"line_start":1331,"line_end":1331,"column_start":8,"column_end":16},"name":"dropping","qualname":"::Itertools::dropping","value":"fn (mut self, n: usize) -> Self","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Consume the first `n` elements from the iterator eagerly,\n and return the same iterator again.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1355},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":44447,"byte_end":44460,"line_start":1355,"line_end":1355,"column_start":8,"column_end":21},"name":"dropping_back","qualname":"::Itertools::dropping_back","value":"fn (mut self, n: usize) -> Self","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Consume the last `n` elements from the iterator eagerly,\n and return the same iterator again.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1356},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":45246,"byte_end":45253,"line_start":1383,"line_end":1383,"column_start":8,"column_end":15},"name":"foreach","qualname":"::Itertools::foreach","value":"fn <F> (self, f: F) -> ()","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Run the closure `f` eagerly on each element of the iterator.","sig":null,"attributes":[{"value":"deprecated(note = \"Use .for_each() instead\", since = \"0.8\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":45180,"byte_end":45238,"line_start":1382,"line_end":1382,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":45884,"byte_end":45890,"line_start":1403,"line_end":1403,"column_start":8,"column_end":14},"name":"concat","qualname":"::Itertools::concat","value":"fn (self) -> Self::Item","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Combine all an iterator's elements into one element by using `Extend`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1359},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":46218,"byte_end":46229,"line_start":1413,"line_end":1413,"column_start":8,"column_end":19},"name":"collect_vec","qualname":"::Itertools::collect_vec","value":"fn (self) -> Vec<Self::Item>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" `.collect_vec()` is simply a type specialization of `.collect()`,\n for convenience.\n","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":46183,"byte_end":46210,"line_start":1412,"line_end":1412,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1360},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":46846,"byte_end":46854,"line_start":1435,"line_end":1435,"column_start":8,"column_end":16},"name":"set_from","qualname":"::Itertools::set_from","value":"fn <'a, A, J> (&mut self, from: J) -> usize","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Assign to each reference in `self` from the `from` iterator,\n stopping at the shortest of the two iterators.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":46829,"byte_end":46838,"line_start":1434,"line_end":1434,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1364},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":47598,"byte_end":47602,"line_start":1461,"line_end":1461,"column_start":8,"column_end":12},"name":"join","qualname":"::Itertools::join","value":"fn (&mut self, sep: &str) -> String","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Combine all iterator elements into one String, seperated by `sep`.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":47563,"byte_end":47590,"line_start":1460,"line_end":1460,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1365},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":48730,"byte_end":48736,"line_start":1495,"line_end":1495,"column_start":8,"column_end":14},"name":"format","qualname":"::Itertools::format","value":"fn (self, sep: &str) -> Format<Self>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Format all iterator elements, separated by `sep`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":50214,"byte_end":50225,"line_start":1533,"line_end":1533,"column_start":8,"column_end":19},"name":"format_with","qualname":"::Itertools::format_with","value":"fn <F> (self, sep: &str, format: F) -> FormatWith<Self, F>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Format all iterator elements, separated by `sep`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1368},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":51946,"byte_end":51958,"line_start":1582,"line_end":1582,"column_start":8,"column_end":20},"name":"fold_results","qualname":"::Itertools::fold_results","value":"fn <A, E, B, F> (&mut self, mut start: B, mut f: F) -> Result<B, E>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Fold `Result` values from an iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1373},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":53115,"byte_end":53127,"line_start":1614,"line_end":1614,"column_start":8,"column_end":20},"name":"fold_options","qualname":"::Itertools::fold_options","value":"fn <A, B, F> (&mut self, mut start: B, mut f: F) -> Option<B>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Fold `Option` values from an iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1377},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":53927,"byte_end":53932,"line_start":1639,"line_end":1639,"column_start":8,"column_end":13},"name":"fold1","qualname":"::Itertools::fold1","value":"fn <F> (mut self, f: F) -> Option<Self::Item>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Accumulator of the elements in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1380},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":55996,"byte_end":56006,"line_start":1695,"line_end":1695,"column_start":8,"column_end":18},"name":"tree_fold1","qualname":"::Itertools::tree_fold1","value":"fn <F> (mut self, mut f: F) -> Option<Self::Item>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Accumulate the elements in the iterator in a tree-like manner.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1392},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":59565,"byte_end":59575,"line_start":1794,"line_end":1794,"column_start":8,"column_end":18},"name":"fold_while","qualname":"::Itertools::fold_while","value":"fn <B, F> (&mut self, init: B, mut f: F) -> FoldWhile<B>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" An iterator method that applies a function, producing a single, final value.","sig":null,"attributes":[{"value":"deprecated(note = \"Use .try_fold() instead\", since = \"0.8\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":59499,"byte_end":59557,"line_start":1793,"line_end":1793,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1395},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":60690,"byte_end":60696,"line_start":1826,"line_end":1826,"column_start":8,"column_end":14},"name":"sorted","qualname":"::Itertools::sorted","value":"fn (self) -> VecIntoIter<Self::Item>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":60655,"byte_end":60682,"line_start":1825,"line_end":1825,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1396},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":61918,"byte_end":61927,"line_start":1861,"line_end":1861,"column_start":8,"column_end":17},"name":"sorted_by","qualname":"::Itertools::sorted_by","value":"fn <F> (self, cmp: F) -> VecIntoIter<Self::Item>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":61883,"byte_end":61910,"line_start":1860,"line_end":1860,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":63088,"byte_end":63101,"line_start":1894,"line_end":1894,"column_start":8,"column_end":21},"name":"sorted_by_key","qualname":"::Itertools::sorted_by_key","value":"fn <K, F> (self, f: F) -> VecIntoIter<Self::Item>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":63053,"byte_end":63080,"line_start":1893,"line_end":1893,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1401},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":64054,"byte_end":64067,"line_start":1925,"line_end":1925,"column_start":8,"column_end":21},"name":"partition_map","qualname":"::Itertools::partition_map","value":"fn <A, B, F, L, R> (self, predicate: F) -> (A, B)","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Collect all iterator elements into one of two\n partitions. Unlike `Iterator::partition`, each partition may\n have a distinct type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1407},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":65177,"byte_end":65191,"line_start":1959,"line_end":1959,"column_start":8,"column_end":22},"name":"into_group_map","qualname":"::Itertools::into_group_map","value":"fn <K, V> (self) -> HashMap<K, Vec<V>>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return a `HashMap` of keys mapped to `Vec`s of values. Keys and values\n are taken from `(Key, Value)` tuple pairs yielded by the input iterator.\n \n ```\n use itertools::Itertools;\n \n let data = vec![(0, 10), (2, 12), (3, 13), (0, 20), (3, 33), (2, 42)];\n let lookup = data.into_iter().into_group_map();\n \n assert_eq!(lookup[&0], vec![10, 20]);\n assert_eq!(lookup.get(&1), None);\n assert_eq!(lookup[&2], vec![12, 42]);\n assert_eq!(lookup[&3], vec![13, 33]);\n ```\n","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":65142,"byte_end":65169,"line_start":1958,"line_end":1958,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1410},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":66654,"byte_end":66660,"line_start":2001,"line_end":2001,"column_start":8,"column_end":14},"name":"minmax","qualname":"::Itertools::minmax","value":"fn (self) -> MinMaxResult<Self::Item>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return the minimum and maximum elements in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1413},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":67356,"byte_end":67369,"line_start":2018,"line_end":2018,"column_start":8,"column_end":21},"name":"minmax_by_key","qualname":"::Itertools::minmax_by_key","value":"fn <K, F> (self, key: F) -> MinMaxResult<Self::Item>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return the minimum and maximum element of an iterator, as determined by\n the specified function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1417},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":68007,"byte_end":68016,"line_start":2032,"line_end":2032,"column_start":8,"column_end":17},"name":"minmax_by","qualname":"::Itertools::minmax_by","value":"fn <F> (self, mut compare: F) -> MinMaxResult<Self::Item>","parent":{"krate":0,"index":1280},"children":[],"decl_id":null,"docs":" Return the minimum and maximum element of an iterator, as determined by\n the specified comparison function.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1423},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":68745,"byte_end":68750,"line_start":2056,"line_end":2056,"column_start":8,"column_end":13},"name":"equal","qualname":"::equal","value":"fn <I, J> (a: I, b: J) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if both iterables produce equal sequences\n (elements pairwise equal and sequences of the same length),\n `false` otherwise.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1426},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":69570,"byte_end":69582,"line_start":2084,"line_end":2084,"column_start":8,"column_end":20},"name":"assert_equal","qualname":"::assert_equal","value":"fn <I, J> (a: I, b: J) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Assert that two iterables produce equal sequences, with the same\n semantics as *equal(a, b)*.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1429},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":70809,"byte_end":70818,"line_start":2126,"line_end":2126,"column_start":8,"column_end":17},"name":"partition","qualname":"::partition","value":"fn <'a, A, I, F> (iter: I, mut pred: F) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Partition a sequence using predicate `pred` so that elements\n that map to `true` are placed before elements which map to `false`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2395},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":71754,"byte_end":71762,"line_start":2156,"line_end":2156,"column_start":5,"column_end":13},"name":"Continue","qualname":"::FoldWhile::Continue","value":"FoldWhile::Continue(T)","parent":{"krate":0,"index":2393},"children":[],"decl_id":null,"docs":" Continue folding with this value\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2398},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":71823,"byte_end":71827,"line_start":2158,"line_end":2158,"column_start":5,"column_end":9},"name":"Done","qualname":"::FoldWhile::Done","value":"FoldWhile::Done(T)","parent":{"krate":0,"index":2393},"children":[],"decl_id":null,"docs":" Fold is complete and will return this value\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2393},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":71694,"byte_end":71703,"line_start":2154,"line_end":2154,"column_start":10,"column_end":19},"name":"FoldWhile","qualname":"::FoldWhile","value":"FoldWhile::{Continue, Done}","parent":null,"children":[{"krate":0,"index":2395},{"krate":0,"index":2398}],"decl_id":null,"docs":" An enum used for controlling the execution of `.fold_while()`.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":71685,"byte_end":71833,"line_start":2154,"line_end":2159,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":71685,"byte_end":71833,"line_start":2154,"line_end":2159,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1436},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":71919,"byte_end":71929,"line_start":2163,"line_end":2163,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<FoldWhile<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value in the continue or done.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1437},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":72122,"byte_end":72129,"line_start":2170,"line_end":2170,"column_start":12,"column_end":19},"name":"is_done","qualname":"<FoldWhile<T>>::is_done","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if `self` is `Done`, false if it is `Continue`.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/multi_product.rs","byte_start":107034,"byte_end":107046,"line_start":50,"line_end":50,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":115},{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/multi_product.rs","byte_start":109152,"byte_end":109168,"line_start":117,"line_end":117,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/multi_product.rs","byte_start":109816,"byte_end":109828,"line_start":146,"line_end":146,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":131},{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":74326,"byte_end":74336,"line_start":63,"line_end":63,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":75747,"byte_end":75765,"line_start":119,"line_end":119,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":78015,"byte_end":78022,"line_start":204,"line_end":204,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":78641,"byte_end":78648,"line_start":229,"line_end":229,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":80495,"byte_end":80502,"line_start":302,"line_end":302,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":82935,"byte_end":82943,"line_start":377,"line_end":377,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1525}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":83171,"byte_end":83179,"line_start":386,"line_end":386,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":84344,"byte_end":84348,"line_start":434,"line_end":434,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":84967,"byte_end":84971,"line_start":462,"line_end":462,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":85187,"byte_end":85196,"line_start":477,"line_end":477,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":85428,"byte_end":85437,"line_start":488,"line_end":488,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":86940,"byte_end":86945,"line_start":538,"line_end":538,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":87182,"byte_end":87187,"line_start":549,"line_end":549,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1536}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":87993,"byte_end":87998,"line_start":581,"line_end":581,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":88836,"byte_end":88843,"line_start":612,"line_end":612,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1537}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":89368,"byte_end":89375,"line_start":634,"line_end":634,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":89643,"byte_end":89650,"line_start":646,"line_end":646,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":90110,"byte_end":90122,"line_start":670,"line_end":670,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":284},{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":91356,"byte_end":91364,"line_start":712,"line_end":712,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":91533,"byte_end":91541,"line_start":721,"line_end":721,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1548}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":91928,"byte_end":91936,"line_start":741,"line_end":741,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":92569,"byte_end":92574,"line_start":766,"line_end":766,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":92938,"byte_end":92943,"line_start":787,"line_end":787,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1549}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":93076,"byte_end":93081,"line_start":794,"line_end":794,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":323},{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":94290,"byte_end":94302,"line_start":838,"line_end":838,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1550}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":94639,"byte_end":94651,"line_start":851,"line_end":851,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":95750,"byte_end":95759,"line_start":893,"line_end":893,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":97068,"byte_end":97085,"line_start":944,"line_end":944,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":365},{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":97337,"byte_end":97354,"line_start":960,"line_end":960,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":97472,"byte_end":97489,"line_start":966,"line_end":966,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":372},{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":100249,"byte_end":100256,"line_start":1058,"line_end":1058,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":393},{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":100771,"byte_end":100778,"line_start":1081,"line_end":1081,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":101017,"byte_end":101024,"line_start":1092,"line_end":1092,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":101667,"byte_end":101677,"line_start":1118,"line_end":1118,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":102968,"byte_end":102977,"line_start":1169,"line_end":1169,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":103466,"byte_end":103475,"line_start":1191,"line_end":1191,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":452}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":104313,"byte_end":104319,"line_start":1223,"line_end":1223,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":105185,"byte_end":105191,"line_start":1259,"line_end":1259,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":105297,"byte_end":105303,"line_start":1265,"line_end":1265,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/either_or_both.rs","byte_start":112165,"byte_end":112177,"line_start":14,"line_end":14,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/cons_tuples_impl.rs","byte_start":121395,"byte_end":121405,"line_start":52,"line_end":52,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/combinations.rs","byte_start":122230,"byte_end":122242,"line_start":16,"line_end":16,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1839}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/combinations.rs","byte_start":122905,"byte_end":122917,"line_start":47,"line_end":47,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":574},{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/combinations.rs","byte_start":124596,"byte_end":124606,"line_start":109,"line_end":109,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/combinations.rs","byte_start":125542,"byte_end":125552,"line_start":155,"line_end":155,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":584},{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/format.rs","byte_start":129797,"byte_end":129807,"line_start":49,"line_end":49,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":631}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/format.rs","byte_start":130556,"byte_end":130562,"line_start":73,"line_end":73,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":132524,"byte_end":132525,"line_start":10,"line_end":10,"column_start":46,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":660},{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":132830,"byte_end":132840,"line_start":29,"line_end":29,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":663}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":133036,"byte_end":133046,"line_start":40,"line_end":40,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":667},{"krate":0,"index":668}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":134088,"byte_end":134098,"line_start":77,"line_end":77,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":140876,"byte_end":140886,"line_start":263,"line_end":263,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":702}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":142698,"byte_end":142705,"line_start":320,"line_end":320,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":717},{"krate":0,"index":718}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":143912,"byte_end":143918,"line_start":366,"line_end":366,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":738},{"krate":0,"index":739}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":144828,"byte_end":144833,"line_start":402,"line_end":402,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":754}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":145004,"byte_end":145009,"line_start":411,"line_end":411,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":760},{"krate":0,"index":761}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":146841,"byte_end":146851,"line_start":475,"line_end":475,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":770},{"krate":0,"index":771}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":147837,"byte_end":147843,"line_start":517,"line_end":517,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":785},{"krate":0,"index":786}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":148602,"byte_end":148607,"line_start":550,"line_end":550,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":797}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":148766,"byte_end":148771,"line_start":559,"line_end":559,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":801},{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/intersperse.rs","byte_start":149869,"byte_end":149880,"line_start":35,"line_end":35,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":812}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/kmerge_impl.rs","byte_start":151219,"byte_end":151227,"line_start":33,"line_end":33,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":821},{"krate":0,"index":823},{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/kmerge_impl.rs","byte_start":152123,"byte_end":152131,"line_start":64,"line_end":64,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":827}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/kmerge_impl.rs","byte_start":153785,"byte_end":153791,"line_start":121,"line_end":121,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1919}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/kmerge_impl.rs","byte_start":154714,"byte_end":154720,"line_start":153,"line_end":153,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":845}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/kmerge_impl.rs","byte_start":154889,"byte_end":154895,"line_start":162,"line_end":162,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/kmerge_impl.rs","byte_start":155998,"byte_end":156006,"line_start":204,"line_end":204,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1920}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/kmerge_impl.rs","byte_start":156923,"byte_end":156931,"line_start":230,"line_end":230,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/merge_join.rs","byte_start":158787,"byte_end":158798,"line_start":34,"line_end":34,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1921}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/merge_join.rs","byte_start":159023,"byte_end":159034,"line_start":43,"line_end":43,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":903}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/minmax.rs","byte_start":160907,"byte_end":160919,"line_start":17,"line_end":17,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":907}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/multipeek_impl.rs","byte_start":164950,"byte_end":164959,"line_start":30,"line_end":30,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":922}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/multipeek_impl.rs","byte_start":165112,"byte_end":165121,"line_start":39,"line_end":39,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":925}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/multipeek_impl.rs","byte_start":165765,"byte_end":165774,"line_start":61,"line_end":61,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":928}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/multipeek_impl.rs","byte_start":166241,"byte_end":166250,"line_start":80,"line_end":80,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":934}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/multipeek_impl.rs","byte_start":166674,"byte_end":166683,"line_start":100,"line_end":100,"column_start":31,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/pad_tail.rs","byte_start":167508,"byte_end":167516,"line_start":32,"line_end":32,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/pad_tail.rs","byte_start":168279,"byte_end":168287,"line_start":63,"line_end":63,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":952}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/pad_tail.rs","byte_start":168744,"byte_end":168752,"line_start":80,"line_end":80,"column_start":34,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/peeking_take_while.rs","byte_start":169648,"byte_end":169656,"line_start":23,"line_end":23,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":965}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/peeking_take_while.rs","byte_start":169976,"byte_end":169983,"line_start":38,"line_end":38,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":969}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/peeking_take_while.rs","byte_start":170400,"byte_end":170408,"line_start":57,"line_end":57,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":973}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/peeking_take_while.rs","byte_start":171363,"byte_end":171379,"line_start":97,"line_end":97,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":988},{"krate":0,"index":989},{"krate":0,"index":990}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/process_results_impl.rs","byte_start":173660,"byte_end":173674,"line_start":14,"line_end":14,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":998},{"krate":0,"index":999},{"krate":0,"index":1000}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/put_back_n_impl.rs","byte_start":176400,"byte_end":176408,"line_start":26,"line_end":26,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1014}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/put_back_n_impl.rs","byte_start":176910,"byte_end":176918,"line_start":47,"line_end":47,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1017},{"krate":0,"index":1018},{"krate":0,"index":1019}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/rciter_impl.rs","byte_start":178934,"byte_end":178940,"line_start":53,"line_end":53,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1028}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/rciter_impl.rs","byte_start":179075,"byte_end":179081,"line_start":60,"line_end":60,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1032},{"krate":0,"index":1033},{"krate":0,"index":1034}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/rciter_impl.rs","byte_start":179640,"byte_end":179646,"line_start":79,"line_end":79,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1037}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/repeatn.rs","byte_start":180621,"byte_end":180628,"line_start":23,"line_end":23,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1049},{"krate":0,"index":1050},{"krate":0,"index":1051}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/repeatn.rs","byte_start":181018,"byte_end":181025,"line_start":43,"line_end":43,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1054}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/repeatn.rs","byte_start":181175,"byte_end":181182,"line_start":52,"line_end":52,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/sources.rs","byte_start":184167,"byte_end":184177,"line_start":14,"line_end":14,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2046}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/sources.rs","byte_start":185016,"byte_end":185026,"line_start":48,"line_end":48,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1087}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/sources.rs","byte_start":186695,"byte_end":186701,"line_start":109,"line_end":109,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2047}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/sources.rs","byte_start":187088,"byte_end":187094,"line_start":124,"line_end":124,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1099},{"krate":0,"index":1100},{"krate":0,"index":1101}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/sources.rs","byte_start":187783,"byte_end":187790,"line_start":153,"line_end":153,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2066}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/sources.rs","byte_start":187893,"byte_end":187900,"line_start":159,"line_end":159,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1110}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tee.rs","byte_start":189614,"byte_end":189617,"line_start":37,"line_end":37,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1125}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tee.rs","byte_start":190714,"byte_end":190717,"line_start":75,"line_end":75,"column_start":31,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":191142,"byte_end":191153,"line_start":17,"line_end":17,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1132}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":191326,"byte_end":191337,"line_start":28,"line_end":28,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1135},{"krate":0,"index":1136},{"krate":0,"index":1137}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":192003,"byte_end":192014,"line_start":56,"line_end":56,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":192663,"byte_end":192669,"line_start":84,"line_end":84,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1152},{"krate":0,"index":1153}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":192881,"byte_end":192887,"line_start":95,"line_end":95,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1157}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":194494,"byte_end":194506,"line_start":153,"line_end":153,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1165},{"krate":0,"index":1166}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/unique_impl.rs","byte_start":198310,"byte_end":198318,"line_start":19,"line_end":19,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2160}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/unique_impl.rs","byte_start":199116,"byte_end":199124,"line_start":50,"line_end":50,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1201},{"krate":0,"index":1202}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/unique_impl.rs","byte_start":199841,"byte_end":199847,"line_start":79,"line_end":79,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1206},{"krate":0,"index":1207},{"krate":0,"index":1208},{"krate":0,"index":1209}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/unique_impl.rs","byte_start":200874,"byte_end":200880,"line_start":116,"line_end":116,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2167}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/with_position.rs","byte_start":202412,"byte_end":202420,"line_start":42,"line_end":42,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1226}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/with_position.rs","byte_start":202699,"byte_end":202711,"line_start":54,"line_end":54,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1229},{"krate":0,"index":1230},{"krate":0,"index":1231}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/with_position.rs","byte_start":203947,"byte_end":203959,"line_start":88,"line_end":88,"column_start":31,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/zip_eq_impl.rs","byte_start":204877,"byte_end":204882,"line_start":37,"line_end":37,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1242},{"krate":0,"index":1243},{"krate":0,"index":1244}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/zip_eq_impl.rs","byte_start":205460,"byte_end":205465,"line_start":57,"line_end":57,"column_start":34,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/zip_longest.rs","byte_start":206387,"byte_end":206397,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1262},{"krate":0,"index":1263},{"krate":0,"index":1264}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/zip_longest.rs","byte_start":207019,"byte_end":207029,"line_start":55,"line_end":55,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1268}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/zip_longest.rs","byte_start":207850,"byte_end":207860,"line_start":75,"line_end":75,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":68323,"byte_end":68324,"line_start":2043,"line_end":2043,"column_start":31,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":71843,"byte_end":71852,"line_start":2161,"line_end":2161,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1436},{"krate":0,"index":1437}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":4228,"byte_end":4232,"line_start":154,"line_end":154,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":493}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/multi_product.rs","byte_start":107034,"byte_end":107046,"line_start":50,"line_end":50,"column_start":9,"column_end":21},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1438},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/multi_product.rs","byte_start":109152,"byte_end":109168,"line_start":117,"line_end":117,"column_start":9,"column_end":25},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1445},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/multi_product.rs","byte_start":109816,"byte_end":109828,"line_start":146,"line_end":146,"column_start":22,"column_end":34},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1438},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":74326,"byte_end":74336,"line_start":63,"line_end":63,"column_start":25,"column_end":35},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1463},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":75747,"byte_end":75765,"line_start":119,"line_end":119,"column_start":25,"column_end":43},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1477},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":78015,"byte_end":78022,"line_start":204,"line_end":204,"column_start":9,"column_end":16},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":78641,"byte_end":78648,"line_start":229,"line_end":229,"column_start":22,"column_end":29},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1491},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":80495,"byte_end":80502,"line_start":302,"line_end":302,"column_start":25,"column_end":32},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1501},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":82935,"byte_end":82943,"line_start":377,"line_end":377,"column_start":27,"column_end":35},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1516},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":83171,"byte_end":83179,"line_start":386,"line_end":386,"column_start":28,"column_end":36},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1516},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":84344,"byte_end":84348,"line_start":434,"line_end":434,"column_start":22,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1526},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":84967,"byte_end":84971,"line_start":462,"line_end":462,"column_start":31,"column_end":35},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1526},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":85187,"byte_end":85196,"line_start":477,"line_end":477,"column_start":22,"column_end":31},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":219},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":85428,"byte_end":85437,"line_start":488,"line_end":488,"column_start":12,"column_end":21},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":219},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":86940,"byte_end":86945,"line_start":538,"line_end":538,"column_start":22,"column_end":27},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":235},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":87182,"byte_end":87187,"line_start":549,"line_end":549,"column_start":27,"column_end":32},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":235},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":87993,"byte_end":87998,"line_start":581,"line_end":581,"column_start":25,"column_end":30},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":235},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":88836,"byte_end":88843,"line_start":612,"line_end":612,"column_start":30,"column_end":37},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":256},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":89368,"byte_end":89375,"line_start":634,"line_end":634,"column_start":25,"column_end":32},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":256},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":89643,"byte_end":89650,"line_start":646,"line_end":646,"column_start":28,"column_end":35},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":256},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":90110,"byte_end":90122,"line_start":670,"line_end":670,"column_start":9,"column_end":21},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1538},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":91356,"byte_end":91364,"line_start":712,"line_end":712,"column_start":36,"column_end":44},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":287},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":91533,"byte_end":91541,"line_start":721,"line_end":721,"column_start":27,"column_end":35},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":287},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":91928,"byte_end":91936,"line_start":741,"line_end":741,"column_start":25,"column_end":33},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":287},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":92569,"byte_end":92574,"line_start":766,"line_end":766,"column_start":26,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":308},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":92938,"byte_end":92943,"line_start":787,"line_end":787,"column_start":24,"column_end":29},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":308},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":93076,"byte_end":93081,"line_start":794,"line_end":794,"column_start":22,"column_end":27},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":308},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":94290,"byte_end":94302,"line_start":838,"line_end":838,"column_start":31,"column_end":43},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":328},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":94639,"byte_end":94651,"line_start":851,"line_end":851,"column_start":29,"column_end":41},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":328},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":95750,"byte_end":95759,"line_start":893,"line_end":893,"column_start":25,"column_end":34},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1551},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":96629,"byte_end":96634,"line_start":927,"line_end":927,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1442},"to":{"krate":0,"index":356}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":97068,"byte_end":97085,"line_start":944,"line_end":944,"column_start":25,"column_end":42},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1560},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":97337,"byte_end":97354,"line_start":960,"line_end":960,"column_start":21,"column_end":38},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1570},"to":{"krate":2,"index":2096}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":97472,"byte_end":97489,"line_start":966,"line_end":966,"column_start":32,"column_end":49},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1570},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":100249,"byte_end":100256,"line_start":1058,"line_end":1058,"column_start":25,"column_end":32},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":379},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":100771,"byte_end":100778,"line_start":1081,"line_end":1081,"column_start":36,"column_end":43},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":379},"to":{"krate":2,"index":3360}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":101017,"byte_end":101024,"line_start":1092,"line_end":1092,"column_start":34,"column_end":41},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":379},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":101667,"byte_end":101677,"line_start":1118,"line_end":1118,"column_start":34,"column_end":44},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":406},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":102968,"byte_end":102977,"line_start":1169,"line_end":1169,"column_start":25,"column_end":34},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":434},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":103466,"byte_end":103475,"line_start":1191,"line_end":1191,"column_start":36,"column_end":45},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":434},"to":{"krate":2,"index":3360}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":104313,"byte_end":104319,"line_start":1223,"line_end":1223,"column_start":25,"column_end":31},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":453},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":105185,"byte_end":105191,"line_start":1259,"line_end":1259,"column_start":34,"column_end":40},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":453},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/adaptors/mod.rs","byte_start":105297,"byte_end":105303,"line_start":1265,"line_end":1265,"column_start":36,"column_end":42},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":453},"to":{"krate":2,"index":3360}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/either_or_both.rs","byte_start":112165,"byte_end":112177,"line_start":14,"line_end":14,"column_start":12,"column_end":24},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1651},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/cons_tuples_impl.rs","byte_start":121395,"byte_end":121405,"line_start":52,"line_end":52,"column_start":22,"column_end":32},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1831},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/combinations.rs","byte_start":122230,"byte_end":122242,"line_start":16,"line_end":16,"column_start":24,"column_end":36},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":562},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/combinations.rs","byte_start":122905,"byte_end":122917,"line_start":47,"line_end":47,"column_start":22,"column_end":34},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":562},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/combinations.rs","byte_start":124596,"byte_end":124606,"line_start":109,"line_end":109,"column_start":9,"column_end":19},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1840},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/combinations.rs","byte_start":125542,"byte_end":125552,"line_start":155,"line_end":155,"column_start":26,"column_end":36},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1840},"to":{"krate":2,"index":1677}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/format.rs","byte_start":129797,"byte_end":129807,"line_start":49,"line_end":49,"column_start":33,"column_end":43},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":614},"to":{"krate":2,"index":6826}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/format.rs","byte_start":130556,"byte_end":130562,"line_start":73,"line_end":73,"column_start":13,"column_end":19},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1848},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":132524,"byte_end":132525,"line_start":10,"line_end":10,"column_start":46,"column_end":47},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":659},"to":{"krate":0,"index":651}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":132830,"byte_end":132840,"line_start":29,"line_end":29,"column_start":6,"column_end":16},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1895},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":133036,"byte_end":133046,"line_start":40,"line_end":40,"column_start":32,"column_end":42},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1895},"to":{"krate":0,"index":651}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":134088,"byte_end":134098,"line_start":77,"line_end":77,"column_start":15,"column_end":25},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":669},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":140876,"byte_end":140886,"line_start":263,"line_end":263,"column_start":15,"column_end":25},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":669},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":142698,"byte_end":142705,"line_start":320,"line_end":320,"column_start":15,"column_end":22},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":703},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":143912,"byte_end":143918,"line_start":366,"line_end":366,"column_start":32,"column_end":38},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":727},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":144828,"byte_end":144833,"line_start":402,"line_end":402,"column_start":28,"column_end":33},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":741},"to":{"krate":2,"index":1623}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":145004,"byte_end":145009,"line_start":411,"line_end":411,"column_start":32,"column_end":37},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":741},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":146841,"byte_end":146851,"line_start":475,"line_end":475,"column_start":9,"column_end":19},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":764},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":147837,"byte_end":147843,"line_start":517,"line_end":517,"column_start":26,"column_end":32},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":778},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":148602,"byte_end":148607,"line_start":550,"line_end":550,"column_start":22,"column_end":27},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":788},"to":{"krate":2,"index":1623}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/groupbylazy.rs","byte_start":148766,"byte_end":148771,"line_start":559,"line_end":559,"column_start":26,"column_end":31},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":788},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/intersperse.rs","byte_start":149869,"byte_end":149880,"line_start":35,"line_end":35,"column_start":22,"column_end":33},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1901},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/kmerge_impl.rs","byte_start":151219,"byte_end":151227,"line_start":33,"line_end":33,"column_start":9,"column_end":17},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1912},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/kmerge_impl.rs","byte_start":152123,"byte_end":152131,"line_start":64,"line_end":64,"column_start":19,"column_end":27},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1912},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/kmerge_impl.rs","byte_start":153785,"byte_end":153791,"line_start":121,"line_end":121,"column_start":24,"column_end":30},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":834},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/kmerge_impl.rs","byte_start":154714,"byte_end":154720,"line_start":153,"line_end":153,"column_start":19,"column_end":25},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":834},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/kmerge_impl.rs","byte_start":154889,"byte_end":154895,"line_start":162,"line_end":162,"column_start":22,"column_end":28},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":834},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/kmerge_impl.rs","byte_start":155998,"byte_end":156006,"line_start":204,"line_end":204,"column_start":27,"column_end":35},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":853},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/kmerge_impl.rs","byte_start":156923,"byte_end":156931,"line_start":230,"line_end":230,"column_start":25,"column_end":33},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":853},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/merge_join.rs","byte_start":158787,"byte_end":158798,"line_start":34,"line_end":34,"column_start":30,"column_end":41},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":886},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/merge_join.rs","byte_start":159023,"byte_end":159034,"line_start":43,"line_end":43,"column_start":28,"column_end":39},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":886},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/minmax.rs","byte_start":160907,"byte_end":160919,"line_start":17,"line_end":17,"column_start":16,"column_end":28},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1922},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/multipeek_impl.rs","byte_start":164950,"byte_end":164959,"line_start":30,"line_end":30,"column_start":9,"column_end":18},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1945},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/multipeek_impl.rs","byte_start":165112,"byte_end":165121,"line_start":39,"line_end":39,"column_start":19,"column_end":28},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1945},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/multipeek_impl.rs","byte_start":165765,"byte_end":165774,"line_start":61,"line_end":61,"column_start":25,"column_end":34},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1945},"to":{"krate":0,"index":960}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/multipeek_impl.rs","byte_start":166241,"byte_end":166250,"line_start":80,"line_end":80,"column_start":22,"column_end":31},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1945},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/multipeek_impl.rs","byte_start":166674,"byte_end":166683,"line_start":100,"line_end":100,"column_start":31,"column_end":40},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1945},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/pad_tail.rs","byte_start":167508,"byte_end":167516,"line_start":32,"line_end":32,"column_start":25,"column_end":33},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1956},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/pad_tail.rs","byte_start":168279,"byte_end":168287,"line_start":63,"line_end":63,"column_start":36,"column_end":44},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1956},"to":{"krate":2,"index":3360}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/pad_tail.rs","byte_start":168744,"byte_end":168752,"line_start":80,"line_end":80,"column_start":34,"column_end":42},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1956},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/peeking_take_while.rs","byte_start":169334,"byte_end":169342,"line_start":15,"line_end":15,"column_start":25,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":3202},"to":{"krate":0,"index":960}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/peeking_take_while.rs","byte_start":169648,"byte_end":169656,"line_start":23,"line_end":23,"column_start":25,"column_end":33},"kind":{"Impl":{"id":82}},"from":{"krate":2,"index":32752},"to":{"krate":0,"index":960}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/peeking_take_while.rs","byte_start":169976,"byte_end":169983,"line_start":38,"line_end":38,"column_start":25,"column_end":32},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1491},"to":{"krate":0,"index":960}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/peeking_take_while.rs","byte_start":170400,"byte_end":170408,"line_start":57,"line_end":57,"column_start":25,"column_end":33},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":2023},"to":{"krate":0,"index":960}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/peeking_take_while.rs","byte_start":171363,"byte_end":171379,"line_start":97,"line_end":97,"column_start":29,"column_end":45},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":975},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/process_results_impl.rs","byte_start":173660,"byte_end":173674,"line_start":14,"line_end":14,"column_start":32,"column_end":46},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2012},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/put_back_n_impl.rs","byte_start":176400,"byte_end":176408,"line_start":26,"line_end":26,"column_start":19,"column_end":27},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":2023},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/put_back_n_impl.rs","byte_start":176910,"byte_end":176918,"line_start":47,"line_end":47,"column_start":32,"column_end":40},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2023},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/rciter_impl.rs","byte_start":178934,"byte_end":178940,"line_start":53,"line_end":53,"column_start":19,"column_end":25},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2033},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/rciter_impl.rs","byte_start":179075,"byte_end":179081,"line_start":60,"line_end":60,"column_start":25,"column_end":31},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2033},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/rciter_impl.rs","byte_start":179640,"byte_end":179646,"line_start":79,"line_end":79,"column_start":33,"column_end":39},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":2033},"to":{"krate":2,"index":3360}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/repeatn.rs","byte_start":180621,"byte_end":180628,"line_start":23,"line_end":23,"column_start":22,"column_end":29},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2039},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/repeatn.rs","byte_start":181018,"byte_end":181025,"line_start":43,"line_end":43,"column_start":33,"column_end":40},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2039},"to":{"krate":2,"index":3360}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/repeatn.rs","byte_start":181175,"byte_end":181182,"line_start":52,"line_end":52,"column_start":31,"column_end":38},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2039},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/sources.rs","byte_start":184167,"byte_end":184177,"line_start":14,"line_end":14,"column_start":24,"column_end":34},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1074},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/sources.rs","byte_start":185016,"byte_end":185026,"line_start":48,"line_end":48,"column_start":25,"column_end":35},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1074},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/sources.rs","byte_start":186695,"byte_end":186701,"line_start":109,"line_end":109,"column_start":28,"column_end":34},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2048},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/sources.rs","byte_start":187088,"byte_end":187094,"line_start":124,"line_end":124,"column_start":29,"column_end":35},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2048},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/sources.rs","byte_start":187783,"byte_end":187790,"line_start":153,"line_end":153,"column_start":28,"column_end":35},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2057},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/sources.rs","byte_start":187893,"byte_end":187900,"line_start":159,"line_end":159,"column_start":26,"column_end":33},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":2057},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tee.rs","byte_start":189614,"byte_end":189617,"line_start":37,"line_end":37,"column_start":22,"column_end":25},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":2077},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tee.rs","byte_start":190714,"byte_end":190717,"line_start":75,"line_end":75,"column_start":31,"column_end":34},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2077},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":191142,"byte_end":191153,"line_start":17,"line_end":17,"column_start":9,"column_end":20},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2084},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":191326,"byte_end":191337,"line_start":28,"line_end":28,"column_start":22,"column_end":33},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":2084},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":192003,"byte_end":192014,"line_start":56,"line_end":56,"column_start":31,"column_end":42},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2084},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":192663,"byte_end":192669,"line_start":84,"line_end":84,"column_start":25,"column_end":31},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1141},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":192881,"byte_end":192887,"line_start":95,"line_end":95,"column_start":12,"column_end":18},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1141},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":194494,"byte_end":194506,"line_start":153,"line_end":153,"column_start":25,"column_end":37},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":2091},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/tuple_impl.rs","byte_start":195032,"byte_end":195037,"line_start":174,"line_end":174,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1442},"to":{"krate":0,"index":1167}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/unique_impl.rs","byte_start":198310,"byte_end":198318,"line_start":19,"line_end":19,"column_start":30,"column_end":38},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2148},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/unique_impl.rs","byte_start":199116,"byte_end":199124,"line_start":50,"line_end":50,"column_start":28,"column_end":36},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2148},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/unique_impl.rs","byte_start":199841,"byte_end":199847,"line_start":79,"line_end":79,"column_start":22,"column_end":28},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2161},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/unique_impl.rs","byte_start":200874,"byte_end":200880,"line_start":116,"line_end":116,"column_start":24,"column_end":30},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2161},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/with_position.rs","byte_start":202412,"byte_end":202420,"line_start":42,"line_end":42,"column_start":9,"column_end":17},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2168},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/with_position.rs","byte_start":202699,"byte_end":202711,"line_start":54,"line_end":54,"column_start":32,"column_end":44},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1218},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/with_position.rs","byte_start":203947,"byte_end":203959,"line_start":88,"line_end":88,"column_start":31,"column_end":43},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1218},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/zip_eq_impl.rs","byte_start":204877,"byte_end":204882,"line_start":37,"line_end":37,"column_start":25,"column_end":30},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2194},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/zip_eq_impl.rs","byte_start":205460,"byte_end":205465,"line_start":57,"line_end":57,"column_start":34,"column_end":39},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2194},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/zip_longest.rs","byte_start":206387,"byte_end":206397,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2207},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/zip_longest.rs","byte_start":207019,"byte_end":207029,"line_start":55,"line_end":55,"column_start":36,"column_end":46},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2207},"to":{"krate":2,"index":3360}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/zip_longest.rs","byte_start":207850,"byte_end":207860,"line_start":75,"line_end":75,"column_start":34,"column_end":44},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":2207},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":9409,"byte_end":9417,"line_start":331,"line_end":331,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":3202},"to":{"krate":0,"index":1280}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":68323,"byte_end":68324,"line_start":2043,"line_end":2043,"column_start":31,"column_end":32},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1422},"to":{"krate":0,"index":1280}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.8.0/src/lib.rs","byte_start":71843,"byte_end":71852,"line_start":2161,"line_end":2161,"column_start":9,"column_end":18},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2393},"to":{"krate":4294967295,"index":4294967295}}]}