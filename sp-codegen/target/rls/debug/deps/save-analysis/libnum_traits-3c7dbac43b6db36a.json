{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8","program":"/home/endre/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","num_traits","/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=3c7dbac43b6db36a","-C","extra-filename=-3c7dbac43b6db36a","--out-dir","/home/endre/sp-rust/sp-codegen/target/rls/debug/deps","-L","dependency=/home/endre/sp-rust/sp-codegen/target/rls/debug/deps","--cap-lints","allow","--cfg","has_i128","--error-format=json","--sysroot","/home/endre/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/endre/sp-rust/sp-codegen/target/rls/debug/deps/libnum_traits-3c7dbac43b6db36a.rmeta"},"prelude":{"crate_id":{"name":"num_traits","disambiguator":[8125129488957320226,8714838895180998727]},"crate_root":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src","external_crates":[{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[3916277366462804126,4478459115610208312]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[1713477286964588179,15844277248566971785]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[13012427356130990406,14608520140697239788]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","num":4,"id":{"name":"std","disambiguator":[3103785602532093942,17390144583497853382]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6447241057134257354,1413806012037948949]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4393201617425879462,3310437476178738552]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7079830315103279809,4606718705203350064]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5206394019873543407,10667910451093706265]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[9386824491997906070,17212049238264027415]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16927035401729681780,12437521449932722366]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[11652895559356135055,9563436424588767888]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[16517787911197841201,14116661015581648310]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","num":13,"id":{"name":"backtrace_sys","disambiguator":[5448928475534237502,8623809376237663283]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[9897490559936190142,12325087316115451923]}}],"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":472,"byte_end":16437,"line_start":11,"line_end":470,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":96},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":926,"byte_end":933,"line_start":28,"line_end":28,"column_start":17,"column_end":24},"alias_span":null,"name":"Bounded","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":235},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":974,"byte_end":979,"line_start":30,"line_end":30,"column_start":16,"column_end":21},"alias_span":null,"name":"Float","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2108},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":996,"byte_end":1006,"line_start":31,"line_end":31,"column_start":16,"column_end":26},"alias_span":null,"name":"FloatConst","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":176},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1115,"byte_end":1119,"line_start":33,"line_end":33,"column_start":16,"column_end":20},"alias_span":null,"name":"cast","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":187},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1121,"byte_end":1132,"line_start":33,"line_end":33,"column_start":22,"column_end":33},"alias_span":null,"name":"AsPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":154},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1134,"byte_end":1147,"line_start":33,"line_end":33,"column_start":35,"column_end":48},"alias_span":null,"name":"FromPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":179},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1149,"byte_end":1156,"line_start":33,"line_end":33,"column_start":50,"column_end":57},"alias_span":null,"name":"NumCast","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":129},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1158,"byte_end":1169,"line_start":33,"line_end":33,"column_start":59,"column_end":70},"alias_span":null,"name":"ToPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":323},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1193,"byte_end":1196,"line_start":34,"line_end":34,"column_start":22,"column_end":25},"alias_span":null,"name":"one","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":321},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1198,"byte_end":1202,"line_start":34,"line_end":34,"column_start":27,"column_end":31},"alias_span":null,"name":"zero","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":312},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1204,"byte_end":1207,"line_start":34,"line_end":34,"column_start":33,"column_end":36},"alias_span":null,"name":"One","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":302},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1209,"byte_end":1213,"line_start":34,"line_end":34,"column_start":38,"column_end":42},"alias_span":null,"name":"Zero","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":339},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1229,"byte_end":1236,"line_start":35,"line_end":35,"column_start":14,"column_end":21},"alias_span":null,"name":"PrimInt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":367},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1266,"byte_end":1276,"line_start":37,"line_end":37,"column_start":5,"column_end":15},"alias_span":null,"name":"CheckedAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":374},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1278,"byte_end":1288,"line_start":37,"line_end":37,"column_start":17,"column_end":27},"alias_span":null,"name":"CheckedDiv","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":372},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1290,"byte_end":1300,"line_start":37,"line_end":37,"column_start":29,"column_end":39},"alias_span":null,"name":"CheckedMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":379},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1302,"byte_end":1312,"line_start":37,"line_end":37,"column_start":41,"column_end":51},"alias_span":null,"name":"CheckedNeg","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":376},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1314,"byte_end":1324,"line_start":37,"line_end":37,"column_start":53,"column_end":63},"alias_span":null,"name":"CheckedRem","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":381},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1326,"byte_end":1336,"line_start":37,"line_end":37,"column_start":65,"column_end":75},"alias_span":null,"name":"CheckedShl","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":384},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1338,"byte_end":1348,"line_start":37,"line_end":37,"column_start":77,"column_end":87},"alias_span":null,"name":"CheckedShr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":370},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1350,"byte_end":1360,"line_start":37,"line_end":37,"column_start":89,"column_end":99},"alias_span":null,"name":"CheckedSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":387},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1383,"byte_end":1386,"line_start":39,"line_end":39,"column_start":19,"column_end":22},"alias_span":null,"name":"Inv","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":405},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1411,"byte_end":1417,"line_start":40,"line_end":40,"column_start":24,"column_end":30},"alias_span":null,"name":"MulAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":410},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1419,"byte_end":1431,"line_start":40,"line_end":40,"column_start":32,"column_end":44},"alias_span":null,"name":"MulAddAssign","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":427},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1459,"byte_end":1469,"line_start":41,"line_end":41,"column_start":26,"column_end":36},"alias_span":null,"name":"Saturating","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":440},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1495,"byte_end":1506,"line_start":42,"line_end":42,"column_start":25,"column_end":36},"alias_span":null,"name":"WrappingAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":444},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1508,"byte_end":1519,"line_start":42,"line_end":42,"column_start":38,"column_end":49},"alias_span":null,"name":"WrappingMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":447},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1521,"byte_end":1532,"line_start":42,"line_end":42,"column_start":51,"column_end":62},"alias_span":null,"name":"WrappingShl","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":449},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1534,"byte_end":1545,"line_start":42,"line_end":42,"column_start":64,"column_end":75},"alias_span":null,"name":"WrappingShr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":442},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1547,"byte_end":1558,"line_start":42,"line_end":42,"column_start":77,"column_end":88},"alias_span":null,"name":"WrappingSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":481},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1575,"byte_end":1586,"line_start":43,"line_end":43,"column_start":15,"column_end":26},"alias_span":null,"name":"checked_pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":479},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1588,"byte_end":1591,"line_start":43,"line_end":43,"column_start":28,"column_end":31},"alias_span":null,"name":"pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":472},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1593,"byte_end":1596,"line_start":43,"line_end":43,"column_start":33,"column_end":36},"alias_span":null,"name":"Pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":560},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1614,"byte_end":1617,"line_start":44,"line_end":44,"column_start":16,"column_end":19},"alias_span":null,"name":"abs","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":562},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1619,"byte_end":1626,"line_start":44,"line_end":44,"column_start":21,"column_end":28},"alias_span":null,"name":"abs_sub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":564},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1628,"byte_end":1634,"line_start":44,"line_end":44,"column_start":30,"column_end":36},"alias_span":null,"name":"signum","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":545},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1636,"byte_end":1642,"line_start":44,"line_end":44,"column_start":38,"column_end":44},"alias_span":null,"name":"Signed","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":566},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1644,"byte_end":1652,"line_start":44,"line_end":44,"column_start":46,"column_end":54},"alias_span":null,"name":"Unsigned","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":472,"byte_end":16437,"line_start":11,"line_end":470,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":22},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":37},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":63},{"krate":0,"index":67},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":107},{"krate":0,"index":191},{"krate":0,"index":297},{"krate":0,"index":325},{"krate":0,"index":357},{"krate":0,"index":466},{"krate":0,"index":484},{"krate":0,"index":540},{"krate":0,"index":570},{"krate":0,"index":573},{"krate":0,"index":576},{"krate":0,"index":580},{"krate":0,"index":582},{"krate":0,"index":585},{"krate":0,"index":588},{"krate":0,"index":592},{"krate":0,"index":594},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":600},{"krate":0,"index":602},{"krate":0,"index":605},{"krate":0,"index":4316},{"krate":0,"index":4319},{"krate":0,"index":4322},{"krate":0,"index":4325},{"krate":0,"index":4328},{"krate":0,"index":4331},{"krate":0,"index":4334},{"krate":0,"index":4337},{"krate":0,"index":4340},{"krate":0,"index":4343},{"krate":0,"index":4346},{"krate":0,"index":4349},{"krate":0,"index":606},{"krate":0,"index":4352},{"krate":0,"index":4357},{"krate":0,"index":4359},{"krate":0,"index":4361},{"krate":0,"index":610},{"krate":0,"index":612},{"krate":0,"index":4363},{"krate":0,"index":4371},{"krate":0,"index":613}],"decl_id":null,"docs":" Numeric traits for generic mathematics","sig":null,"attributes":[{"value":"deny(unconditional_recursion)","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":667,"byte_end":700,"line_start":18,"line_end":18,"column_start":1,"column_end":34}},{"value":"no_std","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":701,"byte_end":711,"line_start":19,"line_end":19,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":76},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/bounds.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bounds","qualname":"::bounds","value":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/bounds.rs","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":90},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":615},{"krate":0,"index":618},{"krate":0,"index":621},{"krate":0,"index":624},{"krate":0,"index":627},{"krate":0,"index":630},{"krate":0,"index":633},{"krate":0,"index":636},{"krate":0,"index":639},{"krate":0,"index":642},{"krate":0,"index":645},{"krate":0,"index":648},{"krate":0,"index":100},{"krate":0,"index":651},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":654},{"krate":0,"index":677},{"krate":0,"index":699},{"krate":0,"index":720},{"krate":0,"index":740},{"krate":0,"index":759},{"krate":0,"index":777},{"krate":0,"index":794},{"krate":0,"index":810},{"krate":0,"index":825},{"krate":0,"index":839},{"krate":0,"index":852},{"krate":0,"index":864},{"krate":0,"index":875},{"krate":0,"index":885},{"krate":0,"index":894},{"krate":0,"index":902},{"krate":0,"index":909},{"krate":0,"index":915},{"krate":0,"index":920},{"krate":0,"index":924},{"krate":0,"index":927}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":96},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/bounds.rs","byte_start":17918,"byte_end":17925,"line_start":9,"line_end":9,"column_start":11,"column_end":18},"name":"Bounded","qualname":"::bounds::Bounded","value":"Bounded","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98}],"decl_id":null,"docs":" Numbers which have upper and lower bounds\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/bounds.rs","byte_start":18061,"byte_end":18070,"line_start":12,"line_end":12,"column_start":8,"column_end":17},"name":"min_value","qualname":"::bounds::Bounded::min_value","value":"fn () -> Self","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" returns the smallest finite number this type can represent\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/bounds.rs","byte_start":18155,"byte_end":18164,"line_start":14,"line_end":14,"column_start":8,"column_end":17},"name":"max_value","qualname":"::bounds::Bounded::max_value","value":"fn () -> Self","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" returns the largest finite number this type can represent\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":107},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cast","qualname":"::cast","value":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":116},{"krate":0,"index":122},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":930},{"krate":0,"index":945},{"krate":0,"index":960},{"krate":0,"index":975},{"krate":0,"index":990},{"krate":0,"index":1005},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":1020},{"krate":0,"index":1035},{"krate":0,"index":1050},{"krate":0,"index":1065},{"krate":0,"index":1080},{"krate":0,"index":1095},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":1110},{"krate":0,"index":1161},{"krate":0,"index":154},{"krate":0,"index":169},{"krate":0,"index":1212},{"krate":0,"index":1227},{"krate":0,"index":1242},{"krate":0,"index":1257},{"krate":0,"index":1272},{"krate":0,"index":1287},{"krate":0,"index":1302},{"krate":0,"index":1317},{"krate":0,"index":1332},{"krate":0,"index":1347},{"krate":0,"index":1362},{"krate":0,"index":1377},{"krate":0,"index":1392},{"krate":0,"index":1407},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":179},{"krate":0,"index":182},{"krate":0,"index":1450},{"krate":0,"index":1453},{"krate":0,"index":1456},{"krate":0,"index":1459},{"krate":0,"index":1462},{"krate":0,"index":1465},{"krate":0,"index":1468},{"krate":0,"index":1471},{"krate":0,"index":1474},{"krate":0,"index":1477},{"krate":0,"index":1480},{"krate":0,"index":1483},{"krate":0,"index":1486},{"krate":0,"index":1489},{"krate":0,"index":183},{"krate":0,"index":187},{"krate":0,"index":190},{"krate":0,"index":1492},{"krate":0,"index":1494},{"krate":0,"index":1496},{"krate":0,"index":1498},{"krate":0,"index":1500},{"krate":0,"index":1502},{"krate":0,"index":1504},{"krate":0,"index":1506},{"krate":0,"index":1508},{"krate":0,"index":1510},{"krate":0,"index":1512},{"krate":0,"index":1514},{"krate":0,"index":1516},{"krate":0,"index":1518},{"krate":0,"index":1520},{"krate":0,"index":1522},{"krate":0,"index":1524},{"krate":0,"index":1526},{"krate":0,"index":1528},{"krate":0,"index":1530},{"krate":0,"index":1532},{"krate":0,"index":1534},{"krate":0,"index":1536},{"krate":0,"index":1538},{"krate":0,"index":1540},{"krate":0,"index":1542},{"krate":0,"index":1544},{"krate":0,"index":1546},{"krate":0,"index":1548},{"krate":0,"index":1550},{"krate":0,"index":1552},{"krate":0,"index":1554},{"krate":0,"index":1556},{"krate":0,"index":1558},{"krate":0,"index":1560},{"krate":0,"index":1562},{"krate":0,"index":1564},{"krate":0,"index":1566},{"krate":0,"index":1568},{"krate":0,"index":1570},{"krate":0,"index":1572},{"krate":0,"index":1574},{"krate":0,"index":1576},{"krate":0,"index":1578},{"krate":0,"index":1580},{"krate":0,"index":1582},{"krate":0,"index":1584},{"krate":0,"index":1586},{"krate":0,"index":1588},{"krate":0,"index":1590},{"krate":0,"index":1592},{"krate":0,"index":1594},{"krate":0,"index":1596},{"krate":0,"index":1598},{"krate":0,"index":1600},{"krate":0,"index":1602},{"krate":0,"index":1604},{"krate":0,"index":1606},{"krate":0,"index":1608},{"krate":0,"index":1610},{"krate":0,"index":1612},{"krate":0,"index":1614},{"krate":0,"index":1616},{"krate":0,"index":1618},{"krate":0,"index":1620},{"krate":0,"index":1622},{"krate":0,"index":1624},{"krate":0,"index":1626},{"krate":0,"index":1628},{"krate":0,"index":1630},{"krate":0,"index":1632},{"krate":0,"index":1634},{"krate":0,"index":1636},{"krate":0,"index":1638},{"krate":0,"index":1640},{"krate":0,"index":1642},{"krate":0,"index":1644},{"krate":0,"index":1646},{"krate":0,"index":1648},{"krate":0,"index":1650},{"krate":0,"index":1652},{"krate":0,"index":1654},{"krate":0,"index":1656},{"krate":0,"index":1658},{"krate":0,"index":1660},{"krate":0,"index":1662},{"krate":0,"index":1664},{"krate":0,"index":1666},{"krate":0,"index":1668},{"krate":0,"index":1670},{"krate":0,"index":1672},{"krate":0,"index":1674},{"krate":0,"index":1676},{"krate":0,"index":1678},{"krate":0,"index":1680},{"krate":0,"index":1682},{"krate":0,"index":1684},{"krate":0,"index":1686},{"krate":0,"index":1688},{"krate":0,"index":1690},{"krate":0,"index":1692},{"krate":0,"index":1694},{"krate":0,"index":1696},{"krate":0,"index":1698},{"krate":0,"index":1700},{"krate":0,"index":1702},{"krate":0,"index":1704},{"krate":0,"index":1706},{"krate":0,"index":1708},{"krate":0,"index":1710},{"krate":0,"index":1712},{"krate":0,"index":1714},{"krate":0,"index":1716},{"krate":0,"index":1718},{"krate":0,"index":1720},{"krate":0,"index":1722},{"krate":0,"index":1724},{"krate":0,"index":1726},{"krate":0,"index":1728},{"krate":0,"index":1730},{"krate":0,"index":1732},{"krate":0,"index":1734},{"krate":0,"index":1736},{"krate":0,"index":1738},{"krate":0,"index":1740},{"krate":0,"index":1742},{"krate":0,"index":1744},{"krate":0,"index":1746},{"krate":0,"index":1748},{"krate":0,"index":1750},{"krate":0,"index":1752},{"krate":0,"index":1754},{"krate":0,"index":1756},{"krate":0,"index":1758},{"krate":0,"index":1760},{"krate":0,"index":1762},{"krate":0,"index":1764},{"krate":0,"index":1766},{"krate":0,"index":1768},{"krate":0,"index":1770},{"krate":0,"index":1772},{"krate":0,"index":1774},{"krate":0,"index":1776},{"krate":0,"index":1778},{"krate":0,"index":1780},{"krate":0,"index":1782},{"krate":0,"index":1784},{"krate":0,"index":1786},{"krate":0,"index":1788},{"krate":0,"index":1790},{"krate":0,"index":1792},{"krate":0,"index":1794},{"krate":0,"index":1796},{"krate":0,"index":1798},{"krate":0,"index":1800},{"krate":0,"index":1802},{"krate":0,"index":1804},{"krate":0,"index":1806},{"krate":0,"index":1808},{"krate":0,"index":1810},{"krate":0,"index":1812},{"krate":0,"index":1814},{"krate":0,"index":1816},{"krate":0,"index":1818},{"krate":0,"index":1820},{"krate":0,"index":1822},{"krate":0,"index":1824},{"krate":0,"index":1826},{"krate":0,"index":1828},{"krate":0,"index":1830},{"krate":0,"index":1832},{"krate":0,"index":1834},{"krate":0,"index":1836},{"krate":0,"index":1838},{"krate":0,"index":1840},{"krate":0,"index":1842},{"krate":0,"index":1844},{"krate":0,"index":1846},{"krate":0,"index":1848},{"krate":0,"index":1850},{"krate":0,"index":1852},{"krate":0,"index":1854},{"krate":0,"index":1856},{"krate":0,"index":1858},{"krate":0,"index":1860},{"krate":0,"index":1862},{"krate":0,"index":1864},{"krate":0,"index":1866},{"krate":0,"index":1868},{"krate":0,"index":1870},{"krate":0,"index":1872},{"krate":0,"index":1874},{"krate":0,"index":1876},{"krate":0,"index":1878},{"krate":0,"index":1880},{"krate":0,"index":1882},{"krate":0,"index":1884},{"krate":0,"index":1886},{"krate":0,"index":1888},{"krate":0,"index":1890},{"krate":0,"index":1892},{"krate":0,"index":1894},{"krate":0,"index":1896},{"krate":0,"index":1898},{"krate":0,"index":1900},{"krate":0,"index":1902},{"krate":0,"index":1904},{"krate":0,"index":1906},{"krate":0,"index":1908},{"krate":0,"index":1910},{"krate":0,"index":1912},{"krate":0,"index":1914},{"krate":0,"index":1916},{"krate":0,"index":1918},{"krate":0,"index":1920},{"krate":0,"index":1922},{"krate":0,"index":1924},{"krate":0,"index":1926},{"krate":0,"index":1928},{"krate":0,"index":1930},{"krate":0,"index":1932},{"krate":0,"index":1934}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":129},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":21215,"byte_end":21226,"line_start":12,"line_end":12,"column_start":11,"column_end":22},"name":"ToPrimitive","qualname":"::cast::ToPrimitive","value":"ToPrimitive","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143}],"decl_id":null,"docs":" A generic trait for converting a value to a number.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":21302,"byte_end":21310,"line_start":15,"line_end":15,"column_start":8,"column_end":16},"name":"to_isize","qualname":"::cast::ToPrimitive::to_isize","value":"fn (&self) -> Option<isize>","parent":{"krate":0,"index":129},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `isize`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":21285,"byte_end":21294,"line_start":14,"line_end":14,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":21477,"byte_end":21482,"line_start":21,"line_end":21,"column_start":8,"column_end":13},"name":"to_i8","qualname":"::cast::ToPrimitive::to_i8","value":"fn (&self) -> Option<i8>","parent":{"krate":0,"index":129},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":21460,"byte_end":21469,"line_start":20,"line_end":20,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":21644,"byte_end":21650,"line_start":27,"line_end":27,"column_start":8,"column_end":14},"name":"to_i16","qualname":"::cast::ToPrimitive::to_i16","value":"fn (&self) -> Option<i16>","parent":{"krate":0,"index":129},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i16`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":21627,"byte_end":21636,"line_start":26,"line_end":26,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":21814,"byte_end":21820,"line_start":33,"line_end":33,"column_start":8,"column_end":14},"name":"to_i32","qualname":"::cast::ToPrimitive::to_i32","value":"fn (&self) -> Option<i32>","parent":{"krate":0,"index":129},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i32`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":21797,"byte_end":21806,"line_start":32,"line_end":32,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":21970,"byte_end":21976,"line_start":38,"line_end":38,"column_start":8,"column_end":14},"name":"to_i64","qualname":"::cast::ToPrimitive::to_i64","value":"fn (&self) -> Option<i64>","parent":{"krate":0,"index":129},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i64`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":22363,"byte_end":22370,"line_start":48,"line_end":48,"column_start":8,"column_end":15},"name":"to_i128","qualname":"::cast::ToPrimitive::to_i128","value":"fn (&self) -> Option<i128>","parent":{"krate":0,"index":129},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i128`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":22325,"byte_end":22334,"line_start":46,"line_end":46,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":22339,"byte_end":22355,"line_start":47,"line_end":47,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":22513,"byte_end":22521,"line_start":54,"line_end":54,"column_start":8,"column_end":16},"name":"to_usize","qualname":"::cast::ToPrimitive::to_usize","value":"fn (&self) -> Option<usize>","parent":{"krate":0,"index":129},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `usize`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":22496,"byte_end":22505,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":22688,"byte_end":22693,"line_start":60,"line_end":60,"column_start":8,"column_end":13},"name":"to_u8","qualname":"::cast::ToPrimitive::to_u8","value":"fn (&self) -> Option<u8>","parent":{"krate":0,"index":129},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":22671,"byte_end":22680,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":22855,"byte_end":22861,"line_start":66,"line_end":66,"column_start":8,"column_end":14},"name":"to_u16","qualname":"::cast::ToPrimitive::to_u16","value":"fn (&self) -> Option<u16>","parent":{"krate":0,"index":129},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u16`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":22838,"byte_end":22847,"line_start":65,"line_end":65,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":23025,"byte_end":23031,"line_start":72,"line_end":72,"column_start":8,"column_end":14},"name":"to_u32","qualname":"::cast::ToPrimitive::to_u32","value":"fn (&self) -> Option<u32>","parent":{"krate":0,"index":129},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u32`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":23008,"byte_end":23017,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":23195,"byte_end":23201,"line_start":78,"line_end":78,"column_start":8,"column_end":14},"name":"to_u64","qualname":"::cast::ToPrimitive::to_u64","value":"fn (&self) -> Option<u64>","parent":{"krate":0,"index":129},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u64`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":23178,"byte_end":23187,"line_start":77,"line_end":77,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":23588,"byte_end":23595,"line_start":88,"line_end":88,"column_start":8,"column_end":15},"name":"to_u128","qualname":"::cast::ToPrimitive::to_u128","value":"fn (&self) -> Option<u128>","parent":{"krate":0,"index":129},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u128`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":23550,"byte_end":23559,"line_start":86,"line_end":86,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":23564,"byte_end":23580,"line_start":87,"line_end":87,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":23737,"byte_end":23743,"line_start":94,"line_end":94,"column_start":8,"column_end":14},"name":"to_f32","qualname":"::cast::ToPrimitive::to_f32","value":"fn (&self) -> Option<f32>","parent":{"krate":0,"index":129},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `f32`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":23720,"byte_end":23729,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":23907,"byte_end":23913,"line_start":100,"line_end":100,"column_start":8,"column_end":14},"name":"to_f64","qualname":"::cast::ToPrimitive::to_f64","value":"fn (&self) -> Option<f64>","parent":{"krate":0,"index":129},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `f64`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":23890,"byte_end":23899,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":154},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":32311,"byte_end":32324,"line_start":364,"line_end":364,"column_start":11,"column_end":24},"name":"FromPrimitive","qualname":"::cast::FromPrimitive","value":"FromPrimitive: Sized","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168}],"decl_id":null,"docs":" A generic trait for converting a number to a value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":32507,"byte_end":32517,"line_start":368,"line_end":368,"column_start":8,"column_end":18},"name":"from_isize","qualname":"::cast::FromPrimitive::from_isize","value":"fn (n: isize) -> Option<Self>","parent":{"krate":0,"index":154},"children":[],"decl_id":null,"docs":" Convert an `isize` to return an optional value of this type. If the\n value cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":32490,"byte_end":32499,"line_start":367,"line_end":367,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":32775,"byte_end":32782,"line_start":375,"line_end":375,"column_start":8,"column_end":15},"name":"from_i8","qualname":"::cast::FromPrimitive::from_i8","value":"fn (n: i8) -> Option<Self>","parent":{"krate":0,"index":154},"children":[],"decl_id":null,"docs":" Convert an `i8` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":32758,"byte_end":32767,"line_start":374,"line_end":374,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":33032,"byte_end":33040,"line_start":382,"line_end":382,"column_start":8,"column_end":16},"name":"from_i16","qualname":"::cast::FromPrimitive::from_i16","value":"fn (n: i16) -> Option<Self>","parent":{"krate":0,"index":154},"children":[],"decl_id":null,"docs":" Convert an `i16` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":33015,"byte_end":33024,"line_start":381,"line_end":381,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":33291,"byte_end":33299,"line_start":389,"line_end":389,"column_start":8,"column_end":16},"name":"from_i32","qualname":"::cast::FromPrimitive::from_i32","value":"fn (n: i32) -> Option<Self>","parent":{"krate":0,"index":154},"children":[],"decl_id":null,"docs":" Convert an `i32` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":33274,"byte_end":33283,"line_start":388,"line_end":388,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":33536,"byte_end":33544,"line_start":395,"line_end":395,"column_start":8,"column_end":16},"name":"from_i64","qualname":"::cast::FromPrimitive::from_i64","value":"fn (n: i64) -> Option<Self>","parent":{"krate":0,"index":154},"children":[],"decl_id":null,"docs":" Convert an `i64` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":34034,"byte_end":34043,"line_start":406,"line_end":406,"column_start":8,"column_end":17},"name":"from_i128","qualname":"::cast::FromPrimitive::from_i128","value":"fn (n: i128) -> Option<Self>","parent":{"krate":0,"index":154},"children":[],"decl_id":null,"docs":" Convert an `i128` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":33996,"byte_end":34005,"line_start":404,"line_end":404,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":34010,"byte_end":34026,"line_start":405,"line_end":405,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":34302,"byte_end":34312,"line_start":413,"line_end":413,"column_start":8,"column_end":18},"name":"from_usize","qualname":"::cast::FromPrimitive::from_usize","value":"fn (n: usize) -> Option<Self>","parent":{"krate":0,"index":154},"children":[],"decl_id":null,"docs":" Convert a `usize` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":34285,"byte_end":34294,"line_start":412,"line_end":412,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":34570,"byte_end":34577,"line_start":420,"line_end":420,"column_start":8,"column_end":15},"name":"from_u8","qualname":"::cast::FromPrimitive::from_u8","value":"fn (n: u8) -> Option<Self>","parent":{"krate":0,"index":154},"children":[],"decl_id":null,"docs":" Convert an `u8` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":34553,"byte_end":34562,"line_start":419,"line_end":419,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":34827,"byte_end":34835,"line_start":427,"line_end":427,"column_start":8,"column_end":16},"name":"from_u16","qualname":"::cast::FromPrimitive::from_u16","value":"fn (n: u16) -> Option<Self>","parent":{"krate":0,"index":154},"children":[],"decl_id":null,"docs":" Convert an `u16` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":34810,"byte_end":34819,"line_start":426,"line_end":426,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":35086,"byte_end":35094,"line_start":434,"line_end":434,"column_start":8,"column_end":16},"name":"from_u32","qualname":"::cast::FromPrimitive::from_u32","value":"fn (n: u32) -> Option<Self>","parent":{"krate":0,"index":154},"children":[],"decl_id":null,"docs":" Convert an `u32` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":35069,"byte_end":35078,"line_start":433,"line_end":433,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":35331,"byte_end":35339,"line_start":440,"line_end":440,"column_start":8,"column_end":16},"name":"from_u64","qualname":"::cast::FromPrimitive::from_u64","value":"fn (n: u64) -> Option<Self>","parent":{"krate":0,"index":154},"children":[],"decl_id":null,"docs":" Convert an `u64` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":35829,"byte_end":35838,"line_start":451,"line_end":451,"column_start":8,"column_end":17},"name":"from_u128","qualname":"::cast::FromPrimitive::from_u128","value":"fn (n: u128) -> Option<Self>","parent":{"krate":0,"index":154},"children":[],"decl_id":null,"docs":" Convert an `u128` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":35791,"byte_end":35800,"line_start":449,"line_end":449,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":35805,"byte_end":35821,"line_start":450,"line_end":450,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":36095,"byte_end":36103,"line_start":458,"line_end":458,"column_start":8,"column_end":16},"name":"from_f32","qualname":"::cast::FromPrimitive::from_f32","value":"fn (n: f32) -> Option<Self>","parent":{"krate":0,"index":154},"children":[],"decl_id":null,"docs":" Convert a `f32` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":36078,"byte_end":36087,"line_start":457,"line_end":457,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":36353,"byte_end":36361,"line_start":465,"line_end":465,"column_start":8,"column_end":16},"name":"from_f64","qualname":"::cast::FromPrimitive::from_f64","value":"fn (n: f64) -> Option<Self>","parent":{"krate":0,"index":154},"children":[],"decl_id":null,"docs":" Convert a `f64` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":36336,"byte_end":36345,"line_start":464,"line_end":464,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":176},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":40607,"byte_end":40611,"line_start":635,"line_end":635,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast::cast","value":"fn <T, U> (n: T) -> Option<U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one machine scalar to another.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":40590,"byte_end":40599,"line_start":634,"line_end":634,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":179},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":40745,"byte_end":40752,"line_start":640,"line_end":640,"column_start":11,"column_end":18},"name":"NumCast","qualname":"::cast::NumCast","value":"NumCast: Sized + ToPrimitive","parent":null,"children":[{"krate":0,"index":180}],"decl_id":null,"docs":" An interface for casting between machine scalars.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":40903,"byte_end":40907,"line_start":643,"line_end":643,"column_start":8,"column_end":12},"name":"from","qualname":"::cast::NumCast::from","value":"fn <T> (n: T) -> Option<Self>","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" Creates a number from another value that can be converted into\n a primitive via the `ToPrimitive` trait.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":187},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":43041,"byte_end":43052,"line_start":718,"line_end":718,"column_start":11,"column_end":22},"name":"AsPrimitive","qualname":"::cast::AsPrimitive","value":"AsPrimitive<T>: 'static + Copy","parent":null,"children":[{"krate":0,"index":189}],"decl_id":null,"docs":" A generic interface for casting between machine scalars with the\n `as` operator, which admits narrowing and precision loss.\n Implementers of this trait AsPrimitive should behave like a primitive\n numeric type (e.g. a newtype around another primitive), and the\n intended conversion must never fail.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":43171,"byte_end":43174,"line_start":723,"line_end":723,"column_start":8,"column_end":11},"name":"as_","qualname":"::cast::AsPrimitive::as_","value":"fn (self) -> T","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":" Convert a value to another, using the `as` operator.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":191},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"float","qualname":"::float","value":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":201},{"krate":0,"index":231},{"krate":0,"index":233},{"krate":0,"index":235},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":1992},{"krate":0,"index":2050},{"krate":0,"index":296},{"krate":0,"index":2108},{"krate":0,"index":2125},{"krate":0,"index":2142}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":201},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":44825,"byte_end":44834,"line_start":13,"line_end":13,"column_start":11,"column_end":20},"name":"FloatCore","qualname":"::float::FloatCore","value":"FloatCore: Num + NumCast + Neg<Output = Self> + PartialOrd + Copy","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230}],"decl_id":null,"docs":" Generic trait for floating point numbers that works with `no_std`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":45231,"byte_end":45239,"line_start":29,"line_end":29,"column_start":8,"column_end":16},"name":"infinity","qualname":"::float::FloatCore::infinity","value":"fn () -> Self","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Returns positive infinity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":45602,"byte_end":45614,"line_start":46,"line_end":46,"column_start":8,"column_end":20},"name":"neg_infinity","qualname":"::float::FloatCore::neg_infinity","value":"fn () -> Self","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Returns negative infinity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":45924,"byte_end":45927,"line_start":63,"line_end":63,"column_start":8,"column_end":11},"name":"nan","qualname":"::float::FloatCore::nan","value":"fn () -> Self","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Returns NaN.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":46343,"byte_end":46351,"line_start":82,"line_end":82,"column_start":8,"column_end":16},"name":"neg_zero","qualname":"::float::FloatCore::neg_zero","value":"fn () -> Self","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Returns `-0.0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":46730,"byte_end":46739,"line_start":99,"line_end":99,"column_start":8,"column_end":17},"name":"min_value","qualname":"::float::FloatCore::min_value","value":"fn () -> Self","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Returns the smallest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":47159,"byte_end":47177,"line_start":116,"line_end":116,"column_start":8,"column_end":26},"name":"min_positive_value","qualname":"::float::FloatCore::min_positive_value","value":"fn () -> Self","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Returns the smallest positive, normalized value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":47539,"byte_end":47546,"line_start":133,"line_end":133,"column_start":8,"column_end":15},"name":"epsilon","qualname":"::float::FloatCore::epsilon","value":"fn () -> Self","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Returns epsilon, a small positive value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":47924,"byte_end":47933,"line_start":150,"line_end":150,"column_start":8,"column_end":17},"name":"max_value","qualname":"::float::FloatCore::max_value","value":"fn () -> Self","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Returns the largest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":48383,"byte_end":48389,"line_start":170,"line_end":170,"column_start":8,"column_end":14},"name":"is_nan","qualname":"::float::FloatCore::is_nan","value":"fn (self) -> bool","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Returns `true` if the number is NaN.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":48366,"byte_end":48375,"line_start":169,"line_end":169,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":48966,"byte_end":48977,"line_start":194,"line_end":194,"column_start":8,"column_end":19},"name":"is_infinite","qualname":"::float::FloatCore::is_infinite","value":"fn (self) -> bool","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Returns `true` if the number is infinite.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":48949,"byte_end":48958,"line_start":193,"line_end":193,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":49578,"byte_end":49587,"line_start":217,"line_end":217,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::float::FloatCore::is_finite","value":"fn (self) -> bool","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither infinite or NaN.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":49561,"byte_end":49570,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":50185,"byte_end":50194,"line_start":240,"line_end":240,"column_start":8,"column_end":17},"name":"is_normal","qualname":"::float::FloatCore::is_normal","value":"fn (self) -> bool","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite, subnormal or NaN.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":50168,"byte_end":50177,"line_start":239,"line_end":239,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":51033,"byte_end":51041,"line_start":266,"line_end":266,"column_start":8,"column_end":16},"name":"classify","qualname":"::float::FloatCore::classify","value":"fn (self) -> FpCategory","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Returns the floating point category of the number. If only one property\n is going to be tested, it is generally faster to use the specific\n predicate instead.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":51674,"byte_end":51679,"line_start":291,"line_end":291,"column_start":8,"column_end":13},"name":"floor","qualname":"::float::FloatCore::floor","value":"fn (self) -> Self","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to a number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":51657,"byte_end":51666,"line_start":290,"line_end":290,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":52525,"byte_end":52529,"line_start":325,"line_end":325,"column_start":8,"column_end":12},"name":"ceil","qualname":"::float::FloatCore::ceil","value":"fn (self) -> Self","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to a number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":52508,"byte_end":52517,"line_start":324,"line_end":324,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":53361,"byte_end":53366,"line_start":358,"line_end":358,"column_start":8,"column_end":13},"name":"round","qualname":"::float::FloatCore::round","value":"fn (self) -> Self","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Returns the nearest integer to a number. Round half-way cases away from `0.0`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":53344,"byte_end":53353,"line_start":357,"line_end":357,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":54457,"byte_end":54462,"line_start":402,"line_end":402,"column_start":8,"column_end":13},"name":"trunc","qualname":"::float::FloatCore::trunc","value":"fn (self) -> Self","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Return the integer part of a number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":54440,"byte_end":54449,"line_start":401,"line_end":401,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":55183,"byte_end":55188,"line_start":434,"line_end":434,"column_start":8,"column_end":13},"name":"fract","qualname":"::float::FloatCore::fract","value":"fn (self) -> Self","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Returns the fractional part of a number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":55166,"byte_end":55175,"line_start":433,"line_end":433,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":55893,"byte_end":55896,"line_start":463,"line_end":463,"column_start":8,"column_end":11},"name":"abs","qualname":"::float::FloatCore::abs","value":"fn (self) -> Self","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Computes the absolute value of `self`. Returns `FloatCore::nan()` if the\n number is `FloatCore::nan()`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":55876,"byte_end":55885,"line_start":462,"line_end":462,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":56820,"byte_end":56826,"line_start":497,"line_end":497,"column_start":8,"column_end":14},"name":"signum","qualname":"::float::FloatCore::signum","value":"fn (self) -> Self","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":56803,"byte_end":56812,"line_start":496,"line_end":496,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":57688,"byte_end":57704,"line_start":530,"line_end":530,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::float::FloatCore::is_sign_positive","value":"fn (self) -> bool","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is positive, including `+0.0` and\n `FloatCore::infinity()`, and since Rust 1.20 also\n `FloatCore::nan()`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":57671,"byte_end":57680,"line_start":529,"line_end":529,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":58434,"byte_end":58450,"line_start":557,"line_end":557,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::float::FloatCore::is_sign_negative","value":"fn (self) -> bool","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is negative, including `-0.0` and\n `FloatCore::neg_infinity()`, and since Rust 1.20 also\n `-FloatCore::nan()`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":58417,"byte_end":58426,"line_start":556,"line_end":556,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":59083,"byte_end":59086,"line_start":582,"line_end":582,"column_start":8,"column_end":11},"name":"min","qualname":"::float::FloatCore::min","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":59066,"byte_end":59075,"line_start":581,"line_end":581,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":59883,"byte_end":59886,"line_start":616,"line_end":616,"column_start":8,"column_end":11},"name":"max","qualname":"::float::FloatCore::max","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":59866,"byte_end":59875,"line_start":615,"line_end":615,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":60641,"byte_end":60646,"line_start":649,"line_end":649,"column_start":8,"column_end":13},"name":"recip","qualname":"::float::FloatCore::recip","value":"fn (self) -> Self","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Returns the reciprocal (multiplicative inverse) of the number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":60624,"byte_end":60633,"line_start":648,"line_end":648,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":61240,"byte_end":61244,"line_start":673,"line_end":673,"column_start":8,"column_end":12},"name":"powi","qualname":"::float::FloatCore::powi","value":"fn (mut self, mut exp: i32) -> Self","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Raise a number to an integer power.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":61223,"byte_end":61232,"line_start":672,"line_end":672,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":62161,"byte_end":62171,"line_start":701,"line_end":701,"column_start":8,"column_end":18},"name":"to_degrees","qualname":"::float::FloatCore::to_degrees","value":"fn (self) -> Self","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Converts to degrees, assuming the number is in radians.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":62667,"byte_end":62677,"line_start":720,"line_end":720,"column_start":8,"column_end":18},"name":"to_radians","qualname":"::float::FloatCore::to_radians","value":"fn (self) -> Self","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Converts to radians, assuming the number is in degrees.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":63436,"byte_end":63450,"line_start":743,"line_end":743,"column_start":8,"column_end":22},"name":"integer_decode","qualname":"::float::FloatCore::integer_decode","value":"fn (self) -> (u64, i16, i8)","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Returns the mantissa, base 2 exponent, and sign as integers, respectively.\n The original number can be recovered by `sign * mantissa * 2 ^ exponent`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":235},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":68188,"byte_end":68193,"line_start":898,"line_end":898,"column_start":11,"column_end":16},"name":"Float","qualname":"::float::Float","value":"Float: Num + Copy + NumCast + PartialOrd + Neg<Output = Self>","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292}],"decl_id":null,"docs":" Generic trait for floating point numbers","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":68154,"byte_end":68177,"line_start":897,"line_end":897,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":68439,"byte_end":68442,"line_start":908,"line_end":908,"column_start":8,"column_end":11},"name":"nan","qualname":"::float::Float::nan","value":"fn () -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns the `NaN` value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":68764,"byte_end":68772,"line_start":921,"line_end":921,"column_start":8,"column_end":16},"name":"infinity","qualname":"::float::Float::infinity","value":"fn () -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns the infinite value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":69123,"byte_end":69135,"line_start":934,"line_end":934,"column_start":8,"column_end":20},"name":"neg_infinity","qualname":"::float::Float::neg_infinity","value":"fn () -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns the negative infinite value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":69505,"byte_end":69513,"line_start":948,"line_end":948,"column_start":8,"column_end":16},"name":"neg_zero","qualname":"::float::Float::neg_zero","value":"fn () -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns `-0.0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":69780,"byte_end":69789,"line_start":960,"line_end":960,"column_start":8,"column_end":17},"name":"min_value","qualname":"::float::Float::min_value","value":"fn () -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns the smallest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":70088,"byte_end":70106,"line_start":972,"line_end":972,"column_start":8,"column_end":26},"name":"min_positive_value","qualname":"::float::Float::min_positive_value","value":"fn () -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns the smallest positive, normalized value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":70483,"byte_end":70490,"line_start":989,"line_end":989,"column_start":8,"column_end":15},"name":"epsilon","qualname":"::float::Float::epsilon","value":"fn () -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns epsilon, a small positive value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":70831,"byte_end":70840,"line_start":1002,"line_end":1002,"column_start":8,"column_end":17},"name":"max_value","qualname":"::float::Float::max_value","value":"fn () -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns the largest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":71138,"byte_end":71144,"line_start":1016,"line_end":1016,"column_start":8,"column_end":14},"name":"is_nan","qualname":"::float::Float::is_nan","value":"fn (self) -> bool","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns `true` if this value is `NaN` and false otherwise.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":71682,"byte_end":71693,"line_start":1036,"line_end":1036,"column_start":8,"column_end":19},"name":"is_infinite","qualname":"::float::Float::is_infinite","value":"fn (self) -> bool","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns `true` if this value is positive infinity or negative infinity and\n false otherwise.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":72185,"byte_end":72194,"line_start":1055,"line_end":1055,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::float::Float::is_finite","value":"fn (self) -> bool","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns `true` if this number is neither infinite nor `NaN`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":72944,"byte_end":72953,"line_start":1079,"line_end":1079,"column_start":8,"column_end":17},"name":"is_normal","qualname":"::float::Float::is_normal","value":"fn (self) -> bool","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite,\n [subnormal][subnormal], or `NaN`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":73467,"byte_end":73475,"line_start":1096,"line_end":1096,"column_start":8,"column_end":16},"name":"classify","qualname":"::float::Float::classify","value":"fn (self) -> FpCategory","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns the floating point category of the number. If only one property\n is going to be tested, it is generally faster to use the specific\n predicate instead.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":73767,"byte_end":73772,"line_start":1109,"line_end":1109,"column_start":8,"column_end":13},"name":"floor","qualname":"::float::Float::floor","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":74060,"byte_end":74064,"line_start":1122,"line_end":1122,"column_start":8,"column_end":12},"name":"ceil","qualname":"::float::Float::ceil","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":74378,"byte_end":74383,"line_start":1136,"line_end":1136,"column_start":8,"column_end":13},"name":"round","qualname":"::float::Float::round","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns the nearest integer to a number. Round half-way cases away from\n `0.0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":74647,"byte_end":74652,"line_start":1149,"line_end":1149,"column_start":8,"column_end":13},"name":"trunc","qualname":"::float::Float::trunc","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Return the integer part of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":75048,"byte_end":75053,"line_start":1164,"line_end":1164,"column_start":8,"column_end":13},"name":"fract","qualname":"::float::Float::fract","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns the fractional part of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":75583,"byte_end":75586,"line_start":1184,"line_end":1184,"column_start":8,"column_end":11},"name":"abs","qualname":"::float::Float::abs","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Computes the absolute value of `self`. Returns `Float::nan()` if the\n number is `Float::nan()`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":76153,"byte_end":76159,"line_start":1203,"line_end":1203,"column_start":8,"column_end":14},"name":"signum","qualname":"::float::Float::signum","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":76632,"byte_end":76648,"line_start":1221,"line_end":1221,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::float::Float::is_sign_positive","value":"fn (self) -> bool","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is positive, including `+0.0`,\n `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":77117,"byte_end":77133,"line_start":1239,"line_end":1239,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::float::Float::is_sign_negative","value":"fn (self) -> bool","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is negative, including `-0.0`,\n `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":77745,"byte_end":77752,"line_start":1259,"line_end":1259,"column_start":8,"column_end":15},"name":"mul_add","qualname":"::float::Float::mul_add","value":"fn (self, a: Self, b: Self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Fused multiply-add. Computes `(self * a) + b` with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":78050,"byte_end":78055,"line_start":1270,"line_end":1270,"column_start":8,"column_end":13},"name":"recip","qualname":"::float::Float::recip","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Take the reciprocal (inverse) of a number, `1/x`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":78392,"byte_end":78396,"line_start":1284,"line_end":1284,"column_start":8,"column_end":12},"name":"powi","qualname":"::float::Float::powi","value":"fn (self, n: i32) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Raise a number to an integer power.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":78675,"byte_end":78679,"line_start":1296,"line_end":1296,"column_start":8,"column_end":12},"name":"powf","qualname":"::float::Float::powf","value":"fn (self, n: Self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Raise a number to a floating point power.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":79102,"byte_end":79106,"line_start":1313,"line_end":1313,"column_start":8,"column_end":12},"name":"sqrt","qualname":"::float::Float::sqrt","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Take the square root of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":79456,"byte_end":79459,"line_start":1329,"line_end":1329,"column_start":8,"column_end":11},"name":"exp","qualname":"::float::Float::exp","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns `e^(self)`, (the exponential function).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":79737,"byte_end":79741,"line_start":1343,"line_end":1343,"column_start":8,"column_end":12},"name":"exp2","qualname":"::float::Float::exp2","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns `2^(self)`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":80088,"byte_end":80090,"line_start":1359,"line_end":1359,"column_start":8,"column_end":10},"name":"ln","qualname":"::float::Float::ln","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns the natural logarithm of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":80600,"byte_end":80603,"line_start":1378,"line_end":1378,"column_start":8,"column_end":11},"name":"log","qualname":"::float::Float::log","value":"fn (self, base: Self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns the logarithm of the number with respect to an arbitrary base.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":80925,"byte_end":80929,"line_start":1392,"line_end":1392,"column_start":8,"column_end":12},"name":"log2","qualname":"::float::Float::log2","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns the base 2 logarithm of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":81244,"byte_end":81249,"line_start":1406,"line_end":1406,"column_start":8,"column_end":13},"name":"log10","qualname":"::float::Float::log10","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns the base 10 logarithm of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":81548,"byte_end":81558,"line_start":1420,"line_end":1420,"column_start":8,"column_end":18},"name":"to_degrees","qualname":"::float::Float::to_degrees","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Converts radians to degrees.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":81531,"byte_end":81540,"line_start":1419,"line_end":1419,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":81989,"byte_end":81999,"line_start":1438,"line_end":1438,"column_start":8,"column_end":18},"name":"to_radians","qualname":"::float::Float::to_radians","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Converts degrees to radians.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":81972,"byte_end":81981,"line_start":1437,"line_end":1437,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":82353,"byte_end":82356,"line_start":1454,"line_end":1454,"column_start":8,"column_end":11},"name":"max","qualname":"::float::Float::max","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":82595,"byte_end":82598,"line_start":1466,"line_end":1466,"column_start":8,"column_end":11},"name":"min","qualname":"::float::Float::min","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":83096,"byte_end":83103,"line_start":1485,"line_end":1485,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::float::Float::abs_sub","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":83411,"byte_end":83415,"line_start":1499,"line_end":1499,"column_start":8,"column_end":12},"name":"cbrt","qualname":"::float::Float::cbrt","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Take the cubic root of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":83833,"byte_end":83838,"line_start":1515,"line_end":1515,"column_start":8,"column_end":13},"name":"hypot","qualname":"::float::Float::hypot","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Calculate the length of the hypotenuse of a right-angle triangle given\n legs of length `x` and `y`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":84166,"byte_end":84169,"line_start":1529,"line_end":1529,"column_start":8,"column_end":11},"name":"sin","qualname":"::float::Float::sin","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Computes the sine of a number (in radians).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":84486,"byte_end":84489,"line_start":1543,"line_end":1543,"column_start":8,"column_end":11},"name":"cos","qualname":"::float::Float::cos","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Computes the cosine of a number (in radians).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":84799,"byte_end":84802,"line_start":1556,"line_end":1556,"column_start":8,"column_end":11},"name":"tan","qualname":"::float::Float::tan","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Computes the tangent of a number (in radians).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":85282,"byte_end":85286,"line_start":1573,"line_end":1573,"column_start":8,"column_end":12},"name":"asin","qualname":"::float::Float::asin","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Computes the arcsine of a number. Return value is in radians in\n the range [-pi/2, pi/2] or NaN if the number is outside the range\n [-1, 1].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":85762,"byte_end":85766,"line_start":1590,"line_end":1590,"column_start":8,"column_end":12},"name":"acos","qualname":"::float::Float::acos","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Computes the arccosine of a number. Return value is in radians in\n the range [0, pi] or NaN if the number is outside the range\n [-1, 1].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":86130,"byte_end":86134,"line_start":1605,"line_end":1605,"column_start":8,"column_end":12},"name":"atan","qualname":"::float::Float::atan","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Computes the arctangent of a number. Return value is in radians in the\n range [-pi/2, pi/2];","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":87015,"byte_end":87020,"line_start":1634,"line_end":1634,"column_start":8,"column_end":13},"name":"atan2","qualname":"::float::Float::atan2","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":87534,"byte_end":87541,"line_start":1652,"line_end":1652,"column_start":8,"column_end":15},"name":"sin_cos","qualname":"::float::Float::sin_cos","value":"fn (self) -> (Self, Self)","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Simultaneously computes the sine and cosine of the number, `x`. Returns\n `(sin(x), cos(x))`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":87909,"byte_end":87915,"line_start":1667,"line_end":1667,"column_start":8,"column_end":14},"name":"exp_m1","qualname":"::float::Float::exp_m1","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns `e^(self) - 1` in a way that is accurate even if the\n number is close to zero.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":88342,"byte_end":88347,"line_start":1683,"line_end":1683,"column_start":8,"column_end":13},"name":"ln_1p","qualname":"::float::Float::ln_1p","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns `ln(1+n)` (natural logarithm) more accurately than if\n the operations were performed separately.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":88767,"byte_end":88771,"line_start":1701,"line_end":1701,"column_start":8,"column_end":12},"name":"sinh","qualname":"::float::Float::sinh","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Hyperbolic sine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":89207,"byte_end":89211,"line_start":1719,"line_end":1719,"column_start":8,"column_end":12},"name":"cosh","qualname":"::float::Float::cosh","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Hyperbolic cosine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":89667,"byte_end":89671,"line_start":1737,"line_end":1737,"column_start":8,"column_end":12},"name":"tanh","qualname":"::float::Float::tanh","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Hyperbolic tangent function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":89966,"byte_end":89971,"line_start":1751,"line_end":1751,"column_start":8,"column_end":13},"name":"asinh","qualname":"::float::Float::asinh","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Inverse hyperbolic sine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":90268,"byte_end":90273,"line_start":1765,"line_end":1765,"column_start":8,"column_end":13},"name":"acosh","qualname":"::float::Float::acosh","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Inverse hyperbolic cosine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":90604,"byte_end":90609,"line_start":1780,"line_end":1780,"column_start":8,"column_end":13},"name":"atanh","qualname":"::float::Float::atanh","value":"fn (self) -> Self","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Inverse hyperbolic tangent function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":91301,"byte_end":91315,"line_start":1801,"line_end":1801,"column_start":8,"column_end":22},"name":"integer_decode","qualname":"::float::Float::integer_decode","value":"fn (self) -> (u64, i16, i8)","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" Returns the mantissa, base 2 exponent, and sign as integers, respectively.\n The original number can be recovered by `sign * mantissa * 2 ^ exponent`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2109},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":95960,"byte_end":95961,"line_start":1936,"line_end":1936,"column_start":5,"column_end":6},"name":"E","qualname":"::float::FloatConst::E","value":"fn () -> Self","parent":{"krate":0,"index":2108},"children":[],"decl_id":null,"docs":"Return Euler’s number.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2110},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":96001,"byte_end":96010,"line_start":1938,"line_end":1938,"column_start":5,"column_end":14},"name":"FRAC_1_PI","qualname":"::float::FloatConst::FRAC_1_PI","value":"fn () -> Self","parent":{"krate":0,"index":2108},"children":[],"decl_id":null,"docs":"Return `1.0 / π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2111},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":96057,"byte_end":96070,"line_start":1940,"line_end":1940,"column_start":5,"column_end":18},"name":"FRAC_1_SQRT_2","qualname":"::float::FloatConst::FRAC_1_SQRT_2","value":"fn () -> Self","parent":{"krate":0,"index":2108},"children":[],"decl_id":null,"docs":"Return `1.0 / sqrt(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2112},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":96110,"byte_end":96119,"line_start":1942,"line_end":1942,"column_start":5,"column_end":14},"name":"FRAC_2_PI","qualname":"::float::FloatConst::FRAC_2_PI","value":"fn () -> Self","parent":{"krate":0,"index":2108},"children":[],"decl_id":null,"docs":"Return `2.0 / π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2113},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":96165,"byte_end":96179,"line_start":1944,"line_end":1944,"column_start":5,"column_end":19},"name":"FRAC_2_SQRT_PI","qualname":"::float::FloatConst::FRAC_2_SQRT_PI","value":"fn () -> Self","parent":{"krate":0,"index":2108},"children":[],"decl_id":null,"docs":"Return `2.0 / sqrt(π)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2114},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":96219,"byte_end":96228,"line_start":1946,"line_end":1946,"column_start":5,"column_end":14},"name":"FRAC_PI_2","qualname":"::float::FloatConst::FRAC_PI_2","value":"fn () -> Self","parent":{"krate":0,"index":2108},"children":[],"decl_id":null,"docs":"Return `π / 2.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2115},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":96268,"byte_end":96277,"line_start":1948,"line_end":1948,"column_start":5,"column_end":14},"name":"FRAC_PI_3","qualname":"::float::FloatConst::FRAC_PI_3","value":"fn () -> Self","parent":{"krate":0,"index":2108},"children":[],"decl_id":null,"docs":"Return `π / 3.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2116},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":96317,"byte_end":96326,"line_start":1950,"line_end":1950,"column_start":5,"column_end":14},"name":"FRAC_PI_4","qualname":"::float::FloatConst::FRAC_PI_4","value":"fn () -> Self","parent":{"krate":0,"index":2108},"children":[],"decl_id":null,"docs":"Return `π / 4.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2117},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":96366,"byte_end":96375,"line_start":1952,"line_end":1952,"column_start":5,"column_end":14},"name":"FRAC_PI_6","qualname":"::float::FloatConst::FRAC_PI_6","value":"fn () -> Self","parent":{"krate":0,"index":2108},"children":[],"decl_id":null,"docs":"Return `π / 6.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2118},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":96415,"byte_end":96424,"line_start":1954,"line_end":1954,"column_start":5,"column_end":14},"name":"FRAC_PI_8","qualname":"::float::FloatConst::FRAC_PI_8","value":"fn () -> Self","parent":{"krate":0,"index":2108},"children":[],"decl_id":null,"docs":"Return `π / 8.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2119},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":96464,"byte_end":96469,"line_start":1956,"line_end":1956,"column_start":5,"column_end":10},"name":"LN_10","qualname":"::float::FloatConst::LN_10","value":"fn () -> Self","parent":{"krate":0,"index":2108},"children":[],"decl_id":null,"docs":"Return `ln(10.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2120},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":96508,"byte_end":96512,"line_start":1958,"line_end":1958,"column_start":5,"column_end":9},"name":"LN_2","qualname":"::float::FloatConst::LN_2","value":"fn () -> Self","parent":{"krate":0,"index":2108},"children":[],"decl_id":null,"docs":"Return `ln(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2121},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":96552,"byte_end":96559,"line_start":1960,"line_end":1960,"column_start":5,"column_end":12},"name":"LOG10_E","qualname":"::float::FloatConst::LOG10_E","value":"fn () -> Self","parent":{"krate":0,"index":2108},"children":[],"decl_id":null,"docs":"Return `log10(e)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2122},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":96598,"byte_end":96604,"line_start":1962,"line_end":1962,"column_start":5,"column_end":11},"name":"LOG2_E","qualname":"::float::FloatConst::LOG2_E","value":"fn () -> Self","parent":{"krate":0,"index":2108},"children":[],"decl_id":null,"docs":"Return `log2(e)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2123},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":96656,"byte_end":96658,"line_start":1964,"line_end":1964,"column_start":5,"column_end":7},"name":"PI","qualname":"::float::FloatConst::PI","value":"fn () -> Self","parent":{"krate":0,"index":2108},"children":[],"decl_id":null,"docs":"Return Archimedes’ constant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2124},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":96699,"byte_end":96705,"line_start":1966,"line_end":1966,"column_start":5,"column_end":11},"name":"SQRT_2","qualname":"::float::FloatConst::SQRT_2","value":"fn () -> Self","parent":{"krate":0,"index":2108},"children":[],"decl_id":null,"docs":"Return `sqrt(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":297},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/identities.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"identities","qualname":"::identities","value":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/identities.rs","parent":null,"children":[{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":302},{"krate":0,"index":306},{"krate":0,"index":2159},{"krate":0,"index":2162},{"krate":0,"index":2165},{"krate":0,"index":2168},{"krate":0,"index":2171},{"krate":0,"index":2174},{"krate":0,"index":2177},{"krate":0,"index":2180},{"krate":0,"index":2183},{"krate":0,"index":2186},{"krate":0,"index":2189},{"krate":0,"index":2192},{"krate":0,"index":2195},{"krate":0,"index":2198},{"krate":0,"index":307},{"krate":0,"index":312},{"krate":0,"index":316},{"krate":0,"index":2201},{"krate":0,"index":2204},{"krate":0,"index":2207},{"krate":0,"index":2210},{"krate":0,"index":2213},{"krate":0,"index":2216},{"krate":0,"index":2219},{"krate":0,"index":2222},{"krate":0,"index":2225},{"krate":0,"index":2228},{"krate":0,"index":2231},{"krate":0,"index":2234},{"krate":0,"index":2237},{"krate":0,"index":2240},{"krate":0,"index":317},{"krate":0,"index":321},{"krate":0,"index":323}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":302},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/identities.rs","byte_start":98589,"byte_end":98593,"line_start":12,"line_end":12,"column_start":11,"column_end":15},"name":"Zero","qualname":"::identities::Zero","value":"Zero: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305}],"decl_id":null,"docs":" Defines an additive identity element for `Self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/identities.rs","byte_start":98963,"byte_end":98967,"line_start":20,"line_end":20,"column_start":8,"column_end":12},"name":"zero","qualname":"::identities::Zero::zero","value":"fn () -> Self","parent":{"krate":0,"index":302},"children":[],"decl_id":null,"docs":" Returns the additive identity element of `Self`, `0`.\n # Purity","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/identities.rs","byte_start":99056,"byte_end":99064,"line_start":23,"line_end":23,"column_start":8,"column_end":16},"name":"set_zero","qualname":"::identities::Zero::set_zero","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":302},"children":[],"decl_id":null,"docs":" Sets `self` to the additive identity element of `Self`, `0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/identities.rs","byte_start":99204,"byte_end":99211,"line_start":29,"line_end":29,"column_start":8,"column_end":15},"name":"is_zero","qualname":"::identities::Zero::is_zero","value":"fn (&self) -> bool","parent":{"krate":0,"index":302},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is equal to the additive identity.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/identities.rs","byte_start":99187,"byte_end":99196,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":312},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/identities.rs","byte_start":100298,"byte_end":100301,"line_start":91,"line_end":91,"column_start":11,"column_end":14},"name":"One","qualname":"::identities::One","value":"One: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315}],"decl_id":null,"docs":" Defines a multiplicative identity element for `Self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/identities.rs","byte_start":100685,"byte_end":100688,"line_start":100,"line_end":100,"column_start":8,"column_end":11},"name":"one","qualname":"::identities::One::one","value":"fn () -> Self","parent":{"krate":0,"index":312},"children":[],"decl_id":null,"docs":" Returns the multiplicative identity element of `Self`, `1`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/identities.rs","byte_start":100783,"byte_end":100790,"line_start":103,"line_end":103,"column_start":8,"column_end":15},"name":"set_one","qualname":"::identities::One::set_one","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":312},"children":[],"decl_id":null,"docs":" Sets `self` to the multiplicative identity element of `Self`, `1`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/identities.rs","byte_start":101135,"byte_end":101141,"line_start":113,"line_end":113,"column_start":8,"column_end":14},"name":"is_one","qualname":"::identities::One::is_one","value":"fn (&self) -> bool","parent":{"krate":0,"index":312},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is equal to the multiplicative identity.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/identities.rs","byte_start":101118,"byte_end":101127,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":321},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/identities.rs","byte_start":102164,"byte_end":102168,"line_start":172,"line_end":172,"column_start":8,"column_end":12},"name":"zero","qualname":"::identities::zero","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the additive identity, `0`.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/identities.rs","byte_start":102139,"byte_end":102156,"line_start":171,"line_end":171,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":323},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/identities.rs","byte_start":102278,"byte_end":102281,"line_start":178,"line_end":178,"column_start":8,"column_end":11},"name":"one","qualname":"::identities::one","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplicative identity, `1`.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/identities.rs","byte_start":102253,"byte_end":102270,"line_start":177,"line_end":177,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":325},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"int","qualname":"::int","value":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","parent":null,"children":[{"krate":0,"index":326},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":339},{"krate":0,"index":356},{"krate":0,"index":2243},{"krate":0,"index":2260},{"krate":0,"index":2277},{"krate":0,"index":2294},{"krate":0,"index":2311},{"krate":0,"index":2328},{"krate":0,"index":2345},{"krate":0,"index":2362},{"krate":0,"index":2379},{"krate":0,"index":2396},{"krate":0,"index":2413},{"krate":0,"index":2430}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":339},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":104853,"byte_end":104860,"line_start":34,"line_end":34,"column_start":11,"column_end":18},"name":"PrimInt","qualname":"::int::PrimInt","value":"PrimInt: Sized + Copy + Num + NumCast + Bounded + PartialOrd + Ord + Eq + Not<Output =\nSelf> + BitAnd<Output = Self> + BitOr<Output = Self> + BitXor<Output = Self> +\nShl<usize, Output = Self> + Shr<usize, Output = Self> + CheckedAdd<Output =\nSelf> + CheckedSub<Output = Self> + CheckedMul<Output = Self> +\nCheckedDiv<Output = Self> + Saturating","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355}],"decl_id":null,"docs":" Generic trait for primitive integers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":105535,"byte_end":105545,"line_start":66,"line_end":66,"column_start":8,"column_end":18},"name":"count_ones","qualname":"::int::PrimInt::count_ones","value":"fn (self) -> u32","parent":{"krate":0,"index":339},"children":[],"decl_id":null,"docs":" Returns the number of ones in the binary representation of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":105822,"byte_end":105833,"line_start":79,"line_end":79,"column_start":8,"column_end":19},"name":"count_zeros","qualname":"::int::PrimInt::count_zeros","value":"fn (self) -> u32","parent":{"krate":0,"index":339},"children":[],"decl_id":null,"docs":" Returns the number of zeros in the binary representation of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":106129,"byte_end":106142,"line_start":93,"line_end":93,"column_start":8,"column_end":21},"name":"leading_zeros","qualname":"::int::PrimInt::leading_zeros","value":"fn (self) -> u32","parent":{"krate":0,"index":339},"children":[],"decl_id":null,"docs":" Returns the number of leading zeros in the binary representation\n of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":106439,"byte_end":106453,"line_start":107,"line_end":107,"column_start":8,"column_end":22},"name":"trailing_zeros","qualname":"::int::PrimInt::trailing_zeros","value":"fn (self) -> u32","parent":{"krate":0,"index":339},"children":[],"decl_id":null,"docs":" Returns the number of trailing zeros in the binary representation\n of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":106848,"byte_end":106859,"line_start":122,"line_end":122,"column_start":8,"column_end":19},"name":"rotate_left","qualname":"::int::PrimInt::rotate_left","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":339},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount amount, `n`, wrapping\n the truncated bits to the end of the resulting integer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":107271,"byte_end":107283,"line_start":137,"line_end":137,"column_start":8,"column_end":20},"name":"rotate_right","qualname":"::int::PrimInt::rotate_right","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":339},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount amount, `n`, wrapping\n the truncated bits to the beginning of the resulting integer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":107726,"byte_end":107736,"line_start":154,"line_end":154,"column_start":8,"column_end":18},"name":"signed_shl","qualname":"::int::PrimInt::signed_shl","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":339},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount amount, `n`, filling\n zeros in the least significant bits.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":108212,"byte_end":108222,"line_start":171,"line_end":171,"column_start":8,"column_end":18},"name":"signed_shr","qualname":"::int::PrimInt::signed_shr","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":339},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount amount, `n`, copying\n the \"sign bit\" in the most significant bits even for unsigned types.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":108669,"byte_end":108681,"line_start":188,"line_end":188,"column_start":8,"column_end":20},"name":"unsigned_shl","qualname":"::int::PrimInt::unsigned_shl","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":339},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount amount, `n`, filling\n zeros in the least significant bits.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":109121,"byte_end":109133,"line_start":205,"line_end":205,"column_start":8,"column_end":20},"name":"unsigned_shr","qualname":"::int::PrimInt::unsigned_shr","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":339},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount amount, `n`, filling\n zeros in the most significant bits.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":109438,"byte_end":109448,"line_start":219,"line_end":219,"column_start":8,"column_end":18},"name":"swap_bytes","qualname":"::int::PrimInt::swap_bytes","value":"fn (self) -> Self","parent":{"krate":0,"index":339},"children":[],"decl_id":null,"docs":" Reverses the byte order of the integer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":109944,"byte_end":109951,"line_start":238,"line_end":238,"column_start":8,"column_end":15},"name":"from_be","qualname":"::int::PrimInt::from_be","value":"fn (x: Self) -> Self","parent":{"krate":0,"index":339},"children":[],"decl_id":null,"docs":" Convert an integer from big endian to the target's endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":110456,"byte_end":110463,"line_start":257,"line_end":257,"column_start":8,"column_end":15},"name":"from_le","qualname":"::int::PrimInt::from_le","value":"fn (x: Self) -> Self","parent":{"krate":0,"index":339},"children":[],"decl_id":null,"docs":" Convert an integer from little endian to the target's endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":110946,"byte_end":110951,"line_start":276,"line_end":276,"column_start":8,"column_end":13},"name":"to_be","qualname":"::int::PrimInt::to_be","value":"fn (self) -> Self","parent":{"krate":0,"index":339},"children":[],"decl_id":null,"docs":" Convert `self` to big endian from the target's endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":111437,"byte_end":111442,"line_start":295,"line_end":295,"column_start":8,"column_end":13},"name":"to_le","qualname":"::int::PrimInt::to_le","value":"fn (self) -> Self","parent":{"krate":0,"index":339},"children":[],"decl_id":null,"docs":" Convert `self` to little endian from the target's endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":111680,"byte_end":111683,"line_start":306,"line_end":306,"column_start":8,"column_end":11},"name":"pow","qualname":"::int::PrimInt::pow","value":"fn (self, exp: u32) -> Self","parent":{"krate":0,"index":339},"children":[],"decl_id":null,"docs":" Raises self to the power of `exp`, using exponentiation by squaring.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":357},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ops","qualname":"::ops","value":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/mod.rs","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":386},{"krate":0,"index":404},{"krate":0,"index":426},{"krate":0,"index":431}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":358},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"checked","qualname":"::ops::checked","value":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","parent":null,"children":[{"krate":0,"index":359},{"krate":0,"index":367},{"krate":0,"index":369},{"krate":0,"index":2447},{"krate":0,"index":2449},{"krate":0,"index":2451},{"krate":0,"index":2453},{"krate":0,"index":2455},{"krate":0,"index":2457},{"krate":0,"index":2459},{"krate":0,"index":2461},{"krate":0,"index":2463},{"krate":0,"index":2465},{"krate":0,"index":2467},{"krate":0,"index":2469},{"krate":0,"index":370},{"krate":0,"index":2471},{"krate":0,"index":2473},{"krate":0,"index":2475},{"krate":0,"index":2477},{"krate":0,"index":2479},{"krate":0,"index":2481},{"krate":0,"index":2483},{"krate":0,"index":2485},{"krate":0,"index":2487},{"krate":0,"index":2489},{"krate":0,"index":2491},{"krate":0,"index":2493},{"krate":0,"index":372},{"krate":0,"index":2495},{"krate":0,"index":2497},{"krate":0,"index":2499},{"krate":0,"index":2501},{"krate":0,"index":2503},{"krate":0,"index":2505},{"krate":0,"index":2507},{"krate":0,"index":2509},{"krate":0,"index":2511},{"krate":0,"index":2513},{"krate":0,"index":2515},{"krate":0,"index":2517},{"krate":0,"index":374},{"krate":0,"index":2519},{"krate":0,"index":2521},{"krate":0,"index":2523},{"krate":0,"index":2525},{"krate":0,"index":2527},{"krate":0,"index":2529},{"krate":0,"index":2531},{"krate":0,"index":2533},{"krate":0,"index":2535},{"krate":0,"index":2537},{"krate":0,"index":2539},{"krate":0,"index":2541},{"krate":0,"index":376},{"krate":0,"index":2543},{"krate":0,"index":2545},{"krate":0,"index":2547},{"krate":0,"index":2549},{"krate":0,"index":2551},{"krate":0,"index":2553},{"krate":0,"index":2555},{"krate":0,"index":2557},{"krate":0,"index":2559},{"krate":0,"index":2561},{"krate":0,"index":2563},{"krate":0,"index":2565},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":2567},{"krate":0,"index":2569},{"krate":0,"index":2571},{"krate":0,"index":2573},{"krate":0,"index":2575},{"krate":0,"index":2577},{"krate":0,"index":2579},{"krate":0,"index":2581},{"krate":0,"index":2583},{"krate":0,"index":2585},{"krate":0,"index":2587},{"krate":0,"index":2589},{"krate":0,"index":381},{"krate":0,"index":383},{"krate":0,"index":2591},{"krate":0,"index":2593},{"krate":0,"index":2595},{"krate":0,"index":2597},{"krate":0,"index":2599},{"krate":0,"index":2601},{"krate":0,"index":2603},{"krate":0,"index":2605},{"krate":0,"index":2607},{"krate":0,"index":2609},{"krate":0,"index":2611},{"krate":0,"index":2613},{"krate":0,"index":384},{"krate":0,"index":2615},{"krate":0,"index":2617},{"krate":0,"index":2619},{"krate":0,"index":2621},{"krate":0,"index":2623},{"krate":0,"index":2625},{"krate":0,"index":2627},{"krate":0,"index":2629},{"krate":0,"index":2631},{"krate":0,"index":2633},{"krate":0,"index":2635},{"krate":0,"index":2637}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":367},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":114463,"byte_end":114473,"line_start":5,"line_end":5,"column_start":11,"column_end":21},"name":"CheckedAdd","qualname":"::ops::checked::CheckedAdd","value":"CheckedAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":368}],"decl_id":null,"docs":" Performs addition that returns `None` instead of wrapping around on\n overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":114615,"byte_end":114626,"line_start":8,"line_end":8,"column_start":8,"column_end":19},"name":"checked_add","qualname":"::ops::checked::CheckedAdd::checked_add","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Adds two numbers, checking for overflow. If overflow happens, `None` is\n returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":370},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":115604,"byte_end":115614,"line_start":39,"line_end":39,"column_start":11,"column_end":21},"name":"CheckedSub","qualname":"::ops::checked::CheckedSub","value":"CheckedSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":371}],"decl_id":null,"docs":" Performs subtraction that returns `None` instead of wrapping around on underflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":115763,"byte_end":115774,"line_start":42,"line_end":42,"column_start":8,"column_end":19},"name":"checked_sub","qualname":"::ops::checked::CheckedSub::checked_sub","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":370},"children":[],"decl_id":null,"docs":" Subtracts two numbers, checking for underflow. If underflow happens,\n `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":372},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":116507,"byte_end":116517,"line_start":63,"line_end":63,"column_start":11,"column_end":21},"name":"CheckedMul","qualname":"::ops::checked::CheckedMul","value":"CheckedMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":373}],"decl_id":null,"docs":" Performs multiplication that returns `None` instead of wrapping around on underflow or\n overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":116691,"byte_end":116702,"line_start":66,"line_end":66,"column_start":8,"column_end":19},"name":"checked_mul","qualname":"::ops::checked::CheckedMul::checked_mul","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":372},"children":[],"decl_id":null,"docs":" Multiplies two numbers, checking for underflow or overflow. If underflow\n or overflow happens, `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":374},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":117475,"byte_end":117485,"line_start":87,"line_end":87,"column_start":11,"column_end":21},"name":"CheckedDiv","qualname":"::ops::checked::CheckedDiv","value":"CheckedDiv: Sized + Div<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":375}],"decl_id":null,"docs":" Performs division that returns `None` instead of panicking on division by zero and instead of\n wrapping around on underflow and overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":117665,"byte_end":117676,"line_start":90,"line_end":90,"column_start":8,"column_end":19},"name":"checked_div","qualname":"::ops::checked::CheckedDiv::checked_div","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":374},"children":[],"decl_id":null,"docs":" Divides two numbers, checking for underflow, overflow and division by\n zero. If any of that happens, `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":376},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":118462,"byte_end":118472,"line_start":111,"line_end":111,"column_start":11,"column_end":21},"name":"CheckedRem","qualname":"::ops::checked::CheckedRem","value":"CheckedRem: Sized + Rem<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":377}],"decl_id":null,"docs":" Performs an integral remainder that returns `None` instead of panicking on division by zero and\n instead of wrapping around on underflow and overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":119266,"byte_end":119277,"line_start":131,"line_end":131,"column_start":8,"column_end":19},"name":"checked_rem","qualname":"::ops::checked::CheckedRem::checked_rem","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":376},"children":[],"decl_id":null,"docs":" Finds the remainder of dividing two numbers, checking for underflow, overflow and division\n by zero. If any of that happens, `None` is returned.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":379},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":120241,"byte_end":120251,"line_start":162,"line_end":162,"column_start":11,"column_end":21},"name":"CheckedNeg","qualname":"::ops::checked::CheckedNeg","value":"CheckedNeg: Sized","parent":null,"children":[{"krate":0,"index":380}],"decl_id":null,"docs":" Performs negation that returns `None` if the result can't be represented.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":120901,"byte_end":120912,"line_start":179,"line_end":179,"column_start":8,"column_end":19},"name":"checked_neg","qualname":"::ops::checked::CheckedNeg::checked_neg","value":"fn (&self) -> Option<Self>","parent":{"krate":0,"index":379},"children":[],"decl_id":null,"docs":" Negates a number, returning `None` for results that can't be represented, like signed `MIN`\n values that can't be positive, or non-zero unsigned values that can't be negative.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":381},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":121690,"byte_end":121700,"line_start":200,"line_end":200,"column_start":11,"column_end":21},"name":"CheckedShl","qualname":"::ops::checked::CheckedShl","value":"CheckedShl: Sized + Shl<u32, Output = Self>","parent":null,"children":[{"krate":0,"index":382}],"decl_id":null,"docs":" Performs a left shift that returns `None` on shifts larger than\n the type width.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":122259,"byte_end":122270,"line_start":214,"line_end":214,"column_start":8,"column_end":19},"name":"checked_shl","qualname":"::ops::checked::CheckedShl::checked_shl","value":"fn (&self, rhs: u32) -> Option<Self>","parent":{"krate":0,"index":381},"children":[],"decl_id":null,"docs":" Checked shift left. Computes `self << rhs`, returning `None`\n if `rhs` is larger than or equal to the number of bits in `self`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":384},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":123332,"byte_end":123342,"line_start":246,"line_end":246,"column_start":11,"column_end":21},"name":"CheckedShr","qualname":"::ops::checked::CheckedShr","value":"CheckedShr: Sized + Shr<u32, Output = Self>","parent":null,"children":[{"krate":0,"index":385}],"decl_id":null,"docs":" Performs a right shift that returns `None` on shifts larger than\n the type width.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":123902,"byte_end":123913,"line_start":260,"line_end":260,"column_start":8,"column_end":19},"name":"checked_shr","qualname":"::ops::checked::CheckedShr::checked_shr","value":"fn (&self, rhs: u32) -> Option<Self>","parent":{"krate":0,"index":384},"children":[],"decl_id":null,"docs":" Checked shift right. Computes `self >> rhs`, returning `None`\n if `rhs` is larger than or equal to the number of bits in `self`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":386},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/inv.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"inv","qualname":"::ops::inv","value":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/inv.rs","parent":null,"children":[{"krate":0,"index":387},{"krate":0,"index":390},{"krate":0,"index":393},{"krate":0,"index":396},{"krate":0,"index":400}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":387},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/inv.rs","byte_start":124702,"byte_end":124705,"line_start":2,"line_end":2,"column_start":11,"column_end":14},"name":"Inv","qualname":"::ops::inv::Inv","value":"Inv","parent":null,"children":[{"krate":0,"index":388},{"krate":0,"index":389}],"decl_id":null,"docs":" Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":388},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/inv.rs","byte_start":124765,"byte_end":124771,"line_start":4,"line_end":4,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::inv::Inv::Output","value":"type Output;","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":" The result after applying the operator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/inv.rs","byte_start":125050,"byte_end":125053,"line_start":17,"line_end":17,"column_start":8,"column_end":11},"name":"inv","qualname":"::ops::inv::Inv::inv","value":"fn (self) -> Self::Output","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":" Returns the multiplicative inverse of `self`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":404},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/mul_add.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mul_add","qualname":"::ops::mul_add","value":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/mul_add.rs","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":410},{"krate":0,"index":414},{"krate":0,"index":417},{"krate":0,"index":420},{"krate":0,"index":2639},{"krate":0,"index":2642},{"krate":0,"index":2645},{"krate":0,"index":2648},{"krate":0,"index":2651},{"krate":0,"index":2654},{"krate":0,"index":2657},{"krate":0,"index":2660},{"krate":0,"index":2663},{"krate":0,"index":2666},{"krate":0,"index":2669},{"krate":0,"index":2672},{"krate":0,"index":421},{"krate":0,"index":423},{"krate":0,"index":425},{"krate":0,"index":2675},{"krate":0,"index":2677},{"krate":0,"index":2679},{"krate":0,"index":2681},{"krate":0,"index":2683},{"krate":0,"index":2685},{"krate":0,"index":2687},{"krate":0,"index":2689},{"krate":0,"index":2691},{"krate":0,"index":2693},{"krate":0,"index":2695},{"krate":0,"index":2697}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":405},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/mul_add.rs","byte_start":126170,"byte_end":126176,"line_start":23,"line_end":23,"column_start":11,"column_end":17},"name":"MulAdd","qualname":"::ops::mul_add::MulAdd","value":"MulAdd<A = Self, B = Self>","parent":null,"children":[{"krate":0,"index":408},{"krate":0,"index":409}],"decl_id":null,"docs":" Fused multiply-add. Computes `(self * a) + b` with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":408},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/mul_add.rs","byte_start":126274,"byte_end":126280,"line_start":25,"line_end":25,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::mul_add::MulAdd::Output","value":"type Output;","parent":{"krate":0,"index":405},"children":[],"decl_id":null,"docs":" The resulting type after applying the fused multiply-add.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/mul_add.rs","byte_start":126341,"byte_end":126348,"line_start":28,"line_end":28,"column_start":8,"column_end":15},"name":"mul_add","qualname":"::ops::mul_add::MulAdd::mul_add","value":"fn (self, a: A, b: B) -> Self::Output","parent":{"krate":0,"index":405},"children":[],"decl_id":null,"docs":" Performs the fused multiply-add operation.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":410},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/mul_add.rs","byte_start":126446,"byte_end":126458,"line_start":32,"line_end":32,"column_start":11,"column_end":23},"name":"MulAddAssign","qualname":"::ops::mul_add::MulAddAssign","value":"MulAddAssign<A = Self, B = Self>","parent":null,"children":[{"krate":0,"index":413}],"decl_id":null,"docs":" The fused multiply-add assignment operation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/mul_add.rs","byte_start":126539,"byte_end":126553,"line_start":34,"line_end":34,"column_start":8,"column_end":22},"name":"mul_add_assign","qualname":"::ops::mul_add::MulAddAssign::mul_add_assign","value":"fn (&mut self, a: A, b: B) -> ()","parent":{"krate":0,"index":410},"children":[],"decl_id":null,"docs":" Performs the fused multiply-add operation.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":426},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/saturating.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"saturating","qualname":"::ops::saturating","value":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/saturating.rs","parent":null,"children":[{"krate":0,"index":427},{"krate":0,"index":430},{"krate":0,"index":2699},{"krate":0,"index":2702},{"krate":0,"index":2705},{"krate":0,"index":2708},{"krate":0,"index":2711},{"krate":0,"index":2714},{"krate":0,"index":2717},{"krate":0,"index":2720},{"krate":0,"index":2723},{"krate":0,"index":2726},{"krate":0,"index":2729},{"krate":0,"index":2732}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":427},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/saturating.rs","byte_start":129334,"byte_end":129344,"line_start":2,"line_end":2,"column_start":11,"column_end":21},"name":"Saturating","qualname":"::ops::saturating::Saturating","value":"Saturating","parent":null,"children":[{"krate":0,"index":428},{"krate":0,"index":429}],"decl_id":null,"docs":" Saturating math operations\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/saturating.rs","byte_start":129470,"byte_end":129484,"line_start":5,"line_end":5,"column_start":8,"column_end":22},"name":"saturating_add","qualname":"::ops::saturating::Saturating::saturating_add","value":"fn (self, v: Self) -> Self","parent":{"krate":0,"index":427},"children":[],"decl_id":null,"docs":" Saturating addition operator.\n Returns a+b, saturating at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/saturating.rs","byte_start":129636,"byte_end":129650,"line_start":9,"line_end":9,"column_start":8,"column_end":22},"name":"saturating_sub","qualname":"::ops::saturating::Saturating::saturating_sub","value":"fn (self, v: Self) -> Self","parent":{"krate":0,"index":427},"children":[],"decl_id":null,"docs":" Saturating subtraction operator.\n Returns a-b, saturating at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":431},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wrapping","qualname":"::ops::wrapping","value":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","parent":null,"children":[{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":2735},{"krate":0,"index":2737},{"krate":0,"index":2739},{"krate":0,"index":2741},{"krate":0,"index":2743},{"krate":0,"index":2745},{"krate":0,"index":2747},{"krate":0,"index":2749},{"krate":0,"index":2751},{"krate":0,"index":2753},{"krate":0,"index":2755},{"krate":0,"index":2757},{"krate":0,"index":442},{"krate":0,"index":2759},{"krate":0,"index":2761},{"krate":0,"index":2763},{"krate":0,"index":2765},{"krate":0,"index":2767},{"krate":0,"index":2769},{"krate":0,"index":2771},{"krate":0,"index":2773},{"krate":0,"index":2775},{"krate":0,"index":2777},{"krate":0,"index":2779},{"krate":0,"index":2781},{"krate":0,"index":444},{"krate":0,"index":2783},{"krate":0,"index":2785},{"krate":0,"index":2787},{"krate":0,"index":2789},{"krate":0,"index":2791},{"krate":0,"index":2793},{"krate":0,"index":2795},{"krate":0,"index":2797},{"krate":0,"index":2799},{"krate":0,"index":2801},{"krate":0,"index":2803},{"krate":0,"index":2805},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":2807},{"krate":0,"index":2809},{"krate":0,"index":2811},{"krate":0,"index":2813},{"krate":0,"index":2815},{"krate":0,"index":2817},{"krate":0,"index":2819},{"krate":0,"index":2821},{"krate":0,"index":2823},{"krate":0,"index":2825},{"krate":0,"index":2827},{"krate":0,"index":2829},{"krate":0,"index":449},{"krate":0,"index":2831},{"krate":0,"index":2833},{"krate":0,"index":2835},{"krate":0,"index":2837},{"krate":0,"index":2839},{"krate":0,"index":2841},{"krate":0,"index":2843},{"krate":0,"index":2845},{"krate":0,"index":2847},{"krate":0,"index":2849},{"krate":0,"index":2851},{"krate":0,"index":2853},{"krate":0,"index":451},{"krate":0,"index":454},{"krate":0,"index":457},{"krate":0,"index":460},{"krate":0,"index":463}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":440},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":130858,"byte_end":130869,"line_start":24,"line_end":24,"column_start":11,"column_end":22},"name":"WrappingAdd","qualname":"::ops::wrapping::WrappingAdd","value":"WrappingAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":441}],"decl_id":null,"docs":" Performs addition that wraps around on overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":131028,"byte_end":131040,"line_start":27,"line_end":27,"column_start":8,"column_end":20},"name":"wrapping_add","qualname":"::ops::wrapping::WrappingAdd::wrapping_add","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":440},"children":[],"decl_id":null,"docs":" Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of\n the type.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":442},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":131752,"byte_end":131763,"line_start":47,"line_end":47,"column_start":11,"column_end":22},"name":"WrappingSub","qualname":"::ops::wrapping::WrappingSub","value":"WrappingSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":443}],"decl_id":null,"docs":" Performs subtraction that wraps around on overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":131925,"byte_end":131937,"line_start":50,"line_end":50,"column_start":8,"column_end":20},"name":"wrapping_sub","qualname":"::ops::wrapping::WrappingSub::wrapping_sub","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary\n of the type.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":444},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":132652,"byte_end":132663,"line_start":70,"line_end":70,"column_start":11,"column_end":22},"name":"WrappingMul","qualname":"::ops::wrapping::WrappingMul","value":"WrappingMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":445}],"decl_id":null,"docs":" Performs multiplication that wraps around on overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":132828,"byte_end":132840,"line_start":73,"line_end":73,"column_start":8,"column_end":20},"name":"wrapping_mul","qualname":"::ops::wrapping::WrappingMul::wrapping_mul","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":444},"children":[],"decl_id":null,"docs":" Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary\n of the type.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":447},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":133809,"byte_end":133820,"line_start":104,"line_end":104,"column_start":11,"column_end":22},"name":"WrappingShl","qualname":"::ops::wrapping::WrappingShl","value":"WrappingShl: Sized + Shl<usize, Output = Self>","parent":null,"children":[{"krate":0,"index":448}],"decl_id":null,"docs":" Performs a left shift that does not panic.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":134427,"byte_end":134439,"line_start":119,"line_end":119,"column_start":8,"column_end":20},"name":"wrapping_shl","qualname":"::ops::wrapping::WrappingShl::wrapping_shl","value":"fn (&self, rhs: u32) -> Self","parent":{"krate":0,"index":447},"children":[],"decl_id":null,"docs":" Panic-free bitwise shift-left; yields `self << mask(rhs)`,\n where `mask` removes any high order bits of `rhs` that would\n cause the shift to exceed the bitwidth of the type.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":449},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":135215,"byte_end":135226,"line_start":139,"line_end":139,"column_start":11,"column_end":22},"name":"WrappingShr","qualname":"::ops::wrapping::WrappingShr","value":"WrappingShr: Sized + Shr<usize, Output = Self>","parent":null,"children":[{"krate":0,"index":450}],"decl_id":null,"docs":" Performs a right shift that does not panic.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":135834,"byte_end":135846,"line_start":154,"line_end":154,"column_start":8,"column_end":20},"name":"wrapping_shr","qualname":"::ops::wrapping::WrappingShr::wrapping_shr","value":"fn (&self, rhs: u32) -> Self","parent":{"krate":0,"index":449},"children":[],"decl_id":null,"docs":" Panic-free bitwise shift-right; yields `self >> mask(rhs)`,\n where `mask` removes any high order bits of `rhs` that would\n cause the shift to exceed the bitwidth of the type.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":466},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/pow.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pow","qualname":"::pow","value":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/pow.rs","parent":null,"children":[{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":472},{"krate":0,"index":476},{"krate":0,"index":2855},{"krate":0,"index":2858},{"krate":0,"index":2862},{"krate":0,"index":2866},{"krate":0,"index":2871},{"krate":0,"index":2874},{"krate":0,"index":2878},{"krate":0,"index":2882},{"krate":0,"index":2887},{"krate":0,"index":2890},{"krate":0,"index":2894},{"krate":0,"index":2898},{"krate":0,"index":2903},{"krate":0,"index":2906},{"krate":0,"index":2910},{"krate":0,"index":2914},{"krate":0,"index":2919},{"krate":0,"index":2922},{"krate":0,"index":2926},{"krate":0,"index":2930},{"krate":0,"index":2935},{"krate":0,"index":2938},{"krate":0,"index":2942},{"krate":0,"index":2946},{"krate":0,"index":2951},{"krate":0,"index":2954},{"krate":0,"index":2958},{"krate":0,"index":2962},{"krate":0,"index":2967},{"krate":0,"index":2970},{"krate":0,"index":2974},{"krate":0,"index":2978},{"krate":0,"index":2983},{"krate":0,"index":2986},{"krate":0,"index":2990},{"krate":0,"index":2994},{"krate":0,"index":2999},{"krate":0,"index":3002},{"krate":0,"index":3006},{"krate":0,"index":3010},{"krate":0,"index":3015},{"krate":0,"index":3018},{"krate":0,"index":3022},{"krate":0,"index":3026},{"krate":0,"index":3031},{"krate":0,"index":3034},{"krate":0,"index":3038},{"krate":0,"index":3042},{"krate":0,"index":3047},{"krate":0,"index":3050},{"krate":0,"index":3054},{"krate":0,"index":3058},{"krate":0,"index":3063},{"krate":0,"index":3066},{"krate":0,"index":3070},{"krate":0,"index":3074},{"krate":0,"index":3079},{"krate":0,"index":3082},{"krate":0,"index":3086},{"krate":0,"index":3090},{"krate":0,"index":3095},{"krate":0,"index":3098},{"krate":0,"index":3102},{"krate":0,"index":3106},{"krate":0,"index":3111},{"krate":0,"index":3114},{"krate":0,"index":3118},{"krate":0,"index":3122},{"krate":0,"index":3127},{"krate":0,"index":3130},{"krate":0,"index":3134},{"krate":0,"index":3138},{"krate":0,"index":3143},{"krate":0,"index":3146},{"krate":0,"index":3150},{"krate":0,"index":3154},{"krate":0,"index":3159},{"krate":0,"index":3162},{"krate":0,"index":3166},{"krate":0,"index":3170},{"krate":0,"index":3175},{"krate":0,"index":3178},{"krate":0,"index":3182},{"krate":0,"index":3186},{"krate":0,"index":3191},{"krate":0,"index":3194},{"krate":0,"index":3198},{"krate":0,"index":3202},{"krate":0,"index":3207},{"krate":0,"index":3210},{"krate":0,"index":3214},{"krate":0,"index":3218},{"krate":0,"index":3223},{"krate":0,"index":3226},{"krate":0,"index":3230},{"krate":0,"index":3234},{"krate":0,"index":3239},{"krate":0,"index":3242},{"krate":0,"index":3246},{"krate":0,"index":3250},{"krate":0,"index":3255},{"krate":0,"index":3258},{"krate":0,"index":3262},{"krate":0,"index":3266},{"krate":0,"index":3271},{"krate":0,"index":3274},{"krate":0,"index":3278},{"krate":0,"index":3282},{"krate":0,"index":3287},{"krate":0,"index":3290},{"krate":0,"index":3294},{"krate":0,"index":3298},{"krate":0,"index":3303},{"krate":0,"index":3306},{"krate":0,"index":3310},{"krate":0,"index":3314},{"krate":0,"index":3319},{"krate":0,"index":3322},{"krate":0,"index":3326},{"krate":0,"index":3330},{"krate":0,"index":3335},{"krate":0,"index":3338},{"krate":0,"index":3342},{"krate":0,"index":3346},{"krate":0,"index":3351},{"krate":0,"index":3354},{"krate":0,"index":3358},{"krate":0,"index":3362},{"krate":0,"index":3367},{"krate":0,"index":3370},{"krate":0,"index":3374},{"krate":0,"index":3378},{"krate":0,"index":3383},{"krate":0,"index":3386},{"krate":0,"index":3390},{"krate":0,"index":3394},{"krate":0,"index":3399},{"krate":0,"index":3402},{"krate":0,"index":3406},{"krate":0,"index":3410},{"krate":0,"index":3415},{"krate":0,"index":3418},{"krate":0,"index":3422},{"krate":0,"index":3426},{"krate":0,"index":3431},{"krate":0,"index":3434},{"krate":0,"index":3438},{"krate":0,"index":3442},{"krate":0,"index":3447},{"krate":0,"index":3450},{"krate":0,"index":3454},{"krate":0,"index":3458},{"krate":0,"index":3463},{"krate":0,"index":3466},{"krate":0,"index":3470},{"krate":0,"index":3474},{"krate":0,"index":3479},{"krate":0,"index":3482},{"krate":0,"index":3486},{"krate":0,"index":3490},{"krate":0,"index":3495},{"krate":0,"index":3498},{"krate":0,"index":3502},{"krate":0,"index":3506},{"krate":0,"index":3511},{"krate":0,"index":3514},{"krate":0,"index":3518},{"krate":0,"index":3522},{"krate":0,"index":3527},{"krate":0,"index":3530},{"krate":0,"index":3534},{"krate":0,"index":3538},{"krate":0,"index":3543},{"krate":0,"index":3546},{"krate":0,"index":3550},{"krate":0,"index":3554},{"krate":0,"index":3559},{"krate":0,"index":3562},{"krate":0,"index":3566},{"krate":0,"index":3570},{"krate":0,"index":3575},{"krate":0,"index":3578},{"krate":0,"index":3582},{"krate":0,"index":3586},{"krate":0,"index":3591},{"krate":0,"index":3594},{"krate":0,"index":3598},{"krate":0,"index":3602},{"krate":0,"index":3607},{"krate":0,"index":3610},{"krate":0,"index":3614},{"krate":0,"index":3618},{"krate":0,"index":3623},{"krate":0,"index":3626},{"krate":0,"index":3630},{"krate":0,"index":3634},{"krate":0,"index":3639},{"krate":0,"index":3642},{"krate":0,"index":3646},{"krate":0,"index":3650},{"krate":0,"index":3655},{"krate":0,"index":3658},{"krate":0,"index":3662},{"krate":0,"index":3666},{"krate":0,"index":3671},{"krate":0,"index":3674},{"krate":0,"index":3678},{"krate":0,"index":3682},{"krate":0,"index":3687},{"krate":0,"index":3690},{"krate":0,"index":3694},{"krate":0,"index":3698},{"krate":0,"index":3703},{"krate":0,"index":3706},{"krate":0,"index":3710},{"krate":0,"index":3714},{"krate":0,"index":3719},{"krate":0,"index":3722},{"krate":0,"index":3726},{"krate":0,"index":3730},{"krate":0,"index":3735},{"krate":0,"index":3738},{"krate":0,"index":3742},{"krate":0,"index":3746},{"krate":0,"index":3751},{"krate":0,"index":3754},{"krate":0,"index":3758},{"krate":0,"index":3762},{"krate":0,"index":3767},{"krate":0,"index":3770},{"krate":0,"index":3774},{"krate":0,"index":3778},{"krate":0,"index":3783},{"krate":0,"index":3786},{"krate":0,"index":3790},{"krate":0,"index":3794},{"krate":0,"index":3799},{"krate":0,"index":3802},{"krate":0,"index":3806},{"krate":0,"index":3810},{"krate":0,"index":3815},{"krate":0,"index":3818},{"krate":0,"index":3822},{"krate":0,"index":3826},{"krate":0,"index":3831},{"krate":0,"index":3834},{"krate":0,"index":3838},{"krate":0,"index":3842},{"krate":0,"index":3847},{"krate":0,"index":3850},{"krate":0,"index":3854},{"krate":0,"index":3858},{"krate":0,"index":3863},{"krate":0,"index":3866},{"krate":0,"index":3870},{"krate":0,"index":3874},{"krate":0,"index":3879},{"krate":0,"index":3882},{"krate":0,"index":3886},{"krate":0,"index":3890},{"krate":0,"index":3895},{"krate":0,"index":3898},{"krate":0,"index":3902},{"krate":0,"index":3906},{"krate":0,"index":3911},{"krate":0,"index":3914},{"krate":0,"index":3918},{"krate":0,"index":3922},{"krate":0,"index":3927},{"krate":0,"index":3930},{"krate":0,"index":3934},{"krate":0,"index":3938},{"krate":0,"index":3943},{"krate":0,"index":3946},{"krate":0,"index":3950},{"krate":0,"index":3954},{"krate":0,"index":3959},{"krate":0,"index":3962},{"krate":0,"index":3966},{"krate":0,"index":3970},{"krate":0,"index":3975},{"krate":0,"index":3978},{"krate":0,"index":3982},{"krate":0,"index":3986},{"krate":0,"index":3991},{"krate":0,"index":3994},{"krate":0,"index":3998},{"krate":0,"index":4002},{"krate":0,"index":477},{"krate":0,"index":479},{"krate":0,"index":481}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":472},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/pow.rs","byte_start":139493,"byte_end":139496,"line_start":6,"line_end":6,"column_start":11,"column_end":14},"name":"Pow","qualname":"::pow::Pow","value":"Pow<RHS>","parent":null,"children":[{"krate":0,"index":474},{"krate":0,"index":475}],"decl_id":null,"docs":" Binary operator for raising a value to a power.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":474},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/pow.rs","byte_start":139561,"byte_end":139567,"line_start":8,"line_end":8,"column_start":10,"column_end":16},"name":"Output","qualname":"::pow::Pow::Output","value":"type Output;","parent":{"krate":0,"index":472},"children":[],"decl_id":null,"docs":" The result after applying the operator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/pow.rs","byte_start":139756,"byte_end":139759,"line_start":18,"line_end":18,"column_start":8,"column_end":11},"name":"pow","qualname":"::pow::Pow::pow","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":472},"children":[],"decl_id":null,"docs":" Returns `self` to the power `rhs`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":479},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/pow.rs","byte_start":144406,"byte_end":144409,"line_start":188,"line_end":188,"column_start":8,"column_end":11},"name":"pow","qualname":"::pow::pow","value":"fn <T> (mut base: T, mut exp: usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Raises a value to the power of exp, using exponentiation by squaring.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/pow.rs","byte_start":144389,"byte_end":144398,"line_start":187,"line_end":187,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":481},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/pow.rs","byte_start":145416,"byte_end":145427,"line_start":229,"line_end":229,"column_start":8,"column_end":19},"name":"checked_pow","qualname":"::pow::checked_pow","value":"fn <T> (mut base: T, mut exp: usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Raises a value to the power of exp, returning `None` if an overflow occurred.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/pow.rs","byte_start":145399,"byte_end":145408,"line_start":228,"line_end":228,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":484},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"real","qualname":"::real","value":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","parent":null,"children":[{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":490},{"krate":0,"index":538}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1786,"byte_end":1809,"line_start":56,"line_end":56,"column_start":1,"column_end":24}}]},{"kind":"Trait","id":{"krate":0,"index":490},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":146683,"byte_end":146687,"line_start":15,"line_end":15,"column_start":11,"column_end":15},"name":"Real","qualname":"::real::Real","value":"Real: Num + Copy + NumCast + PartialOrd + Neg<Output = Self>","parent":null,"children":[{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537}],"decl_id":null,"docs":" A trait for real number types that do not necessarily have\n floating-point-specific characteristics such as NaN and infinity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":147004,"byte_end":147013,"line_start":26,"line_end":26,"column_start":8,"column_end":17},"name":"min_value","qualname":"::real::Real::min_value","value":"fn () -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Returns the smallest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":147316,"byte_end":147334,"line_start":38,"line_end":38,"column_start":8,"column_end":26},"name":"min_positive_value","qualname":"::real::Real::min_positive_value","value":"fn () -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Returns the smallest positive, normalized value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":147715,"byte_end":147722,"line_start":55,"line_end":55,"column_start":8,"column_end":15},"name":"epsilon","qualname":"::real::Real::epsilon","value":"fn () -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Returns epsilon, a small positive value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":147984,"byte_end":147993,"line_start":66,"line_end":66,"column_start":8,"column_end":17},"name":"max_value","qualname":"::real::Real::max_value","value":"fn () -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Returns the largest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":148280,"byte_end":148285,"line_start":79,"line_end":79,"column_start":8,"column_end":13},"name":"floor","qualname":"::real::Real::floor","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":148578,"byte_end":148582,"line_start":92,"line_end":92,"column_start":8,"column_end":12},"name":"ceil","qualname":"::real::Real::ceil","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":148901,"byte_end":148906,"line_start":106,"line_end":106,"column_start":8,"column_end":13},"name":"round","qualname":"::real::Real::round","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Returns the nearest integer to a number. Round half-way cases away from\n `0.0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":149175,"byte_end":149180,"line_start":119,"line_end":119,"column_start":8,"column_end":13},"name":"trunc","qualname":"::real::Real::trunc","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Return the integer part of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":149581,"byte_end":149586,"line_start":134,"line_end":134,"column_start":8,"column_end":13},"name":"fract","qualname":"::real::Real::fract","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Returns the fractional part of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":150141,"byte_end":150144,"line_start":154,"line_end":154,"column_start":8,"column_end":11},"name":"abs","qualname":"::real::Real::abs","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Computes the absolute value of `self`. Returns `Float::nan()` if the\n number is `Float::nan()`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":150716,"byte_end":150722,"line_start":173,"line_end":173,"column_start":8,"column_end":14},"name":"signum","qualname":"::real::Real::signum","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":151203,"byte_end":151219,"line_start":191,"line_end":191,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::real::Real::is_sign_positive","value":"fn (self) -> bool","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is positive, including `+0.0`,\n `Float::infinity()`, and with newer versions of Rust `f64::NAN`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":151696,"byte_end":151712,"line_start":209,"line_end":209,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::real::Real::is_sign_negative","value":"fn (self) -> bool","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is negative, including `-0.0`,\n `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":152329,"byte_end":152336,"line_start":229,"line_end":229,"column_start":8,"column_end":15},"name":"mul_add","qualname":"::real::Real::mul_add","value":"fn (self, a: Self, b: Self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Fused multiply-add. Computes `(self * a) + b` with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":152640,"byte_end":152645,"line_start":241,"line_end":241,"column_start":8,"column_end":13},"name":"recip","qualname":"::real::Real::recip","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Take the reciprocal (inverse) of a number, `1/x`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":152987,"byte_end":152991,"line_start":255,"line_end":255,"column_start":8,"column_end":12},"name":"powi","qualname":"::real::Real::powi","value":"fn (self, n: i32) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Raise a number to an integer power.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":153272,"byte_end":153276,"line_start":267,"line_end":267,"column_start":8,"column_end":12},"name":"powf","qualname":"::real::Real::powf","value":"fn (self, n: Self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Raise a number to a real number power.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":153868,"byte_end":153872,"line_start":288,"line_end":288,"column_start":8,"column_end":12},"name":"sqrt","qualname":"::real::Real::sqrt","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Take the square root of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":154227,"byte_end":154230,"line_start":304,"line_end":304,"column_start":8,"column_end":11},"name":"exp","qualname":"::real::Real::exp","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Returns `e^(self)`, (the exponential function).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":154513,"byte_end":154517,"line_start":318,"line_end":318,"column_start":8,"column_end":12},"name":"exp2","qualname":"::real::Real::exp2","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Returns `2^(self)`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":155006,"byte_end":155008,"line_start":338,"line_end":338,"column_start":8,"column_end":10},"name":"ln","qualname":"::real::Real::ln","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Returns the natural logarithm of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":155660,"byte_end":155663,"line_start":361,"line_end":361,"column_start":8,"column_end":11},"name":"log","qualname":"::real::Real::log","value":"fn (self, base: Self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Returns the logarithm of the number with respect to an arbitrary base.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":156127,"byte_end":156131,"line_start":379,"line_end":379,"column_start":8,"column_end":12},"name":"log2","qualname":"::real::Real::log2","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Returns the base 2 logarithm of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":156596,"byte_end":156601,"line_start":398,"line_end":398,"column_start":8,"column_end":13},"name":"log10","qualname":"::real::Real::log10","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Returns the base 10 logarithm of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":156886,"byte_end":156896,"line_start":411,"line_end":411,"column_start":8,"column_end":18},"name":"to_degrees","qualname":"::real::Real::to_degrees","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Converts radians to degrees.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":157185,"byte_end":157195,"line_start":424,"line_end":424,"column_start":8,"column_end":18},"name":"to_radians","qualname":"::real::Real::to_radians","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Converts degrees to radians.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":157426,"byte_end":157429,"line_start":436,"line_end":436,"column_start":8,"column_end":11},"name":"max","qualname":"::real::Real::max","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":157673,"byte_end":157676,"line_start":448,"line_end":448,"column_start":8,"column_end":11},"name":"min","qualname":"::real::Real::min","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":158179,"byte_end":158186,"line_start":467,"line_end":467,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::real::Real::abs_sub","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":158499,"byte_end":158503,"line_start":481,"line_end":481,"column_start":8,"column_end":12},"name":"cbrt","qualname":"::real::Real::cbrt","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Take the cubic root of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":158926,"byte_end":158931,"line_start":497,"line_end":497,"column_start":8,"column_end":13},"name":"hypot","qualname":"::real::Real::hypot","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Calculate the length of the hypotenuse of a right-angle triangle given\n legs of length `x` and `y`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":159264,"byte_end":159267,"line_start":511,"line_end":511,"column_start":8,"column_end":11},"name":"sin","qualname":"::real::Real::sin","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Computes the sine of a number (in radians).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":159589,"byte_end":159592,"line_start":525,"line_end":525,"column_start":8,"column_end":11},"name":"cos","qualname":"::real::Real::cos","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Computes the cosine of a number (in radians).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":159907,"byte_end":159910,"line_start":538,"line_end":538,"column_start":8,"column_end":11},"name":"tan","qualname":"::real::Real::tan","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Computes the tangent of a number (in radians).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":160567,"byte_end":160571,"line_start":560,"line_end":560,"column_start":8,"column_end":12},"name":"asin","qualname":"::real::Real::asin","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Computes the arcsine of a number. Return value is in radians in\n the range [-pi/2, pi/2] or NaN if the number is outside the range\n [-1, 1].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":161224,"byte_end":161228,"line_start":582,"line_end":582,"column_start":8,"column_end":12},"name":"acos","qualname":"::real::Real::acos","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Computes the arccosine of a number. Return value is in radians in\n the range [0, pi] or NaN if the number is outside the range\n [-1, 1].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":161597,"byte_end":161601,"line_start":597,"line_end":597,"column_start":8,"column_end":12},"name":"atan","qualname":"::real::Real::atan","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Computes the arctangent of a number. Return value is in radians in the\n range [-pi/2, pi/2];","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":162487,"byte_end":162492,"line_start":626,"line_end":626,"column_start":8,"column_end":13},"name":"atan2","qualname":"::real::Real::atan2","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":163011,"byte_end":163018,"line_start":644,"line_end":644,"column_start":8,"column_end":15},"name":"sin_cos","qualname":"::real::Real::sin_cos","value":"fn (self) -> (Self, Self)","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Simultaneously computes the sine and cosine of the number, `x`. Returns\n `(sin(x), cos(x))`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":163391,"byte_end":163397,"line_start":659,"line_end":659,"column_start":8,"column_end":14},"name":"exp_m1","qualname":"::real::Real::exp_m1","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Returns `e^(self) - 1` in a way that is accurate even if the\n number is close to zero.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":163975,"byte_end":163980,"line_start":680,"line_end":680,"column_start":8,"column_end":13},"name":"ln_1p","qualname":"::real::Real::ln_1p","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Returns `ln(1+n)` (natural logarithm) more accurately than if\n the operations were performed separately.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":164405,"byte_end":164409,"line_start":698,"line_end":698,"column_start":8,"column_end":12},"name":"sinh","qualname":"::real::Real::sinh","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Hyperbolic sine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":164850,"byte_end":164854,"line_start":716,"line_end":716,"column_start":8,"column_end":12},"name":"cosh","qualname":"::real::Real::cosh","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Hyperbolic cosine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":165315,"byte_end":165319,"line_start":734,"line_end":734,"column_start":8,"column_end":12},"name":"tanh","qualname":"::real::Real::tanh","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Hyperbolic tangent function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":165619,"byte_end":165624,"line_start":748,"line_end":748,"column_start":8,"column_end":13},"name":"asinh","qualname":"::real::Real::asinh","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Inverse hyperbolic sine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":165926,"byte_end":165931,"line_start":762,"line_end":762,"column_start":8,"column_end":13},"name":"acosh","qualname":"::real::Real::acosh","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Inverse hyperbolic cosine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":166267,"byte_end":166272,"line_start":777,"line_end":777,"column_start":8,"column_end":13},"name":"atanh","qualname":"::real::Real::atanh","value":"fn (self) -> Self","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" Inverse hyperbolic tangent function.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":540},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/sign.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sign","qualname":"::sign","value":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/sign.rs","parent":null,"children":[{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":551},{"krate":0,"index":4262},{"krate":0,"index":4268},{"krate":0,"index":4274},{"krate":0,"index":4280},{"krate":0,"index":4286},{"krate":0,"index":4292},{"krate":0,"index":552},{"krate":0,"index":559},{"krate":0,"index":4298},{"krate":0,"index":4304},{"krate":0,"index":560},{"krate":0,"index":562},{"krate":0,"index":564},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":4310},{"krate":0,"index":4311},{"krate":0,"index":4312},{"krate":0,"index":4313},{"krate":0,"index":4314},{"krate":0,"index":4315},{"krate":0,"index":568}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":545},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/sign.rs","byte_start":168356,"byte_end":168362,"line_start":8,"line_end":8,"column_start":11,"column_end":17},"name":"Signed","qualname":"::sign::Signed","value":"Signed: Sized + Num + Neg<Output = Self>","parent":null,"children":[{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550}],"decl_id":null,"docs":" Useful functions for signed numbers (i.e. numbers that can be negative).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/sign.rs","byte_start":168615,"byte_end":168618,"line_start":14,"line_end":14,"column_start":8,"column_end":11},"name":"abs","qualname":"::sign::Signed::abs","value":"fn (&self) -> Self","parent":{"krate":0,"index":545},"children":[],"decl_id":null,"docs":" Computes the absolute value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/sign.rs","byte_start":168843,"byte_end":168850,"line_start":20,"line_end":20,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::sign::Signed::abs_sub","value":"fn (&self, other: &Self) -> Self","parent":{"krate":0,"index":545},"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/sign.rs","byte_start":169308,"byte_end":169314,"line_start":35,"line_end":35,"column_start":8,"column_end":14},"name":"signum","qualname":"::sign::Signed::signum","value":"fn (&self) -> Self","parent":{"krate":0,"index":545},"children":[],"decl_id":null,"docs":" Returns the sign of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/sign.rs","byte_start":169431,"byte_end":169442,"line_start":38,"line_end":38,"column_start":8,"column_end":19},"name":"is_positive","qualname":"::sign::Signed::is_positive","value":"fn (&self) -> bool","parent":{"krate":0,"index":545},"children":[],"decl_id":null,"docs":" Returns true if the number is positive and false if the number is zero or negative.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/sign.rs","byte_start":169559,"byte_end":169570,"line_start":41,"line_end":41,"column_start":8,"column_end":19},"name":"is_negative","qualname":"::sign::Signed::is_negative","value":"fn (&self) -> bool","parent":{"krate":0,"index":545},"children":[],"decl_id":null,"docs":" Returns true if the number is negative and false if the number is zero or positive.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":560},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/sign.rs","byte_start":172764,"byte_end":172767,"line_start":165,"line_end":165,"column_start":8,"column_end":11},"name":"abs","qualname":"::sign::abs","value":"fn <T> (value: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute value.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/sign.rs","byte_start":172739,"byte_end":172756,"line_start":164,"line_end":164,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":562},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/sign.rs","byte_start":173004,"byte_end":173011,"line_start":174,"line_end":174,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::sign::abs_sub","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/sign.rs","byte_start":172979,"byte_end":172996,"line_start":173,"line_end":173,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":564},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/sign.rs","byte_start":173455,"byte_end":173461,"line_start":192,"line_end":192,"column_start":8,"column_end":14},"name":"signum","qualname":"::sign::signum","value":"fn <T> (value: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the sign of the number.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/sign.rs","byte_start":173430,"byte_end":173447,"line_start":191,"line_end":191,"column_start":1,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":566},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/sign.rs","byte_start":173570,"byte_end":173578,"line_start":197,"line_end":197,"column_start":11,"column_end":19},"name":"Unsigned","qualname":"::sign::Unsigned","value":"Unsigned: Num","parent":null,"children":[],"decl_id":null,"docs":" A trait for values which cannot be negative\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":570},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1982,"byte_end":1985,"line_start":62,"line_end":62,"column_start":11,"column_end":14},"name":"Num","qualname":"::Num","value":"Num: PartialEq + Zero + One + NumOps","parent":null,"children":[{"krate":0,"index":571},{"krate":0,"index":572}],"decl_id":null,"docs":" The base trait for numeric types, covering `0` and `1` values,\n comparisons, basic numeric operations, and string conversion.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":571},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":2030,"byte_end":2045,"line_start":63,"line_end":63,"column_start":10,"column_end":25},"name":"FromStrRadixErr","qualname":"::Num::FromStrRadixErr","value":"type FromStrRadixErr;","parent":{"krate":0,"index":570},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":2403,"byte_end":2417,"line_start":78,"line_end":78,"column_start":8,"column_end":22},"name":"from_str_radix","qualname":"::Num::from_str_radix","value":"fn (str: &str, radix: u32) -> Result<Self, Self::FromStrRadixErr>","parent":{"krate":0,"index":570},"children":[],"decl_id":null,"docs":" Convert from a string and radix <= 36.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":573},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":2639,"byte_end":2645,"line_start":84,"line_end":84,"column_start":11,"column_end":17},"name":"NumOps","qualname":"::NumOps","value":"NumOps<Rhs = Self, Output = Self>: Add<Rhs, Output = Output> + Sub<Rhs, Output = Output> + Mul<Rhs, Output =\nOutput> + Div<Rhs, Output = Output> + Rem<Rhs, Output = Output>","parent":null,"children":[],"decl_id":null,"docs":" The trait for types implementing basic numeric operations","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":580},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":3279,"byte_end":3285,"line_start":106,"line_end":106,"column_start":11,"column_end":17},"name":"NumRef","qualname":"::NumRef","value":"NumRef: Num + for<'r> NumOps<&'r Self>","parent":null,"children":[],"decl_id":null,"docs":" The trait for `Num` types which also implement numeric operations taking\n the second operand by reference.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":585},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":3604,"byte_end":3610,"line_start":113,"line_end":113,"column_start":11,"column_end":17},"name":"RefNum","qualname":"::RefNum","value":"RefNum<Base>: NumOps<Base, Base> + for<'r> NumOps<&'r Base, Base>","parent":null,"children":[],"decl_id":null,"docs":" The trait for references which implement numeric operations, taking the\n second operand either by value or by reference.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":592},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":3943,"byte_end":3955,"line_start":119,"line_end":119,"column_start":11,"column_end":23},"name":"NumAssignOps","qualname":"::NumAssignOps","value":"NumAssignOps<Rhs = Self>: AddAssign<Rhs> + SubAssign<Rhs> + MulAssign<Rhs> + DivAssign<Rhs> +\nRemAssign<Rhs>","parent":null,"children":[],"decl_id":null,"docs":" The trait for types implementing numeric assignment operators (like `+=`).","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":597},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":4365,"byte_end":4374,"line_start":132,"line_end":132,"column_start":11,"column_end":20},"name":"NumAssign","qualname":"::NumAssign","value":"NumAssign: Num + NumAssignOps","parent":null,"children":[],"decl_id":null,"docs":" The trait for `Num` types which also implement assignment operators.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":600},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":4670,"byte_end":4682,"line_start":139,"line_end":139,"column_start":11,"column_end":23},"name":"NumAssignRef","qualname":"::NumAssignRef","value":"NumAssignRef: NumAssign + for<'r> NumAssignOps<&'r Self>","parent":null,"children":[],"decl_id":null,"docs":" The trait for `NumAssign` types which also implement assignment operations\n taking the second operand by reference.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4353},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":5804,"byte_end":5809,"line_start":175,"line_end":175,"column_start":5,"column_end":10},"name":"Empty","qualname":"::FloatErrorKind::Empty","value":"FloatErrorKind::Empty","parent":{"krate":0,"index":4352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4355},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":5815,"byte_end":5822,"line_start":176,"line_end":176,"column_start":5,"column_end":12},"name":"Invalid","qualname":"::FloatErrorKind::Invalid","value":"FloatErrorKind::Invalid","parent":{"krate":0,"index":4352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4352},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":5783,"byte_end":5797,"line_start":174,"line_end":174,"column_start":10,"column_end":24},"name":"FloatErrorKind","qualname":"::FloatErrorKind","value":"FloatErrorKind::{Empty, Invalid}","parent":null,"children":[{"krate":0,"index":4353},{"krate":0,"index":4355}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4359},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":5980,"byte_end":5995,"line_start":181,"line_end":181,"column_start":12,"column_end":27},"name":"ParseFloatError","qualname":"::ParseFloatError","value":"ParseFloatError { kind }","parent":null,"children":[{"krate":0,"index":4360}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4360},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":6006,"byte_end":6010,"line_start":182,"line_end":182,"column_start":9,"column_end":13},"name":"kind","qualname":"::ParseFloatError::kind","value":"FloatErrorKind","parent":{"krate":0,"index":4359},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":613},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":14061,"byte_end":14066,"line_start":363,"line_end":363,"column_start":8,"column_end":13},"name":"clamp","qualname":"::clamp","value":"fn <T> (input: T, min: T, max: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" A value bounded by a minimum and a maximum","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":14044,"byte_end":14053,"line_start":362,"line_end":362,"column_start":1,"column_end":10}}]}],"impls":[{"id":12,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/bounds.rs","byte_start":19038,"byte_end":19046,"line_start":49,"line_end":49,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":39135,"byte_end":39143,"line_start":568,"line_end":568,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1422},{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1427},{"krate":0,"index":1428},{"krate":0,"index":1429},{"krate":0,"index":1430},{"krate":0,"index":1431},{"krate":0,"index":1432},{"krate":0,"index":1433},{"krate":0,"index":1434},{"krate":0,"index":1435}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":39911,"byte_end":39919,"line_start":601,"line_end":601,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1436},{"krate":0,"index":1437},{"krate":0,"index":1438},{"krate":0,"index":1439},{"krate":0,"index":1440},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1447},{"krate":0,"index":1448},{"krate":0,"index":1449}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":41827,"byte_end":41835,"line_start":677,"line_end":677,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/identities.rs","byte_start":99866,"byte_end":99874,"line_start":66,"line_end":66,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/identities.rs","byte_start":101851,"byte_end":101859,"line_start":155,"line_end":155,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":510,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":136660,"byte_end":136668,"line_start":174,"line_end":174,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":511,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":136860,"byte_end":136868,"line_start":182,"line_end":182,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":512,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":137060,"byte_end":137068,"line_start":190,"line_end":190,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":513,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":137260,"byte_end":137268,"line_start":198,"line_end":198,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":514,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":137466,"byte_end":137474,"line_start":206,"line_end":206,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":685,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":166315,"byte_end":166316,"line_start":780,"line_end":780,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4215},{"krate":0,"index":4216},{"krate":0,"index":4217},{"krate":0,"index":4218},{"krate":0,"index":4219},{"krate":0,"index":4220},{"krate":0,"index":4221},{"krate":0,"index":4222},{"krate":0,"index":4223},{"krate":0,"index":4224},{"krate":0,"index":4225},{"krate":0,"index":4226},{"krate":0,"index":4227},{"krate":0,"index":4228},{"krate":0,"index":4229},{"krate":0,"index":4230},{"krate":0,"index":4231},{"krate":0,"index":4232},{"krate":0,"index":4233},{"krate":0,"index":4234},{"krate":0,"index":4235},{"krate":0,"index":4236},{"krate":0,"index":4237},{"krate":0,"index":4238},{"krate":0,"index":4239},{"krate":0,"index":4240},{"krate":0,"index":4241},{"krate":0,"index":4242},{"krate":0,"index":4243},{"krate":0,"index":4244},{"krate":0,"index":4245},{"krate":0,"index":4246},{"krate":0,"index":4247},{"krate":0,"index":4248},{"krate":0,"index":4249},{"krate":0,"index":4250},{"krate":0,"index":4251},{"krate":0,"index":4252},{"krate":0,"index":4253},{"krate":0,"index":4254},{"krate":0,"index":4255},{"krate":0,"index":4256},{"krate":0,"index":4257},{"krate":0,"index":4258},{"krate":0,"index":4259},{"krate":0,"index":4260},{"krate":0,"index":4261}],"docs":"","sig":null,"attributes":[]},{"id":692,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/sign.rs","byte_start":170452,"byte_end":170460,"line_start":80,"line_end":80,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558}],"docs":"","sig":null,"attributes":[]},{"id":701,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/sign.rs","byte_start":173840,"byte_end":173848,"line_start":209,"line_end":209,"column_start":32,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":702,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":2882,"byte_end":2883,"line_start":93,"line_end":93,"column_start":46,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":703,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":3340,"byte_end":3341,"line_start":107,"line_end":107,"column_start":20,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":704,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":3704,"byte_end":3705,"line_start":114,"line_end":114,"column_start":32,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":705,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":4096,"byte_end":4097,"line_start":124,"line_end":124,"column_start":36,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":706,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":4420,"byte_end":4421,"line_start":133,"line_end":133,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":707,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":4755,"byte_end":4756,"line_start":140,"line_end":140,"column_start":26,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":720,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":5355,"byte_end":5363,"line_start":159,"line_end":159,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":721,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":6053,"byte_end":6068,"line_start":185,"line_end":185,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1690,"byte_end":1696,"line_start":49,"line_end":49,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":76}},{"kind":"Mod","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1706,"byte_end":1710,"line_start":50,"line_end":50,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":107}},{"kind":"Mod","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1720,"byte_end":1725,"line_start":51,"line_end":51,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":191}},{"kind":"Mod","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1735,"byte_end":1745,"line_start":52,"line_end":52,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":297}},{"kind":"Mod","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1755,"byte_end":1758,"line_start":53,"line_end":53,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":325}},{"kind":"Mod","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1768,"byte_end":1771,"line_start":54,"line_end":54,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":357}},{"kind":"Mod","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/mod.rs","byte_start":114236,"byte_end":114243,"line_start":1,"line_end":1,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":358}},{"kind":"Mod","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/mod.rs","byte_start":114253,"byte_end":114256,"line_start":2,"line_end":2,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":386}},{"kind":"Mod","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/mod.rs","byte_start":114266,"byte_end":114273,"line_start":3,"line_end":3,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":404}},{"kind":"Mod","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/mod.rs","byte_start":114283,"byte_end":114293,"line_start":4,"line_end":4,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":426}},{"kind":"Mod","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/mod.rs","byte_start":114303,"byte_end":114311,"line_start":5,"line_end":5,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":431}},{"kind":"Mod","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1781,"byte_end":1784,"line_start":55,"line_end":55,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":466}},{"kind":"Mod","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1818,"byte_end":1822,"line_start":57,"line_end":57,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":484}},{"kind":"Mod","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1832,"byte_end":1836,"line_start":58,"line_end":58,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":540}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/bounds.rs","byte_start":19038,"byte_end":19046,"line_start":49,"line_end":49,"column_start":30,"column_end":38},"kind":{"Impl":{"id":12}},"from":{"krate":1,"index":10154},"to":{"krate":0,"index":96}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":32326,"byte_end":32331,"line_start":364,"line_end":364,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":1442},"to":{"krate":0,"index":154}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":39135,"byte_end":39143,"line_start":568,"line_end":568,"column_start":38,"column_end":46},"kind":{"Impl":{"id":29}},"from":{"krate":1,"index":10154},"to":{"krate":0,"index":129}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":39911,"byte_end":39919,"line_start":601,"line_end":601,"column_start":42,"column_end":50},"kind":{"Impl":{"id":30}},"from":{"krate":1,"index":10154},"to":{"krate":0,"index":154}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":40754,"byte_end":40759,"line_start":640,"line_end":640,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":1442},"to":{"krate":0,"index":179}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":40762,"byte_end":40773,"line_start":640,"line_end":640,"column_start":28,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":129},"to":{"krate":0,"index":179}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":41827,"byte_end":41835,"line_start":677,"line_end":677,"column_start":30,"column_end":38},"kind":{"Impl":{"id":45}},"from":{"krate":1,"index":10154},"to":{"krate":0,"index":179}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/cast.rs","byte_start":43067,"byte_end":43071,"line_start":718,"line_end":718,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":1445},"to":{"krate":0,"index":187}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":44836,"byte_end":44839,"line_start":13,"line_end":13,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":570},"to":{"krate":0,"index":201}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":44842,"byte_end":44849,"line_start":13,"line_end":13,"column_start":28,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":179},"to":{"krate":0,"index":201}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":44852,"byte_end":44855,"line_start":13,"line_end":13,"column_start":38,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":1520},"to":{"krate":0,"index":201}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":44873,"byte_end":44883,"line_start":13,"line_end":13,"column_start":59,"column_end":69},"kind":"SuperTrait","from":{"krate":1,"index":1970},"to":{"krate":0,"index":201}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":44886,"byte_end":44890,"line_start":13,"line_end":13,"column_start":72,"column_end":76},"kind":"SuperTrait","from":{"krate":1,"index":1445},"to":{"krate":0,"index":201}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":68195,"byte_end":68198,"line_start":898,"line_end":898,"column_start":18,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":570},"to":{"krate":0,"index":235}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":68201,"byte_end":68205,"line_start":898,"line_end":898,"column_start":24,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1445},"to":{"krate":0,"index":235}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":68208,"byte_end":68215,"line_start":898,"line_end":898,"column_start":31,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":179},"to":{"krate":0,"index":235}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":68218,"byte_end":68228,"line_start":898,"line_end":898,"column_start":41,"column_end":51},"kind":"SuperTrait","from":{"krate":1,"index":1970},"to":{"krate":0,"index":235}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/float.rs","byte_start":68231,"byte_end":68234,"line_start":898,"line_end":898,"column_start":54,"column_end":57},"kind":"SuperTrait","from":{"krate":1,"index":1520},"to":{"krate":0,"index":235}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/identities.rs","byte_start":98595,"byte_end":98600,"line_start":12,"line_end":12,"column_start":17,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":1442},"to":{"krate":0,"index":302}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/identities.rs","byte_start":98603,"byte_end":98606,"line_start":12,"line_end":12,"column_start":25,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1493},"to":{"krate":0,"index":302}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/identities.rs","byte_start":99866,"byte_end":99874,"line_start":66,"line_end":66,"column_start":24,"column_end":32},"kind":{"Impl":{"id":284}},"from":{"krate":1,"index":10154},"to":{"krate":0,"index":302}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/identities.rs","byte_start":100303,"byte_end":100308,"line_start":91,"line_end":91,"column_start":16,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":1442},"to":{"krate":0,"index":312}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/identities.rs","byte_start":100311,"byte_end":100314,"line_start":91,"line_end":91,"column_start":24,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":1503},"to":{"krate":0,"index":312}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/identities.rs","byte_start":101851,"byte_end":101859,"line_start":155,"line_end":155,"column_start":22,"column_end":30},"kind":{"Impl":{"id":299}},"from":{"krate":1,"index":10154},"to":{"krate":0,"index":312}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":104866,"byte_end":104871,"line_start":35,"line_end":35,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1442},"to":{"krate":0,"index":339}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":104878,"byte_end":104882,"line_start":36,"line_end":36,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":1445},"to":{"krate":0,"index":339}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":104889,"byte_end":104892,"line_start":37,"line_end":37,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":0,"index":570},"to":{"krate":0,"index":339}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":104899,"byte_end":104906,"line_start":38,"line_end":38,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":179},"to":{"krate":0,"index":339}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":104913,"byte_end":104920,"line_start":39,"line_end":39,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":96},"to":{"krate":0,"index":339}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":104927,"byte_end":104937,"line_start":40,"line_end":40,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":1970},"to":{"krate":0,"index":339}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":104944,"byte_end":104947,"line_start":41,"line_end":41,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1960},"to":{"krate":0,"index":339}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":104954,"byte_end":104956,"line_start":42,"line_end":42,"column_start":7,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":1940},"to":{"krate":0,"index":339}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":104963,"byte_end":104966,"line_start":43,"line_end":43,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1547},"to":{"krate":0,"index":339}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":104988,"byte_end":104994,"line_start":44,"line_end":44,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":1551},"to":{"krate":0,"index":339}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":105016,"byte_end":105021,"line_start":45,"line_end":45,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":1556},"to":{"krate":0,"index":339}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":105043,"byte_end":105049,"line_start":46,"line_end":46,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":1561},"to":{"krate":0,"index":339}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":105071,"byte_end":105074,"line_start":47,"line_end":47,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1566},"to":{"krate":0,"index":339}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":105103,"byte_end":105106,"line_start":48,"line_end":48,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1572},"to":{"krate":0,"index":339}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":105135,"byte_end":105145,"line_start":49,"line_end":49,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":367},"to":{"krate":0,"index":339}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":105167,"byte_end":105177,"line_start":50,"line_end":50,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":370},"to":{"krate":0,"index":339}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":105199,"byte_end":105209,"line_start":51,"line_end":51,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":372},"to":{"krate":0,"index":339}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":105231,"byte_end":105241,"line_start":52,"line_end":52,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":374},"to":{"krate":0,"index":339}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/int.rs","byte_start":105263,"byte_end":105273,"line_start":53,"line_end":53,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":427},"to":{"krate":0,"index":339}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":114475,"byte_end":114480,"line_start":5,"line_end":5,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1442},"to":{"krate":0,"index":367}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":114483,"byte_end":114486,"line_start":5,"line_end":5,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1493},"to":{"krate":0,"index":367}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":115616,"byte_end":115621,"line_start":39,"line_end":39,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1442},"to":{"krate":0,"index":370}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":115624,"byte_end":115627,"line_start":39,"line_end":39,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1498},"to":{"krate":0,"index":370}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":116519,"byte_end":116524,"line_start":63,"line_end":63,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1442},"to":{"krate":0,"index":372}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":116527,"byte_end":116530,"line_start":63,"line_end":63,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1503},"to":{"krate":0,"index":372}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":117487,"byte_end":117492,"line_start":87,"line_end":87,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1442},"to":{"krate":0,"index":374}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":117495,"byte_end":117498,"line_start":87,"line_end":87,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1508},"to":{"krate":0,"index":374}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":118474,"byte_end":118479,"line_start":111,"line_end":111,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1442},"to":{"krate":0,"index":376}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":118482,"byte_end":118485,"line_start":111,"line_end":111,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1514},"to":{"krate":0,"index":376}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":120253,"byte_end":120258,"line_start":162,"line_end":162,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1442},"to":{"krate":0,"index":379}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":121702,"byte_end":121707,"line_start":200,"line_end":200,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1442},"to":{"krate":0,"index":381}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":121710,"byte_end":121713,"line_start":200,"line_end":200,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1566},"to":{"krate":0,"index":381}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":123344,"byte_end":123349,"line_start":246,"line_end":246,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1442},"to":{"krate":0,"index":384}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/checked.rs","byte_start":123352,"byte_end":123355,"line_start":246,"line_end":246,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1572},"to":{"krate":0,"index":384}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":130871,"byte_end":130876,"line_start":24,"line_end":24,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1442},"to":{"krate":0,"index":440}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":130879,"byte_end":130882,"line_start":24,"line_end":24,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1493},"to":{"krate":0,"index":440}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":131765,"byte_end":131770,"line_start":47,"line_end":47,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1442},"to":{"krate":0,"index":442}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":131773,"byte_end":131776,"line_start":47,"line_end":47,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1498},"to":{"krate":0,"index":442}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":132665,"byte_end":132670,"line_start":70,"line_end":70,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1442},"to":{"krate":0,"index":444}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":132673,"byte_end":132676,"line_start":70,"line_end":70,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1503},"to":{"krate":0,"index":444}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":133822,"byte_end":133827,"line_start":104,"line_end":104,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1442},"to":{"krate":0,"index":447}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":133830,"byte_end":133833,"line_start":104,"line_end":104,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1566},"to":{"krate":0,"index":447}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":135228,"byte_end":135233,"line_start":139,"line_end":139,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1442},"to":{"krate":0,"index":449}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":135236,"byte_end":135239,"line_start":139,"line_end":139,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1572},"to":{"krate":0,"index":449}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":136660,"byte_end":136668,"line_start":174,"line_end":174,"column_start":38,"column_end":46},"kind":{"Impl":{"id":510}},"from":{"krate":1,"index":10154},"to":{"krate":0,"index":440}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":136860,"byte_end":136868,"line_start":182,"line_end":182,"column_start":38,"column_end":46},"kind":{"Impl":{"id":511}},"from":{"krate":1,"index":10154},"to":{"krate":0,"index":442}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":137060,"byte_end":137068,"line_start":190,"line_end":190,"column_start":38,"column_end":46},"kind":{"Impl":{"id":512}},"from":{"krate":1,"index":10154},"to":{"krate":0,"index":444}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":137260,"byte_end":137268,"line_start":198,"line_end":198,"column_start":38,"column_end":46},"kind":{"Impl":{"id":513}},"from":{"krate":1,"index":10154},"to":{"krate":0,"index":447}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/ops/wrapping.rs","byte_start":137466,"byte_end":137474,"line_start":206,"line_end":206,"column_start":38,"column_end":46},"kind":{"Impl":{"id":514}},"from":{"krate":1,"index":10154},"to":{"krate":0,"index":449}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":146689,"byte_end":146692,"line_start":15,"line_end":15,"column_start":17,"column_end":20},"kind":"SuperTrait","from":{"krate":0,"index":570},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":146695,"byte_end":146699,"line_start":15,"line_end":15,"column_start":23,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":1445},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":146702,"byte_end":146709,"line_start":15,"line_end":15,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":179},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":146712,"byte_end":146722,"line_start":15,"line_end":15,"column_start":40,"column_end":50},"kind":"SuperTrait","from":{"krate":1,"index":1970},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":146725,"byte_end":146728,"line_start":15,"line_end":15,"column_start":53,"column_end":56},"kind":"SuperTrait","from":{"krate":1,"index":1520},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/real.rs","byte_start":166315,"byte_end":166316,"line_start":780,"line_end":780,"column_start":25,"column_end":26},"kind":{"Impl":{"id":685}},"from":{"krate":0,"index":539},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/sign.rs","byte_start":168364,"byte_end":168369,"line_start":8,"line_end":8,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":1442},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/sign.rs","byte_start":168372,"byte_end":168375,"line_start":8,"line_end":8,"column_start":27,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":570},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/sign.rs","byte_start":168378,"byte_end":168381,"line_start":8,"line_end":8,"column_start":33,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":1520},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/sign.rs","byte_start":170452,"byte_end":170460,"line_start":80,"line_end":80,"column_start":28,"column_end":36},"kind":{"Impl":{"id":692}},"from":{"krate":1,"index":10154},"to":{"krate":0,"index":545}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/sign.rs","byte_start":173580,"byte_end":173583,"line_start":197,"line_end":197,"column_start":21,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":570},"to":{"krate":0,"index":566}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/sign.rs","byte_start":173840,"byte_end":173848,"line_start":209,"line_end":209,"column_start":32,"column_end":40},"kind":{"Impl":{"id":701}},"from":{"krate":1,"index":10154},"to":{"krate":0,"index":566}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1987,"byte_end":1996,"line_start":62,"line_end":62,"column_start":16,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":1936},"to":{"krate":0,"index":570}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":1999,"byte_end":2003,"line_start":62,"line_end":62,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":302},"to":{"krate":0,"index":570}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":2006,"byte_end":2009,"line_start":62,"line_end":62,"column_start":35,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":312},"to":{"krate":0,"index":570}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":2012,"byte_end":2018,"line_start":62,"line_end":62,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":573},"to":{"krate":0,"index":570}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":2678,"byte_end":2681,"line_start":85,"line_end":85,"column_start":5,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":1493},"to":{"krate":0,"index":573}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":2710,"byte_end":2713,"line_start":86,"line_end":86,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1498},"to":{"krate":0,"index":573}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":2742,"byte_end":2745,"line_start":87,"line_end":87,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1503},"to":{"krate":0,"index":573}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":2774,"byte_end":2777,"line_start":88,"line_end":88,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1508},"to":{"krate":0,"index":573}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":2806,"byte_end":2809,"line_start":89,"line_end":89,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1514},"to":{"krate":0,"index":573}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":2882,"byte_end":2883,"line_start":93,"line_end":93,"column_start":46,"column_end":47},"kind":{"Impl":{"id":702}},"from":{"krate":0,"index":577},"to":{"krate":0,"index":573}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":3287,"byte_end":3290,"line_start":106,"line_end":106,"column_start":19,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":570},"to":{"krate":0,"index":580}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":3301,"byte_end":3307,"line_start":106,"line_end":106,"column_start":33,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":573},"to":{"krate":0,"index":580}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":3340,"byte_end":3341,"line_start":107,"line_end":107,"column_start":20,"column_end":21},"kind":{"Impl":{"id":703}},"from":{"krate":0,"index":583},"to":{"krate":0,"index":580}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":3618,"byte_end":3624,"line_start":113,"line_end":113,"column_start":25,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":573},"to":{"krate":0,"index":585}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":3647,"byte_end":3653,"line_start":113,"line_end":113,"column_start":54,"column_end":60},"kind":"SuperTrait","from":{"krate":0,"index":573},"to":{"krate":0,"index":585}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":3704,"byte_end":3705,"line_start":114,"line_end":114,"column_start":32,"column_end":33},"kind":{"Impl":{"id":704}},"from":{"krate":0,"index":589},"to":{"krate":0,"index":585}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":3973,"byte_end":3982,"line_start":120,"line_end":120,"column_start":5,"column_end":14},"kind":"SuperTrait","from":{"krate":1,"index":1526},"to":{"krate":0,"index":592}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":3990,"byte_end":3999,"line_start":120,"line_end":120,"column_start":22,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":1530},"to":{"krate":0,"index":592}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":4007,"byte_end":4016,"line_start":120,"line_end":120,"column_start":39,"column_end":48},"kind":"SuperTrait","from":{"krate":1,"index":1534},"to":{"krate":0,"index":592}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":4024,"byte_end":4033,"line_start":120,"line_end":120,"column_start":56,"column_end":65},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":592}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":4041,"byte_end":4050,"line_start":120,"line_end":120,"column_start":73,"column_end":82},"kind":"SuperTrait","from":{"krate":1,"index":1542},"to":{"krate":0,"index":592}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":4096,"byte_end":4097,"line_start":124,"line_end":124,"column_start":36,"column_end":37},"kind":{"Impl":{"id":705}},"from":{"krate":0,"index":595},"to":{"krate":0,"index":592}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":4376,"byte_end":4379,"line_start":132,"line_end":132,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":570},"to":{"krate":0,"index":597}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":4382,"byte_end":4394,"line_start":132,"line_end":132,"column_start":28,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":592},"to":{"krate":0,"index":597}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":4420,"byte_end":4421,"line_start":133,"line_end":133,"column_start":23,"column_end":24},"kind":{"Impl":{"id":706}},"from":{"krate":0,"index":599},"to":{"krate":0,"index":597}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":4684,"byte_end":4693,"line_start":139,"line_end":139,"column_start":25,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":597},"to":{"krate":0,"index":600}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":4704,"byte_end":4716,"line_start":139,"line_end":139,"column_start":45,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":592},"to":{"krate":0,"index":600}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":4755,"byte_end":4756,"line_start":140,"line_end":140,"column_start":26,"column_end":27},"kind":{"Impl":{"id":707}},"from":{"krate":0,"index":603},"to":{"krate":0,"index":600}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":5355,"byte_end":5363,"line_start":159,"line_end":159,"column_start":22,"column_end":30},"kind":{"Impl":{"id":720}},"from":{"krate":1,"index":10154},"to":{"krate":0,"index":570}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.8/src/lib.rs","byte_start":6053,"byte_end":6068,"line_start":185,"line_end":185,"column_start":23,"column_end":38},"kind":{"Impl":{"id":721}},"from":{"krate":0,"index":4359},"to":{"krate":1,"index":6826}}]}