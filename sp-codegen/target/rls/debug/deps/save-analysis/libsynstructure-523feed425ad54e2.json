{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1","program":"/home/endre/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--edition=2018","--crate-name","synstructure","/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","-C","metadata=523feed425ad54e2","-C","extra-filename=-523feed425ad54e2","--out-dir","/home/endre/sp-rust/sp-codegen/target/rls/debug/deps","-L","dependency=/home/endre/sp-rust/sp-codegen/target/rls/debug/deps","--extern","proc_macro2=/home/endre/sp-rust/sp-codegen/target/rls/debug/deps/libproc_macro2-2d96fa8076cff72b.rlib","--extern","quote=/home/endre/sp-rust/sp-codegen/target/rls/debug/deps/libquote-48ee8d0cb9546089.rlib","--extern","syn=/home/endre/sp-rust/sp-codegen/target/rls/debug/deps/libsyn-0b7b155389881875.rlib","--extern","unicode_xid=/home/endre/sp-rust/sp-codegen/target/rls/debug/deps/libunicode_xid-02db86ebfebfb7dc.rlib","--cap-lints","allow","--error-format=json","--sysroot","/home/endre/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/endre/sp-rust/sp-codegen/target/rls/debug/deps/libsynstructure-523feed425ad54e2.rmeta"},"prelude":{"crate_id":{"name":"synstructure","disambiguator":[9483109757142692334,2057164291440510857]},"crate_root":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src","external_crates":[{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3103785602532093942,17390144583497853382]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[3916277366462804126,4478459115610208312]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[1713477286964588179,15844277248566971785]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13012427356130990406,14608520140697239788]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6447241057134257354,1413806012037948949]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4393201617425879462,3310437476178738552]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7079830315103279809,4606718705203350064]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5206394019873543407,10667910451093706265]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[9386824491997906070,17212049238264027415]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16927035401729681780,12437521449932722366]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[11652895559356135055,9563436424588767888]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[16517787911197841201,14116661015581648310]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","num":13,"id":{"name":"backtrace_sys","disambiguator":[5448928475534237502,8623809376237663283]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[9897490559936190142,12325087316115451923]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","num":15,"id":{"name":"proc_macro","disambiguator":[13633698957048320684,7889304844276702620]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","num":16,"id":{"name":"syn","disambiguator":[1501900505422620743,6751028668085422399]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","num":17,"id":{"name":"proc_macro2","disambiguator":[15699835183355771950,8140847402698700841]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","num":18,"id":{"name":"unicode_xid","disambiguator":[10895304941566820014,5812924809442798118]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","num":19,"id":{"name":"quote","disambiguator":[7970025444459154902,16974898687299811861]}}],"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":0,"byte_end":76876,"line_start":1,"line_end":2360,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":19,"index":264},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":5714,"byte_end":5719,"line_start":168,"line_end":168,"column_start":16,"column_end":21},"alias_span":null,"name":"quote","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":2879},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/macros.rs","byte_start":77167,"byte_end":77178,"line_start":6,"line_end":6,"column_start":21,"column_end":32},"alias_span":null,"name":"TokenStream","value":"","parent":{"krate":0,"index":56}},{"kind":"Use","ref_id":{"krate":17,"index":720},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/macros.rs","byte_start":77201,"byte_end":77212,"line_start":7,"line_end":7,"column_start":22,"column_end":33},"alias_span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/macros.rs","byte_start":77216,"byte_end":77228,"line_start":7,"line_end":7,"column_start":37,"column_end":49},"name":"TokenStream2","value":"","parent":{"krate":0,"index":56}},{"kind":"Use","ref_id":{"krate":16,"index":1881},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/macros.rs","byte_start":77244,"byte_end":77249,"line_start":8,"line_end":8,"column_start":15,"column_end":20},"alias_span":null,"name":"parse","value":"","parent":{"krate":0,"index":56}},{"kind":"Use","ref_id":{"krate":16,"index":2195},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/macros.rs","byte_start":77251,"byte_end":77260,"line_start":8,"line_end":8,"column_start":22,"column_end":31},"alias_span":null,"name":"parse_str","value":"","parent":{"krate":0,"index":56}},{"kind":"Use","ref_id":{"krate":16,"index":6886},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/macros.rs","byte_start":77262,"byte_end":77273,"line_start":8,"line_end":8,"column_start":33,"column_end":44},"alias_span":null,"name":"DeriveInput","value":"","parent":{"krate":0,"index":56}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":0,"byte_end":76876,"line_start":1,"line_end":2360,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":46},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":56},{"krate":0,"index":200},{"krate":0,"index":221},{"krate":0,"index":220},{"krate":0,"index":218},{"krate":0,"index":216},{"krate":0,"index":214},{"krate":0,"index":211},{"krate":0,"index":223},{"krate":0,"index":242},{"krate":0,"index":241},{"krate":0,"index":239},{"krate":0,"index":237},{"krate":0,"index":235},{"krate":0,"index":232},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":244},{"krate":0,"index":265},{"krate":0,"index":262},{"krate":0,"index":258},{"krate":0,"index":255},{"krate":0,"index":251},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":268},{"krate":0,"index":290},{"krate":0,"index":288},{"krate":0,"index":285},{"krate":0,"index":281},{"krate":0,"index":278},{"krate":0,"index":274},{"krate":0,"index":293},{"krate":0,"index":314},{"krate":0,"index":311},{"krate":0,"index":307},{"krate":0,"index":304},{"krate":0,"index":300},{"krate":0,"index":84},{"krate":0,"index":93},{"krate":0,"index":317},{"krate":0,"index":339},{"krate":0,"index":336},{"krate":0,"index":332},{"krate":0,"index":329},{"krate":0,"index":325},{"krate":0,"index":126},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":190},{"krate":0,"index":193},{"krate":0,"index":196}],"decl_id":null,"docs":" This crate provides helper types for matching against enum variants, and\n extracting bindings to each of the fields in the deriving Struct or Enum in\n a generic way.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":56},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/macros.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"macros","qualname":"::macros","value":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/macros.rs","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65}],"decl_id":null,"docs":" This module provides two utility macros for testing custom derives. They can\n be used together to eliminate some of the boilerplate required in order to\n declare and test custom derive implementations.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":201},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":6181,"byte_end":6185,"line_start":184,"line_end":184,"column_start":5,"column_end":9},"name":"Both","qualname":"::AddBounds::Both","value":"AddBounds::Both","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Add for fields and generics\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":203},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":6211,"byte_end":6217,"line_start":186,"line_end":186,"column_start":5,"column_end":11},"name":"Fields","qualname":"::AddBounds::Fields","value":"AddBounds::Fields","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Fields only\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":205},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":6245,"byte_end":6253,"line_start":188,"line_end":188,"column_start":5,"column_end":13},"name":"Generics","qualname":"::AddBounds::Generics","value":"AddBounds::Generics","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Generics only\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":207},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":6272,"byte_end":6276,"line_start":190,"line_end":190,"column_start":5,"column_end":9},"name":"None","qualname":"::AddBounds::None","value":"AddBounds::None","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" None\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":209},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":6301,"byte_end":6316,"line_start":192,"line_end":192,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::AddBounds::__Nonexhaustive","value":"AddBounds::__Nonexhaustive","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":200},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":6129,"byte_end":6138,"line_start":182,"line_end":182,"column_start":10,"column_end":19},"name":"AddBounds","qualname":"::AddBounds","value":"AddBounds::{Both, Fields, Generics, None, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":201},{"krate":0,"index":203},{"krate":0,"index":205},{"krate":0,"index":207},{"krate":0,"index":209}],"decl_id":null,"docs":" Changes how bounds are added\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":6120,"byte_end":6319,"line_start":182,"line_end":193,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":6120,"byte_end":6319,"line_start":182,"line_end":193,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":224},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":6467,"byte_end":6471,"line_start":199,"line_end":199,"column_start":5,"column_end":9},"name":"Move","qualname":"::BindStyle::Move","value":"BindStyle::Move","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" `x`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":226},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":6493,"byte_end":6500,"line_start":201,"line_end":201,"column_start":5,"column_end":12},"name":"MoveMut","qualname":"::BindStyle::MoveMut","value":"BindStyle::MoveMut","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" `mut x`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":228},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":6522,"byte_end":6525,"line_start":203,"line_end":203,"column_start":5,"column_end":8},"name":"Ref","qualname":"::BindStyle::Ref","value":"BindStyle::Ref","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" `ref x`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":230},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":6551,"byte_end":6557,"line_start":205,"line_end":205,"column_start":5,"column_end":11},"name":"RefMut","qualname":"::BindStyle::RefMut","value":"BindStyle::RefMut","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" `ref mut x`\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":223},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":6439,"byte_end":6448,"line_start":197,"line_end":197,"column_start":10,"column_end":19},"name":"BindStyle","qualname":"::BindStyle","value":"BindStyle::{Move, MoveMut, Ref, RefMut}","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230}],"decl_id":null,"docs":" The type of binding to use when generating a pattern.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":6430,"byte_end":6560,"line_start":197,"line_end":206,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":6430,"byte_end":6560,"line_start":197,"line_end":206,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":244},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":10936,"byte_end":10947,"line_start":333,"line_end":333,"column_start":12,"column_end":23},"name":"BindingInfo","qualname":"::BindingInfo","value":"BindingInfo { binding, style }","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250}],"decl_id":null,"docs":" Information about a specific binding. This contains both an `Ident`\n reference to the given field, and the syn `&'a Field` descriptor for that\n field.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":10925,"byte_end":11278,"line_start":333,"line_end":345,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":246},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":11016,"byte_end":11023,"line_start":335,"line_end":335,"column_start":9,"column_end":16},"name":"binding","qualname":"::BindingInfo::binding","value":"proc_macro2::Ident","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" The name which this BindingInfo will bind to.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":247},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":11105,"byte_end":11110,"line_start":338,"line_end":338,"column_start":9,"column_end":14},"name":"style","qualname":"::BindingInfo::style","value":"BindStyle","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" The type of binding which this BindingInfo will create.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":11564,"byte_end":11567,"line_start":356,"line_end":356,"column_start":12,"column_end":15},"name":"ast","qualname":"<BindingInfo>::ast","value":"fn (&self) -> &'a Field","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying `syn` AST node which this\n `BindingInfo` references\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":12149,"byte_end":12152,"line_start":380,"line_end":380,"column_start":12,"column_end":15},"name":"pat","qualname":"<BindingInfo>::pat","value":"fn (&self) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Generates the pattern fragment for this field binding.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":13086,"byte_end":13106,"line_start":414,"line_end":414,"column_start":12,"column_end":32},"name":"referenced_ty_params","qualname":"<BindingInfo>::referenced_ty_params","value":"fn (&self) -> Vec<&'a Ident>","parent":null,"children":[],"decl_id":null,"docs":" Returns a list of the type parameters which are referenced in this\n field's type.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":268},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":13568,"byte_end":13578,"line_start":424,"line_end":424,"column_start":12,"column_end":22},"name":"VariantAst","qualname":"::VariantAst","value":"VariantAst { attrs, ident, fields, discriminant }","parent":null,"children":[{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273}],"decl_id":null,"docs":" This type is similar to `syn`'s `Variant` type, however each of the fields\n are references rather than owned. When this is used as the AST for a real\n variant, this struct simply borrows the fields of the `syn::Variant`,\n however this type may also be used as the sole variant for a struct.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":13557,"byte_end":13725,"line_start":424,"line_end":429,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":13557,"byte_end":13725,"line_start":424,"line_end":429,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":270},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":13593,"byte_end":13598,"line_start":425,"line_end":425,"column_start":9,"column_end":14},"name":"attrs","qualname":"::VariantAst::attrs","value":"&'a [syn::attr::Attribute]","parent":{"krate":0,"index":268},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":271},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":13625,"byte_end":13630,"line_start":426,"line_end":426,"column_start":9,"column_end":14},"name":"ident","qualname":"::VariantAst::ident","value":"&'a proc_macro2::Ident","parent":{"krate":0,"index":268},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":272},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":13651,"byte_end":13657,"line_start":427,"line_end":427,"column_start":9,"column_end":15},"name":"fields","qualname":"::VariantAst::fields","value":"&'a syn::data::Fields","parent":{"krate":0,"index":268},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":273},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":13679,"byte_end":13691,"line_start":428,"line_end":428,"column_start":9,"column_end":21},"name":"discriminant","qualname":"::VariantAst::discriminant","value":"&'a std::option::Option<(syn::token::Eq, syn::expr::Expr)>","parent":{"krate":0,"index":268},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":293},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":13919,"byte_end":13930,"line_start":434,"line_end":434,"column_start":12,"column_end":23},"name":"VariantInfo","qualname":"::VariantInfo","value":"VariantInfo { prefix }","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299}],"decl_id":null,"docs":" A wrapper around a `syn::DeriveInput`'s variant which provides utilities\n for destructuring `Variant`s with `match` expressions.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":13908,"byte_end":14088,"line_start":434,"line_end":440,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":295},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":13945,"byte_end":13951,"line_start":435,"line_end":435,"column_start":9,"column_end":15},"name":"prefix","qualname":"::VariantInfo::prefix","value":"std::option::Option<&'a proc_macro2::Ident>","parent":{"krate":0,"index":293},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":16903,"byte_end":16911,"line_start":525,"line_end":525,"column_start":12,"column_end":20},"name":"bindings","qualname":"<VariantInfo>::bindings","value":"fn (&self) -> &[BindingInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice of the bindings in this Variant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":17045,"byte_end":17057,"line_start":530,"line_end":530,"column_start":12,"column_end":24},"name":"bindings_mut","qualname":"<VariantInfo>::bindings_mut","value":"fn (&mut self) -> &mut [BindingInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a mut slice of the bindings in this Variant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":17286,"byte_end":17289,"line_start":536,"line_end":536,"column_start":12,"column_end":15},"name":"ast","qualname":"<VariantInfo>::ast","value":"fn (&self) -> VariantAst<'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `VariantAst` object which contains references to the\n underlying `syn` AST node which this `Variant` was created from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":17418,"byte_end":17434,"line_start":541,"line_end":541,"column_start":12,"column_end":28},"name":"omitted_bindings","qualname":"<VariantInfo>::omitted_bindings","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if any bindings were omitted due to a `filter` call.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":18049,"byte_end":18052,"line_start":565,"line_end":565,"column_start":12,"column_end":15},"name":"pat","qualname":"<VariantInfo>::pat","value":"fn (&self) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Generates the match-arm pattern which could be used to match against this Variant.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":20177,"byte_end":20186,"line_start":632,"line_end":632,"column_start":12,"column_end":21},"name":"construct","qualname":"<VariantInfo>::construct","value":"fn <F, T> (&self, mut func: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Generates the token stream required to construct the current variant.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":22294,"byte_end":22298,"line_start":695,"line_end":695,"column_start":12,"column_end":16},"name":"each","qualname":"<VariantInfo>::each","value":"fn <F, R> (&self, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in a `BindingInfo`.\n and generating a `match` arm which evaluates the returned tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":23608,"byte_end":23612,"line_start":738,"line_end":738,"column_start":12,"column_end":16},"name":"fold","qualname":"<VariantInfo>::fold","value":"fn <F, I, R> (&self, init: I, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in the\n result of the previous call, and a `BindingInfo`. generating a `match`\n arm which evaluates to the resulting tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":25216,"byte_end":25222,"line_start":789,"line_end":789,"column_start":12,"column_end":18},"name":"filter","qualname":"<VariantInfo>::filter","value":"fn <F> (&mut self, f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Filter the bindings created by this `Variant` object. This has 2 effects:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":25648,"byte_end":25662,"line_start":806,"line_end":806,"column_start":12,"column_end":26},"name":"remove_binding","qualname":"<VariantInfo>::remove_binding","value":"fn (&mut self, idx: usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Remove the binding at the given index.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":26753,"byte_end":26762,"line_start":842,"line_end":842,"column_start":12,"column_end":21},"name":"bind_with","qualname":"<VariantInfo>::bind_with","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the `BindStyle` for each of the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":28158,"byte_end":28170,"line_start":888,"line_end":888,"column_start":12,"column_end":24},"name":"binding_name","qualname":"<VariantInfo>::binding_name","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the binding name for each fo the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":29187,"byte_end":29207,"line_start":923,"line_end":923,"column_start":12,"column_end":32},"name":"referenced_ty_params","qualname":"<VariantInfo>::referenced_ty_params","value":"fn (&self) -> Vec<&'a Ident>","parent":null,"children":[],"decl_id":null,"docs":" Returns a list of the type parameters which are referenced in this\n field's type.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":317},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":29616,"byte_end":29625,"line_start":935,"line_end":935,"column_start":12,"column_end":21},"name":"Structure","qualname":"::Structure","value":"Structure {  }","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324}],"decl_id":null,"docs":" A wrapper around a `syn::DeriveInput` which provides utilities for creating\n custom derive trait implementations.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":29605,"byte_end":29828,"line_start":935,"line_end":942,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":30097,"byte_end":30100,"line_start":952,"line_end":952,"column_start":12,"column_end":15},"name":"new","qualname":"<Structure>::new","value":"fn (ast: &'a DeriveInput) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Structure` with the variants and fields from the passed-in\n `DeriveInput`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":30464,"byte_end":30471,"line_start":961,"line_end":961,"column_start":12,"column_end":19},"name":"try_new","qualname":"<Structure>::try_new","value":"fn (ast: &'a DeriveInput) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Structure` with the variants and fields from the passed-in\n `DeriveInput`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":32592,"byte_end":32600,"line_start":1018,"line_end":1018,"column_start":12,"column_end":20},"name":"variants","qualname":"<Structure>::variants","value":"fn (&self) -> &[VariantInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice of the variants in this Structure.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":32736,"byte_end":32748,"line_start":1023,"line_end":1023,"column_start":12,"column_end":24},"name":"variants_mut","qualname":"<Structure>::variants_mut","value":"fn (&mut self) -> &mut [VariantInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a mut slice of the variants in this Structure.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":32943,"byte_end":32946,"line_start":1029,"line_end":1029,"column_start":12,"column_end":15},"name":"ast","qualname":"<Structure>::ast","value":"fn (&self) -> &'a DeriveInput","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying `syn` AST node which this\n `Structure` was created from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":33085,"byte_end":33101,"line_start":1034,"line_end":1034,"column_start":12,"column_end":28},"name":"omitted_variants","qualname":"<Structure>::omitted_variants","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if any variants were omitted due to a `filter_variants` call.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":34202,"byte_end":34206,"line_start":1069,"line_end":1069,"column_start":12,"column_end":16},"name":"each","qualname":"<Structure>::each","value":"fn <F, R> (&self, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in a `BindingInfo`.\n and generating `match` arms which evaluate the returned tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":35674,"byte_end":35678,"line_start":1117,"line_end":1117,"column_start":12,"column_end":16},"name":"fold","qualname":"<Structure>::fold","value":"fn <F, I, R> (&self, init: I, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in the\n result of the previous call, and a `BindingInfo`. generating `match`\n arms which evaluate to the resulting tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":37180,"byte_end":37192,"line_start":1167,"line_end":1167,"column_start":12,"column_end":24},"name":"each_variant","qualname":"<Structure>::each_variant","value":"fn <F, R> (&self, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each variant, passing in a\n `VariantInfo`. and generating `match` arms which evaluate the returned\n tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":38858,"byte_end":38864,"line_start":1221,"line_end":1221,"column_start":12,"column_end":18},"name":"filter","qualname":"<Structure>::filter","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Filter the bindings created by this `Structure` object. This has 2 effects:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":40393,"byte_end":40412,"line_start":1270,"line_end":1270,"column_start":12,"column_end":31},"name":"add_where_predicate","qualname":"<Structure>::add_where_predicate","value":"fn (&mut self, pred: WherePredicate) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Specify additional where predicate bounds which should be generated by\n impl-generating functions such as `gen_impl`, `bound_impl`, and\n `unsafe_bound_impl`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":41782,"byte_end":41792,"line_start":1314,"line_end":1314,"column_start":12,"column_end":22},"name":"add_bounds","qualname":"<Structure>::add_bounds","value":"fn (&mut self, mode: AddBounds) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Specify which bounds should be generated by impl-generating functions\n such as `gen_impl`, `bound_impl`, and `unsafe_bound_impl`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":42955,"byte_end":42970,"line_start":1353,"line_end":1353,"column_start":12,"column_end":27},"name":"filter_variants","qualname":"<Structure>::filter_variants","value":"fn <F> (&mut self, f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Filter the variants matched by this `Structure` object. This has 2 effects:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":43398,"byte_end":43412,"line_start":1370,"line_end":1370,"column_start":12,"column_end":26},"name":"remove_variant","qualname":"<Structure>::remove_variant","value":"fn (&mut self, idx: usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Remove the variant at the given index.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":44491,"byte_end":44500,"line_start":1406,"line_end":1406,"column_start":12,"column_end":21},"name":"bind_with","qualname":"<Structure>::bind_with","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the `BindStyle` for each of the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":45856,"byte_end":45868,"line_start":1452,"line_end":1452,"column_start":12,"column_end":24},"name":"binding_name","qualname":"<Structure>::binding_name","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the binding name for each fo the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":46913,"byte_end":46933,"line_start":1489,"line_end":1489,"column_start":12,"column_end":32},"name":"referenced_ty_params","qualname":"<Structure>::referenced_ty_params","value":"fn (&self) -> Vec<&'a Ident>","parent":null,"children":[],"decl_id":null,"docs":" Returns a list of the type parameters which are refrenced in the types\n of non-filtered fields / variants.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":48546,"byte_end":48562,"line_start":1537,"line_end":1537,"column_start":12,"column_end":28},"name":"add_impl_generic","qualname":"<Structure>::add_impl_generic","value":"fn (&mut self, param: GenericParam) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Adds an `impl<>` generic parameter.\n This can be used when the trait to be derived needs some extra generic parameters.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":49049,"byte_end":49065,"line_start":1550,"line_end":1550,"column_start":12,"column_end":28},"name":"add_trait_bounds","qualname":"<Structure>::add_trait_bounds","value":"fn (&self, bound: &TraitBound, where_clause: &mut Option<WhereClause>, mode: AddBounds) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add trait bounds for a trait with the given path for each type parmaeter\n referenced in the types of non-filtered fields.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":53686,"byte_end":53696,"line_start":1678,"line_end":1678,"column_start":12,"column_end":22},"name":"bound_impl","qualname":"<Structure>::bound_impl","value":"fn <P, B> (&self, path: P, body: B) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" > NOTE: This methods' features are superceded by `Structure::gen_impl`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":56171,"byte_end":56188,"line_start":1748,"line_end":1748,"column_start":12,"column_end":29},"name":"unsafe_bound_impl","qualname":"<Structure>::unsafe_bound_impl","value":"fn <P, B> (&self, path: P, body: B) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" > NOTE: This methods' features are superceded by `Structure::gen_impl`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":58221,"byte_end":58233,"line_start":1808,"line_end":1808,"column_start":12,"column_end":24},"name":"unbound_impl","qualname":"<Structure>::unbound_impl","value":"fn <P, B> (&self, path: P, body: B) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" > NOTE: This methods' features are superceded by `Structure::gen_impl`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":60316,"byte_end":60335,"line_start":1869,"line_end":1869,"column_start":12,"column_end":31},"name":"unsafe_unbound_impl","qualname":"<Structure>::unsafe_unbound_impl","value":"fn <P, B> (&self, path: P, body: B) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" > NOTE: This methods' features are superceded by `Structure::gen_impl`.","sig":null,"attributes":[{"value":"deprecated","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":60291,"byte_end":60304,"line_start":1868,"line_end":1868,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":69699,"byte_end":69707,"line_start":2129,"line_end":2129,"column_start":12,"column_end":20},"name":"gen_impl","qualname":"<Structure>::gen_impl","value":"fn (&self, cfg: TokenStream) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Generate an impl block for the given struct. This impl block will\n automatically use hygiene tricks to avoid polluting the caller's\n namespace, and will automatically add trait bounds for generic type\n parameters.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":184},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":74561,"byte_end":74575,"line_start":2281,"line_end":2281,"column_start":8,"column_end":22},"name":"unpretty_print","qualname":"::unpretty_print","value":"fn <T> (ts: T) -> String","parent":null,"children":[],"decl_id":null,"docs":" Dumps an unpretty version of a tokenstream. Takes any type which implements\n `Display`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":187},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":75596,"byte_end":75607,"line_start":2314,"line_end":2314,"column_start":11,"column_end":22},"name":"MacroResult","qualname":"::MacroResult","value":"MacroResult","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189}],"decl_id":null,"docs":" Helper trait describing values which may be returned by macro implementation\n methods used by this crate's macros.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":75698,"byte_end":75709,"line_start":2316,"line_end":2316,"column_start":8,"column_end":19},"name":"into_result","qualname":"::MacroResult::into_result","value":"fn (self) -> Result<TokenStream>","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":" Convert this result into a `Result` for further processing / validation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":76037,"byte_end":76048,"line_start":2323,"line_end":2323,"column_start":8,"column_end":19},"name":"into_stream","qualname":"::MacroResult::into_stream","value":"fn (self) -> proc_macro::TokenStream","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":" Convert this result into a `proc_macro::TokenStream`, ready to return\n from a native `proc_macro` implementation.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":6580,"byte_end":6589,"line_start":208,"line_end":208,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":11302,"byte_end":11313,"line_start":347,"line_end":347,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":11430,"byte_end":11441,"line_start":353,"line_end":353,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":14591,"byte_end":14607,"line_start":453,"line_end":453,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":15589,"byte_end":15600,"line_start":486,"line_end":486,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":109},{"krate":0,"index":113},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":123},{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":29839,"byte_end":29848,"line_start":944,"line_end":944,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":143},{"krate":0,"index":147},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":159},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":167},{"krate":0,"index":170},{"krate":0,"index":173},{"krate":0,"index":176},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":31602,"byte_end":31616,"line_start":985,"line_end":985,"column_start":38,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":76119,"byte_end":76130,"line_start":2326,"line_end":2326,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":76311,"byte_end":76322,"line_start":2336,"line_end":2336,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":194},{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":76519,"byte_end":76525,"line_start":2346,"line_end":2346,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":198},{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":6027,"byte_end":6033,"line_start":178,"line_end":178,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":56}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":6580,"byte_end":6589,"line_start":208,"line_end":208,"column_start":19,"column_end":28},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":223},"to":{"krate":19,"index":83}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":11302,"byte_end":11313,"line_start":347,"line_end":347,"column_start":23,"column_end":34},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":244},"to":{"krate":19,"index":83}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":11430,"byte_end":11441,"line_start":353,"line_end":353,"column_start":10,"column_end":21},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":244},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":14591,"byte_end":14607,"line_start":453,"line_end":453,"column_start":28,"column_end":44},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":85},"to":{"krate":16,"index":7711}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":15589,"byte_end":15600,"line_start":486,"line_end":486,"column_start":10,"column_end":21},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":293},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":29839,"byte_end":29848,"line_start":944,"line_end":944,"column_start":10,"column_end":19},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":317},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":31602,"byte_end":31616,"line_start":985,"line_end":985,"column_start":38,"column_end":52},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":131},"to":{"krate":2,"index":1446}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":76119,"byte_end":76130,"line_start":2326,"line_end":2326,"column_start":34,"column_end":45},"kind":{"Impl":{"id":7}},"from":{"krate":15,"index":2879},"to":{"krate":0,"index":187}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":76311,"byte_end":76322,"line_start":2336,"line_end":2336,"column_start":22,"column_end":33},"kind":{"Impl":{"id":8}},"from":{"krate":17,"index":720},"to":{"krate":0,"index":187}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.12.1/src/lib.rs","byte_start":76519,"byte_end":76525,"line_start":2346,"line_end":2346,"column_start":38,"column_end":44},"kind":{"Impl":{"id":9}},"from":{"krate":16,"index":2134},"to":{"krate":0,"index":187}}]}