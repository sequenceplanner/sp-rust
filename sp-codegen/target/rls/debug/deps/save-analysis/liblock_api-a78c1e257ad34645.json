{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1","program":"/home/endre/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--edition=2018","--crate-name","lock_api","/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=a78c1e257ad34645","-C","extra-filename=-a78c1e257ad34645","--out-dir","/home/endre/sp-rust/sp-codegen/target/rls/debug/deps","-L","dependency=/home/endre/sp-rust/sp-codegen/target/rls/debug/deps","--extern","scopeguard=/home/endre/sp-rust/sp-codegen/target/rls/debug/deps/libscopeguard-ed617f83cc83b6d4.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/endre/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/endre/sp-rust/sp-codegen/target/rls/debug/deps/liblock_api-a78c1e257ad34645.rmeta"},"prelude":{"crate_id":{"name":"lock_api","disambiguator":[14151289864963157694,13443619908841207667]},"crate_root":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src","external_crates":[{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[3916277366462804126,4478459115610208312]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[1713477286964588179,15844277248566971785]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[13012427356130990406,14608520140697239788]}},{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","num":4,"id":{"name":"scopeguard","disambiguator":[10253496514066519894,14603779108236230003]}}],"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":333,"byte_end":3953,"line_start":8,"line_end":107,"column_start":1,"column_end":26}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3871,"byte_end":3872,"line_start":101,"line_end":101,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3912,"byte_end":3913,"line_start":104,"line_end":104,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3951,"byte_end":3952,"line_start":107,"line_end":107,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":333,"byte_end":3953,"line_start":8,"line_end":107,"column_start":1,"column_end":26},"name":"","qualname":"::","value":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":865}],"decl_id":null,"docs":" This library provides type-safe and fully-featured `Mutex` and `RwLock`\n types which wrap a simple raw mutex or rwlock type. This has several\n benefits: not only does it eliminate a large portion of the work in\n implementing custom lock types, it also allows users to write code which is\n generic with regards to different lock implementations.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3471,"byte_end":3481,"line_start":86,"line_end":86,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3482,"byte_end":3504,"line_start":87,"line_end":87,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3505,"byte_end":3531,"line_start":88,"line_end":88,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":14},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3710,"byte_end":3719,"line_start":95,"line_end":95,"column_start":12,"column_end":21},"name":"GuardSend","qualname":"::GuardSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is `Send`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/lib.rs","byte_start":3815,"byte_end":3826,"line_start":98,"line_end":98,"column_start":12,"column_end":23},"name":"GuardNoSend","qualname":"::GuardNoSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is not `Send`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":28},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":4899,"byte_end":4907,"line_start":29,"line_end":29,"column_start":18,"column_end":26},"name":"RawMutex","qualname":"::mutex::RawMutex","value":"RawMutex","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33}],"decl_id":null,"docs":" Basic operations for a mutex.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":29},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":4965,"byte_end":4969,"line_start":31,"line_end":31,"column_start":11,"column_end":15},"name":"INIT","qualname":"::mutex::RawMutex::INIT","value":"Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Initial value for an unlocked mutex.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":30},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5134,"byte_end":5145,"line_start":35,"line_end":35,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::mutex::RawMutex::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5239,"byte_end":5243,"line_start":38,"line_end":38,"column_start":8,"column_end":12},"name":"lock","qualname":"::mutex::RawMutex::lock","value":"fn (&self) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Acquires this mutex, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5317,"byte_end":5325,"line_start":41,"line_end":41,"column_start":8,"column_end":16},"name":"try_lock","qualname":"::mutex::RawMutex::try_lock","value":"fn (&self) -> bool","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Attempts to acquire this mutex without blocking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5378,"byte_end":5384,"line_start":44,"line_end":44,"column_start":8,"column_end":14},"name":"unlock","qualname":"::mutex::RawMutex::unlock","value":"fn (&self) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Unlocks this mutex.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":34},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5776,"byte_end":5788,"line_start":53,"line_end":53,"column_start":18,"column_end":30},"name":"RawMutexFair","qualname":"::mutex::RawMutexFair","value":"RawMutexFair: RawMutex","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36}],"decl_id":null,"docs":" Additional methods for mutexes which support fair unlocking.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5865,"byte_end":5876,"line_start":55,"line_end":55,"column_start":8,"column_end":19},"name":"unlock_fair","qualname":"::mutex::RawMutexFair::unlock_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Unlocks this mutex using a fair unlock protocol.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6169,"byte_end":6173,"line_start":62,"line_end":62,"column_start":8,"column_end":12},"name":"bump","qualname":"::mutex::RawMutexFair::bump","value":"fn (&self) -> ()","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":37},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6471,"byte_end":6484,"line_start":72,"line_end":72,"column_start":18,"column_end":31},"name":"RawMutexTimed","qualname":"::mutex::RawMutexTimed","value":"RawMutexTimed: RawMutex","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41}],"decl_id":null,"docs":" Additional methods for mutexes which support locking with timeouts.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":38},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6553,"byte_end":6561,"line_start":74,"line_end":74,"column_start":10,"column_end":18},"name":"Duration","qualname":"::mutex::RawMutexTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":39},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6621,"byte_end":6628,"line_start":77,"line_end":77,"column_start":10,"column_end":17},"name":"Instant","qualname":"::mutex::RawMutexTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6704,"byte_end":6716,"line_start":80,"line_end":80,"column_start":8,"column_end":20},"name":"try_lock_for","qualname":"::mutex::RawMutexTimed::try_lock_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6832,"byte_end":6846,"line_start":83,"line_end":83,"column_start":8,"column_end":22},"name":"try_lock_until","qualname":"::mutex::RawMutexTimed::try_lock_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":42},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":7400,"byte_end":7405,"line_start":94,"line_end":94,"column_start":12,"column_end":17},"name":"Mutex","qualname":"::mutex::Mutex","value":"Mutex {  }","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46}],"decl_id":null,"docs":" A mutual exclusion primitive useful for protecting shared data","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8629,"byte_end":8632,"line_start":142,"line_end":142,"column_start":12,"column_end":15},"name":"new","qualname":"<Mutex<R, T>>::new","value":"fn (val: T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8571,"byte_end":8603,"line_start":140,"line_end":140,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8608,"byte_end":8617,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8837,"byte_end":8847,"line_start":149,"line_end":149,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Mutex<R, T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8788,"byte_end":8797,"line_start":147,"line_end":147,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8802,"byte_end":8825,"line_start":148,"line_end":148,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":9708,"byte_end":9712,"line_start":173,"line_end":173,"column_start":12,"column_end":16},"name":"lock","qualname":"<Mutex<R, T>>::lock","value":"fn (&self) -> MutexGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutex, blocking the current thread until it is able to do so.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":9687,"byte_end":9696,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":10166,"byte_end":10174,"line_start":187,"line_end":187,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<Mutex<R, T>>::try_lock","value":"fn (&self) -> Option<MutexGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":10145,"byte_end":10154,"line_start":186,"line_end":186,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":10647,"byte_end":10654,"line_start":201,"line_end":201,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Mutex<R, T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":10626,"byte_end":10635,"line_start":200,"line_end":200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11238,"byte_end":11250,"line_start":217,"line_end":217,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<Mutex<R, T>>::force_unlock","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11210,"byte_end":11219,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11687,"byte_end":11690,"line_start":231,"line_end":231,"column_start":19,"column_end":22},"name":"raw","qualname":"<Mutex<R, T>>::raw","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11659,"byte_end":11668,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":12321,"byte_end":12338,"line_start":249,"line_end":249,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<Mutex<R, T>>::force_unlock_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock procotol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":12293,"byte_end":12302,"line_start":248,"line_end":248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":12738,"byte_end":12750,"line_start":261,"line_end":261,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<Mutex<R, T>>::try_lock_for","value":"fn (&self, timeout: R::Duration) -> Option<MutexGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":12717,"byte_end":12726,"line_start":260,"line_end":260,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":13306,"byte_end":13320,"line_start":276,"line_end":276,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<Mutex<R, T>>::try_lock_until","value":"fn (&self, timeout: R::Instant) -> Option<MutexGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":13285,"byte_end":13294,"line_start":275,"line_end":275,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":92},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":14861,"byte_end":14871,"line_start":324,"line_end":324,"column_start":12,"column_end":22},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"MutexGuard {  }","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":14790,"byte_end":14849,"line_start":323,"line_end":323,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":15222,"byte_end":15227,"line_start":333,"line_end":333,"column_start":12,"column_end":17},"name":"mutex","qualname":"<MutexGuard>::mutex","value":"fn (s: &Self) -> &'a Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `Mutex` object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":15692,"byte_end":15695,"line_start":346,"line_end":346,"column_start":12,"column_end":15},"name":"map","qualname":"<MutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedMutexGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":15671,"byte_end":15680,"line_start":345,"line_end":345,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":16480,"byte_end":16487,"line_start":366,"line_end":366,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedMutexGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":16459,"byte_end":16468,"line_start":365,"line_end":365,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":17123,"byte_end":17131,"line_start":384,"line_end":384,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<MutexGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":17102,"byte_end":17111,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":18147,"byte_end":18158,"line_start":408,"line_end":408,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":18126,"byte_end":18135,"line_start":407,"line_end":407,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":18528,"byte_end":18541,"line_start":420,"line_end":420,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<MutexGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":18507,"byte_end":18516,"line_start":419,"line_end":419,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":19006,"byte_end":19010,"line_start":435,"line_end":435,"column_start":12,"column_end":16},"name":"bump","qualname":"<MutexGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":18985,"byte_end":18994,"line_start":434,"line_end":434,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":151},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":20556,"byte_end":20572,"line_start":485,"line_end":485,"column_start":12,"column_end":28},"name":"MappedMutexGuard","qualname":"::mutex::MappedMutexGuard","value":"MappedMutexGuard {  }","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157}],"decl_id":null,"docs":" An RAII mutex guard returned by `MutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":20485,"byte_end":20544,"line_start":484,"line_end":484,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":21400,"byte_end":21403,"line_start":510,"line_end":510,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedMutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedMutexGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":21379,"byte_end":21388,"line_start":509,"line_end":509,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":22181,"byte_end":22188,"line_start":530,"line_end":530,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedMutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedMutexGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":22160,"byte_end":22169,"line_start":529,"line_end":529,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":23438,"byte_end":23449,"line_start":558,"line_end":558,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedMutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":23417,"byte_end":23426,"line_start":557,"line_end":557,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":227},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":25732,"byte_end":25743,"line_start":38,"line_end":38,"column_start":18,"column_end":29},"name":"GetThreadId","qualname":"::remutex::GetThreadId","value":"GetThreadId","parent":null,"children":[{"krate":0,"index":228},{"krate":0,"index":229}],"decl_id":null,"docs":" Helper trait which returns a non-zero thread ID.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":228},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":25779,"byte_end":25783,"line_start":40,"line_end":40,"column_start":11,"column_end":15},"name":"INIT","qualname":"::remutex::GetThreadId::INIT","value":"Self","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Initial value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":25894,"byte_end":25911,"line_start":44,"line_end":44,"column_start":8,"column_end":25},"name":"nonzero_thread_id","qualname":"::remutex::GetThreadId::nonzero_thread_id","value":"fn (&self) -> NonZeroUsize","parent":{"krate":0,"index":227},"children":[],"decl_id":null,"docs":" Returns a non-zero thread ID which identifies the current thread of\n execution.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":259},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":28721,"byte_end":28735,"line_start":142,"line_end":142,"column_start":12,"column_end":26},"name":"ReentrantMutex","qualname":"::remutex::ReentrantMutex","value":"ReentrantMutex {  }","parent":null,"children":[{"krate":0,"index":263},{"krate":0,"index":264}],"decl_id":null,"docs":" A mutex which can be recursively locked by a single thread.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":30442,"byte_end":30445,"line_start":206,"line_end":206,"column_start":12,"column_end":15},"name":"new","qualname":"<ReentrantMutex<R, G, T>>::new","value":"fn (val: T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":30384,"byte_end":30416,"line_start":204,"line_end":204,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":30421,"byte_end":30430,"line_start":205,"line_end":205,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":30888,"byte_end":30898,"line_start":221,"line_end":221,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ReentrantMutex<R, G, T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":30839,"byte_end":30848,"line_start":219,"line_end":219,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":30853,"byte_end":30876,"line_start":220,"line_end":220,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":31912,"byte_end":31916,"line_start":246,"line_end":246,"column_start":12,"column_end":16},"name":"lock","qualname":"<ReentrantMutex<R, G, T>>::lock","value":"fn (&self) -> ReentrantMutexGuard<'_, R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reentrant mutex, blocking the current thread until it is able\n to do so.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":31891,"byte_end":31900,"line_start":245,"line_end":245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":32382,"byte_end":32390,"line_start":260,"line_end":260,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<ReentrantMutex<R, G, T>>::try_lock","value":"fn (&self) -> Option<ReentrantMutexGuard<'_, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":32361,"byte_end":32370,"line_start":259,"line_end":259,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":32884,"byte_end":32891,"line_start":274,"line_end":274,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ReentrantMutex<R, G, T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":32863,"byte_end":32872,"line_start":273,"line_end":273,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33493,"byte_end":33505,"line_start":290,"line_end":290,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<ReentrantMutex<R, G, T>>::force_unlock","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33465,"byte_end":33474,"line_start":289,"line_end":289,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33951,"byte_end":33954,"line_start":304,"line_end":304,"column_start":19,"column_end":22},"name":"raw","qualname":"<ReentrantMutex<R, G, T>>::raw","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":33923,"byte_end":33932,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34637,"byte_end":34654,"line_start":322,"line_end":322,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<ReentrantMutex<R, G, T>>::force_unlock_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34609,"byte_end":34618,"line_start":321,"line_end":321,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":35082,"byte_end":35094,"line_start":334,"line_end":334,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<ReentrantMutex<R, G, T>>::try_lock_for","value":"fn (&self, timeout: R::Duration) -> Option<ReentrantMutexGuard<'_, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":35061,"byte_end":35070,"line_start":333,"line_end":333,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":35662,"byte_end":35676,"line_start":349,"line_end":349,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<ReentrantMutex<R, G, T>>::try_lock_until","value":"fn (&self, timeout: R::Instant) -> Option<ReentrantMutexGuard<'_, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":35641,"byte_end":35650,"line_start":348,"line_end":348,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":319},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":37376,"byte_end":37395,"line_start":397,"line_end":397,"column_start":12,"column_end":31},"name":"ReentrantMutexGuard","qualname":"::remutex::ReentrantMutexGuard","value":"ReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":325}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\n is dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":37296,"byte_end":37364,"line_start":396,"line_end":396,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":37856,"byte_end":37863,"line_start":409,"line_end":409,"column_start":12,"column_end":19},"name":"remutex","qualname":"<ReentrantMutexGuard>::remutex","value":"fn (s: &Self) -> &'a ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `ReentrantMutex` object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":38369,"byte_end":38372,"line_start":422,"line_end":422,"column_start":12,"column_end":15},"name":"map","qualname":"<ReentrantMutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedReentrantMutexGuard<'a, R, G, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":38348,"byte_end":38357,"line_start":421,"line_end":421,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":39197,"byte_end":39204,"line_start":442,"line_end":442,"column_start":12,"column_end":19},"name":"try_map","qualname":"<ReentrantMutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedReentrantMutexGuard<'a, R, G, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":39176,"byte_end":39185,"line_start":441,"line_end":441,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":39888,"byte_end":39896,"line_start":463,"line_end":463,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<ReentrantMutexGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":39867,"byte_end":39876,"line_start":462,"line_end":462,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":40962,"byte_end":40973,"line_start":489,"line_end":489,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<ReentrantMutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":40941,"byte_end":40950,"line_start":488,"line_end":488,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":41345,"byte_end":41358,"line_start":501,"line_end":501,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<ReentrantMutexGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":41324,"byte_end":41333,"line_start":500,"line_end":500,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":41827,"byte_end":41831,"line_start":516,"line_end":516,"column_start":12,"column_end":16},"name":"bump","qualname":"<ReentrantMutexGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":41806,"byte_end":41815,"line_start":515,"line_end":515,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":381},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":43416,"byte_end":43441,"line_start":570,"line_end":570,"column_start":12,"column_end":37},"name":"MappedReentrantMutexGuard","qualname":"::remutex::MappedReentrantMutexGuard","value":"MappedReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388}],"decl_id":null,"docs":" An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":43336,"byte_end":43404,"line_start":569,"line_end":569,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":44288,"byte_end":44291,"line_start":593,"line_end":593,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedReentrantMutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedReentrantMutexGuard<'a, R, G, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":44267,"byte_end":44276,"line_start":592,"line_end":592,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":45105,"byte_end":45112,"line_start":613,"line_end":613,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedReentrantMutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedReentrantMutexGuard<'a, R, G, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":45084,"byte_end":45093,"line_start":612,"line_end":612,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":46440,"byte_end":46451,"line_start":646,"line_end":646,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedReentrantMutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":46419,"byte_end":46428,"line_start":645,"line_end":645,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":445},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":48647,"byte_end":48656,"line_start":31,"line_end":31,"column_start":18,"column_end":27},"name":"RawRwLock","qualname":"::rwlock::RawRwLock","value":"RawRwLock","parent":null,"children":[{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453}],"decl_id":null,"docs":" Basic operations for a reader-writer lock.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":446},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":48717,"byte_end":48721,"line_start":33,"line_end":33,"column_start":11,"column_end":15},"name":"INIT","qualname":"::rwlock::RawRwLock::INIT","value":"Self","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Initial value for an unlocked `RwLock`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":447},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":48886,"byte_end":48897,"line_start":37,"line_end":37,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::rwlock::RawRwLock::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":48994,"byte_end":49005,"line_start":40,"line_end":40,"column_start":8,"column_end":19},"name":"lock_shared","qualname":"::rwlock::RawRwLock::lock_shared","value":"fn (&self) -> ()","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Acquires a shared lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49082,"byte_end":49097,"line_start":43,"line_end":43,"column_start":8,"column_end":23},"name":"try_lock_shared","qualname":"::rwlock::RawRwLock::try_lock_shared","value":"fn (&self) -> bool","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without blocking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49154,"byte_end":49167,"line_start":46,"line_end":46,"column_start":8,"column_end":21},"name":"unlock_shared","qualname":"::rwlock::RawRwLock::unlock_shared","value":"fn (&self) -> ()","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Releases a shared lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49275,"byte_end":49289,"line_start":49,"line_end":49,"column_start":8,"column_end":22},"name":"lock_exclusive","qualname":"::rwlock::RawRwLock::lock_exclusive","value":"fn (&self) -> ()","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Acquires an exclusive lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49370,"byte_end":49388,"line_start":52,"line_end":52,"column_start":8,"column_end":26},"name":"try_lock_exclusive","qualname":"::rwlock::RawRwLock::try_lock_exclusive","value":"fn (&self) -> bool","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock without blocking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49449,"byte_end":49465,"line_start":55,"line_end":55,"column_start":8,"column_end":24},"name":"unlock_exclusive","qualname":"::rwlock::RawRwLock::unlock_exclusive","value":"fn (&self) -> ()","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Releases an exclusive lock.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":454},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49857,"byte_end":49870,"line_start":64,"line_end":64,"column_start":18,"column_end":31},"name":"RawRwLockFair","qualname":"::rwlock::RawRwLockFair","value":"RawRwLockFair: RawRwLock","parent":null,"children":[{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458}],"decl_id":null,"docs":" Additional methods for RwLocks which support fair unlocking.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49952,"byte_end":49970,"line_start":66,"line_end":66,"column_start":8,"column_end":26},"name":"unlock_shared_fair","qualname":"::rwlock::RawRwLockFair::unlock_shared_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":454},"children":[],"decl_id":null,"docs":" Releases a shared lock using a fair unlock protocol.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":50052,"byte_end":50073,"line_start":69,"line_end":69,"column_start":8,"column_end":29},"name":"unlock_exclusive_fair","qualname":"::rwlock::RawRwLockFair::unlock_exclusive_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":454},"children":[],"decl_id":null,"docs":" Releases an exclusive lock using a fair unlock protocol.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":50384,"byte_end":50395,"line_start":76,"line_end":76,"column_start":8,"column_end":19},"name":"bump_shared","qualname":"::rwlock::RawRwLockFair::bump_shared","value":"fn (&self) -> ()","parent":{"krate":0,"index":454},"children":[],"decl_id":null,"docs":" Temporarily yields a shared lock to a waiting thread if there is one.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":50786,"byte_end":50800,"line_start":86,"line_end":86,"column_start":8,"column_end":22},"name":"bump_exclusive","qualname":"::rwlock::RawRwLockFair::bump_exclusive","value":"fn (&self) -> ()","parent":{"krate":0,"index":454},"children":[],"decl_id":null,"docs":" Temporarily yields an exclusive lock to a waiting thread if there is one.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":459},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51017,"byte_end":51035,"line_start":94,"line_end":94,"column_start":18,"column_end":36},"name":"RawRwLockDowngrade","qualname":"::rwlock::RawRwLockDowngrade","value":"RawRwLockDowngrade: RawRwLock","parent":null,"children":[{"krate":0,"index":460}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically downgrading an\n exclusive lock to a shared lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51202,"byte_end":51211,"line_start":97,"line_end":97,"column_start":8,"column_end":17},"name":"downgrade","qualname":"::rwlock::RawRwLockDowngrade::downgrade","value":"fn (&self) -> ()","parent":{"krate":0,"index":459},"children":[],"decl_id":null,"docs":" Atomically downgrades an exclusive lock into a shared lock without\n allowing any thread to take an exclusive lock in the meantime.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":461},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51453,"byte_end":51467,"line_start":104,"line_end":104,"column_start":18,"column_end":32},"name":"RawRwLockTimed","qualname":"::rwlock::RawRwLockTimed","value":"RawRwLockTimed: RawRwLock","parent":null,"children":[{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467}],"decl_id":null,"docs":" Additional methods for RwLocks which support locking with timeouts.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":462},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51537,"byte_end":51545,"line_start":106,"line_end":106,"column_start":10,"column_end":18},"name":"Duration","qualname":"::rwlock::RawRwLockTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":463},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51605,"byte_end":51612,"line_start":109,"line_end":109,"column_start":10,"column_end":17},"name":"Instant","qualname":"::rwlock::RawRwLockTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51692,"byte_end":51711,"line_start":112,"line_end":112,"column_start":8,"column_end":27},"name":"try_lock_shared_for","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51831,"byte_end":51852,"line_start":115,"line_end":115,"column_start":8,"column_end":29},"name":"try_lock_shared_until","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51975,"byte_end":51997,"line_start":118,"line_end":118,"column_start":8,"column_end":30},"name":"try_lock_exclusive_for","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":52121,"byte_end":52145,"line_start":121,"line_end":121,"column_start":8,"column_end":32},"name":"try_lock_exclusive_until","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":468},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":52578,"byte_end":52596,"line_start":131,"line_end":131,"column_start":18,"column_end":36},"name":"RawRwLockRecursive","qualname":"::rwlock::RawRwLockRecursive","value":"RawRwLockRecursive: RawRwLock","parent":null,"children":[{"krate":0,"index":469},{"krate":0,"index":470}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":52697,"byte_end":52718,"line_start":133,"line_end":133,"column_start":8,"column_end":29},"name":"lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::lock_shared_recursive","value":"fn (&self) -> ()","parent":{"krate":0,"index":468},"children":[],"decl_id":null,"docs":" Acquires a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":52826,"byte_end":52851,"line_start":136,"line_end":136,"column_start":8,"column_end":33},"name":"try_lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::try_lock_shared_recursive","value":"fn (&self) -> bool","parent":{"krate":0,"index":468},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":471},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":52972,"byte_end":52995,"line_start":140,"line_end":140,"column_start":18,"column_end":41},"name":"RawRwLockRecursiveTimed","qualname":"::rwlock::RawRwLockRecursiveTimed","value":"RawRwLockRecursiveTimed: RawRwLockRecursive + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":473}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks and timeouts.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":53169,"byte_end":53198,"line_start":143,"line_end":143,"column_start":8,"column_end":37},"name":"try_lock_shared_recursive_for","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":53375,"byte_end":53406,"line_start":147,"line_end":147,"column_start":8,"column_end":39},"name":"try_lock_shared_recursive_until","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":474},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":53782,"byte_end":53798,"line_start":156,"line_end":156,"column_start":18,"column_end":34},"name":"RawRwLockUpgrade","qualname":"::rwlock::RawRwLockUpgrade","value":"RawRwLockUpgrade: RawRwLock","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically upgrading a shared\n lock to an exclusive lock.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":53911,"byte_end":53926,"line_start":158,"line_end":158,"column_start":8,"column_end":23},"name":"lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::lock_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Acquires an upgradable lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54008,"byte_end":54027,"line_start":161,"line_end":161,"column_start":8,"column_end":27},"name":"try_lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::try_lock_upgradable","value":"fn (&self) -> bool","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock without blocking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54089,"byte_end":54106,"line_start":164,"line_end":164,"column_start":8,"column_end":25},"name":"unlock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::unlock_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Releases an upgradable lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54181,"byte_end":54188,"line_start":167,"line_end":167,"column_start":8,"column_end":15},"name":"upgrade","qualname":"::rwlock::RawRwLockUpgrade::upgrade","value":"fn (&self) -> ()","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Upgrades an upgradable lock to an exclusive lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54299,"byte_end":54310,"line_start":171,"line_end":171,"column_start":8,"column_end":19},"name":"try_upgrade","qualname":"::rwlock::RawRwLockUpgrade::try_upgrade","value":"fn (&self) -> bool","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock without\n blocking.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":480},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54437,"byte_end":54457,"line_start":176,"line_end":176,"column_start":18,"column_end":38},"name":"RawRwLockUpgradeFair","qualname":"::rwlock::RawRwLockUpgradeFair","value":"RawRwLockUpgradeFair: RawRwLockUpgrade + RawRwLockFair","parent":null,"children":[{"krate":0,"index":481},{"krate":0,"index":482}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and fair\n unlocking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54567,"byte_end":54589,"line_start":178,"line_end":178,"column_start":8,"column_end":30},"name":"unlock_upgradable_fair","qualname":"::rwlock::RawRwLockUpgradeFair::unlock_upgradable_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":480},"children":[],"decl_id":null,"docs":" Releases an upgradable lock using a fair unlock protocol.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54913,"byte_end":54928,"line_start":185,"line_end":185,"column_start":8,"column_end":23},"name":"bump_upgradable","qualname":"::rwlock::RawRwLockUpgradeFair::bump_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":480},"children":[],"decl_id":null,"docs":" Temporarily yields an upgradable lock to a waiting thread if there is one.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":483},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55127,"byte_end":55152,"line_start":193,"line_end":193,"column_start":18,"column_end":43},"name":"RawRwLockUpgradeDowngrade","qualname":"::rwlock::RawRwLockUpgradeDowngrade","value":"RawRwLockUpgradeDowngrade: RawRwLockUpgrade + RawRwLockDowngrade","parent":null,"children":[{"krate":0,"index":484},{"krate":0,"index":485}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and lock\n downgrading.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55257,"byte_end":55277,"line_start":195,"line_end":195,"column_start":8,"column_end":28},"name":"downgrade_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":483},"children":[],"decl_id":null,"docs":" Downgrades an upgradable lock to a shared lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":485},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55354,"byte_end":55377,"line_start":198,"line_end":198,"column_start":8,"column_end":31},"name":"downgrade_to_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_to_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":483},"children":[],"decl_id":null,"docs":" Downgrades an exclusive lock to an upgradable lock.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":486},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55503,"byte_end":55524,"line_start":203,"line_end":203,"column_start":18,"column_end":39},"name":"RawRwLockUpgradeTimed","qualname":"::rwlock::RawRwLockUpgradeTimed","value":"RawRwLockUpgradeTimed: RawRwLockUpgrade + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and locking\n with timeouts.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55644,"byte_end":55667,"line_start":205,"line_end":205,"column_start":8,"column_end":31},"name":"try_lock_upgradable_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":486},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55792,"byte_end":55817,"line_start":208,"line_end":208,"column_start":8,"column_end":33},"name":"try_lock_upgradable_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":486},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55970,"byte_end":55985,"line_start":212,"line_end":212,"column_start":8,"column_end":23},"name":"try_upgrade_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":486},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":56139,"byte_end":56156,"line_start":216,"line_end":216,"column_start":8,"column_end":25},"name":"try_upgrade_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":486},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":491},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":56908,"byte_end":56914,"line_start":231,"line_end":231,"column_start":12,"column_end":18},"name":"RwLock","qualname":"::rwlock::RwLock","value":"RwLock {  }","parent":null,"children":[{"krate":0,"index":494},{"krate":0,"index":495}],"decl_id":null,"docs":" A reader-writer lock","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":58167,"byte_end":58170,"line_start":279,"line_end":279,"column_start":12,"column_end":15},"name":"new","qualname":"<RwLock<R, T>>::new","value":"fn (val: T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an `RwLock<T>` which is unlocked.\n","sig":null,"attributes":[{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":58109,"byte_end":58141,"line_start":277,"line_end":277,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":58146,"byte_end":58155,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":58380,"byte_end":58390,"line_start":286,"line_end":286,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RwLock<R, T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `RwLock`, returning the underlying data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":58331,"byte_end":58340,"line_start":284,"line_end":284,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":58345,"byte_end":58368,"line_start":285,"line_end":285,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":59569,"byte_end":59573,"line_start":321,"line_end":321,"column_start":12,"column_end":16},"name":"read","qualname":"<RwLock<R, T>>::read","value":"fn (&self) -> RwLockReadGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":59548,"byte_end":59557,"line_start":320,"line_end":320,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":60076,"byte_end":60084,"line_start":335,"line_end":335,"column_start":12,"column_end":20},"name":"try_read","qualname":"<RwLock<R, T>>::try_read","value":"fn (&self) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":60055,"byte_end":60064,"line_start":334,"line_end":334,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":60703,"byte_end":60708,"line_start":353,"line_end":353,"column_start":12,"column_end":17},"name":"write","qualname":"<RwLock<R, T>>::write","value":"fn (&self) -> RwLockWriteGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with exclusive write access, blocking the current\n thread until it can be acquired.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":60682,"byte_end":60691,"line_start":352,"line_end":352,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":61207,"byte_end":61216,"line_start":367,"line_end":367,"column_start":12,"column_end":21},"name":"try_write","qualname":"<RwLock<R, T>>::try_write","value":"fn (&self) -> Option<RwLockWriteGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to lock this `RwLock` with exclusive write access.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":61186,"byte_end":61195,"line_start":366,"line_end":366,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":61712,"byte_end":61719,"line_start":381,"line_end":381,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RwLock<R, T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":61691,"byte_end":61700,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62326,"byte_end":62343,"line_start":397,"line_end":397,"column_start":19,"column_end":36},"name":"force_unlock_read","qualname":"<RwLock<R, T>>::force_unlock_read","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62298,"byte_end":62307,"line_start":396,"line_end":396,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62934,"byte_end":62952,"line_start":413,"line_end":413,"column_start":19,"column_end":37},"name":"force_unlock_write","qualname":"<RwLock<R, T>>::force_unlock_write","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":62906,"byte_end":62915,"line_start":412,"line_end":412,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63418,"byte_end":63421,"line_start":427,"line_end":427,"column_start":19,"column_end":22},"name":"raw","qualname":"<RwLock<R, T>>::raw","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw reader-writer lock object.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64077,"byte_end":64099,"line_start":445,"line_end":445,"column_start":19,"column_end":41},"name":"force_unlock_read_fair","qualname":"<RwLock<R, T>>::force_unlock_read_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64049,"byte_end":64058,"line_start":444,"line_end":444,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64724,"byte_end":64747,"line_start":461,"line_end":461,"column_start":19,"column_end":42},"name":"force_unlock_write_fair","qualname":"<RwLock<R, T>>::force_unlock_write_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64696,"byte_end":64705,"line_start":460,"line_end":460,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":65199,"byte_end":65211,"line_start":474,"line_end":474,"column_start":12,"column_end":24},"name":"try_read_for","qualname":"<RwLock<R, T>>::try_read_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":65178,"byte_end":65187,"line_start":473,"line_end":473,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":65824,"byte_end":65838,"line_start":490,"line_end":490,"column_start":12,"column_end":26},"name":"try_read_until","qualname":"<RwLock<R, T>>::try_read_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":65803,"byte_end":65812,"line_start":489,"line_end":489,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":66459,"byte_end":66472,"line_start":506,"line_end":506,"column_start":12,"column_end":25},"name":"try_write_for","qualname":"<RwLock<R, T>>::try_write_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockWriteGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":66438,"byte_end":66447,"line_start":505,"line_end":505,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":67097,"byte_end":67112,"line_start":522,"line_end":522,"column_start":12,"column_end":27},"name":"try_write_until","qualname":"<RwLock<R, T>>::try_write_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockWriteGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":67076,"byte_end":67085,"line_start":521,"line_end":521,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":68243,"byte_end":68257,"line_start":549,"line_end":549,"column_start":12,"column_end":26},"name":"read_recursive","qualname":"<RwLock<R, T>>::read_recursive","value":"fn (&self) -> RwLockReadGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":68222,"byte_end":68231,"line_start":548,"line_end":548,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":68941,"byte_end":68959,"line_start":566,"line_end":566,"column_start":12,"column_end":30},"name":"try_read_recursive","qualname":"<RwLock<R, T>>::try_read_recursive","value":"fn (&self) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":68920,"byte_end":68929,"line_start":565,"line_end":565,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":69806,"byte_end":69828,"line_start":588,"line_end":588,"column_start":12,"column_end":34},"name":"try_read_recursive_for","qualname":"<RwLock<R, T>>::try_read_recursive_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":69785,"byte_end":69794,"line_start":587,"line_end":587,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":70474,"byte_end":70498,"line_start":607,"line_end":607,"column_start":12,"column_end":36},"name":"try_read_recursive_until","qualname":"<RwLock<R, T>>::try_read_recursive_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":70453,"byte_end":70462,"line_start":606,"line_end":606,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":71593,"byte_end":71608,"line_start":639,"line_end":639,"column_start":12,"column_end":27},"name":"upgradable_read","qualname":"<RwLock<R, T>>::upgradable_read","value":"fn (&self) -> RwLockUpgradableReadGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with upgradable read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":71572,"byte_end":71581,"line_start":638,"line_end":638,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":72135,"byte_end":72154,"line_start":653,"line_end":653,"column_start":12,"column_end":31},"name":"try_upgradable_read","qualname":"<RwLock<R, T>>::try_upgradable_read","value":"fn (&self) -> Option<RwLockUpgradableReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":72114,"byte_end":72123,"line_start":652,"line_end":652,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":72817,"byte_end":72840,"line_start":671,"line_end":671,"column_start":12,"column_end":35},"name":"try_upgradable_read_for","qualname":"<RwLock<R, T>>::try_upgradable_read_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockUpgradableReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":72796,"byte_end":72805,"line_start":670,"line_end":670,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":73500,"byte_end":73525,"line_start":690,"line_end":690,"column_start":12,"column_end":37},"name":"try_upgradable_read_until","qualname":"<RwLock<R, T>>::try_upgradable_read_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockUpgradableReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":73479,"byte_end":73488,"line_start":689,"line_end":689,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":569},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":74956,"byte_end":74971,"line_start":738,"line_end":738,"column_start":12,"column_end":27},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"RwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":573},{"krate":0,"index":574}],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":74884,"byte_end":74944,"line_start":737,"line_end":737,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":75337,"byte_end":75343,"line_start":747,"line_end":747,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockReadGuard>::rwlock","value":"fn (s: &Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":75823,"byte_end":75826,"line_start":760,"line_end":760,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockReadGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockReadGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":75802,"byte_end":75811,"line_start":759,"line_end":759,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":76625,"byte_end":76632,"line_start":780,"line_end":780,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockReadGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockReadGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":76604,"byte_end":76613,"line_start":779,"line_end":779,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":77339,"byte_end":77347,"line_start":800,"line_end":800,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockReadGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":77318,"byte_end":77327,"line_start":799,"line_end":799,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":78405,"byte_end":78416,"line_start":824,"line_end":824,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockReadGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":78384,"byte_end":78393,"line_start":823,"line_end":823,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":78803,"byte_end":78816,"line_start":836,"line_end":836,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockReadGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":78782,"byte_end":78791,"line_start":835,"line_end":835,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":79300,"byte_end":79304,"line_start":851,"line_end":851,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockReadGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":79279,"byte_end":79288,"line_start":850,"line_end":850,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":623},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":80438,"byte_end":80454,"line_start":891,"line_end":891,"column_start":12,"column_end":28},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"RwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":628}],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":80366,"byte_end":80426,"line_start":890,"line_end":890,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":80826,"byte_end":80832,"line_start":900,"line_end":900,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockWriteGuard>::rwlock","value":"fn (s: &Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":81315,"byte_end":81318,"line_start":913,"line_end":913,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockWriteGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockWriteGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":81294,"byte_end":81303,"line_start":912,"line_end":912,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":641},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":82134,"byte_end":82141,"line_start":933,"line_end":933,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockWriteGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockWriteGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":82113,"byte_end":82122,"line_start":932,"line_end":932,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":82797,"byte_end":82805,"line_start":951,"line_end":951,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockWriteGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":82776,"byte_end":82785,"line_start":950,"line_end":950,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":83416,"byte_end":83425,"line_start":968,"line_end":968,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockWriteGuard>::downgrade","value":"fn (s: Self) -> RwLockReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":84067,"byte_end":84090,"line_start":983,"line_end":983,"column_start":12,"column_end":35},"name":"downgrade_to_upgradable","qualname":"<RwLockWriteGuard>::downgrade_to_upgradable","value":"fn (s: Self) -> RwLockUpgradableReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into an upgradable read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":85202,"byte_end":85213,"line_start":1005,"line_end":1005,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockWriteGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":85181,"byte_end":85190,"line_start":1004,"line_end":1004,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":85603,"byte_end":85616,"line_start":1017,"line_end":1017,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockWriteGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":85582,"byte_end":85591,"line_start":1016,"line_end":1016,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":86107,"byte_end":86111,"line_start":1032,"line_end":1032,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockWriteGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":86086,"byte_end":86095,"line_start":1031,"line_end":1031,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":692},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":87453,"byte_end":87478,"line_start":1079,"line_end":1079,"column_start":12,"column_end":37},"name":"RwLockUpgradableReadGuard","qualname":"::rwlock::RwLockUpgradableReadGuard","value":"RwLockUpgradableReadGuard {  }","parent":null,"children":[{"krate":0,"index":696},{"krate":0,"index":697}],"decl_id":null,"docs":" RAII structure used to release the upgradable read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":87381,"byte_end":87441,"line_start":1078,"line_end":1078,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":87890,"byte_end":87896,"line_start":1091,"line_end":1091,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockUpgradableReadGuard>::rwlock","value":"fn (s: &Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":88189,"byte_end":88197,"line_start":1100,"line_end":1100,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockUpgradableReadGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":88168,"byte_end":88177,"line_start":1099,"line_end":1099,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":88539,"byte_end":88546,"line_start":1111,"line_end":1111,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<RwLockUpgradableReadGuard>::upgrade","value":"fn (s: Self) -> RwLockWriteGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically upgrades an upgradable read lock lock into a exclusive write lock,\n blocking the current thread until it can be acquired.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":88940,"byte_end":88951,"line_start":1121,"line_end":1121,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<RwLockUpgradableReadGuard>::try_upgrade","value":"fn (s: Self) -> Result<RwLockWriteGuard<'a, R, T>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":90138,"byte_end":90149,"line_start":1146,"line_end":1146,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockUpgradableReadGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":90117,"byte_end":90126,"line_start":1145,"line_end":1145,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":90540,"byte_end":90553,"line_start":1158,"line_end":1158,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockUpgradableReadGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":90519,"byte_end":90528,"line_start":1157,"line_end":1157,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":91056,"byte_end":91060,"line_start":1173,"line_end":1173,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockUpgradableReadGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":91035,"byte_end":91044,"line_start":1172,"line_end":1172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":91601,"byte_end":91610,"line_start":1186,"line_end":1186,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockUpgradableReadGuard>::downgrade","value":"fn (s: Self) -> RwLockReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades an upgradable read lock lock into a shared read lock\n without allowing any writers to take exclusive access of the lock in the\n meantime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":92169,"byte_end":92184,"line_start":1200,"line_end":1200,"column_start":12,"column_end":27},"name":"try_upgrade_for","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_for","value":"fn (s: Self, timeout: R::Duration) -> Result<RwLockWriteGuard<'a, R, T>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":92790,"byte_end":92807,"line_start":1219,"line_end":1219,"column_start":12,"column_end":29},"name":"try_upgrade_until","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_until","value":"fn (s: Self, timeout: R::Instant) -> Result<RwLockWriteGuard<'a, R, T>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":92769,"byte_end":92778,"line_start":1218,"line_end":1218,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":753},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":94607,"byte_end":94628,"line_start":1278,"line_end":1278,"column_start":12,"column_end":33},"name":"MappedRwLockReadGuard","qualname":"::rwlock::MappedRwLockReadGuard","value":"MappedRwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":759}],"decl_id":null,"docs":" An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":94535,"byte_end":94595,"line_start":1277,"line_end":1277,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":95474,"byte_end":95477,"line_start":1300,"line_end":1300,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockReadGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockReadGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":95453,"byte_end":95462,"line_start":1299,"line_end":1299,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":775},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":96267,"byte_end":96274,"line_start":1320,"line_end":1320,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockReadGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockReadGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":96246,"byte_end":96255,"line_start":1319,"line_end":1319,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":97554,"byte_end":97565,"line_start":1348,"line_end":1348,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockReadGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":97533,"byte_end":97542,"line_start":1347,"line_end":1347,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":804},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99035,"byte_end":99057,"line_start":1399,"line_end":1399,"column_start":12,"column_end":34},"name":"MappedRwLockWriteGuard","qualname":"::rwlock::MappedRwLockWriteGuard","value":"MappedRwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810}],"decl_id":null,"docs":" An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":98963,"byte_end":99023,"line_start":1398,"line_end":1398,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":823},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99916,"byte_end":99919,"line_start":1424,"line_end":1424,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockWriteGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockWriteGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99895,"byte_end":99904,"line_start":1423,"line_end":1423,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":100726,"byte_end":100733,"line_start":1444,"line_end":1444,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockWriteGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockWriteGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":100705,"byte_end":100714,"line_start":1443,"line_end":1443,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":833},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":101568,"byte_end":101577,"line_start":1465,"line_end":1465,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<MappedRwLockWriteGuard>::downgrade","value":"fn (s: Self) -> MappedRwLockReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":102696,"byte_end":102707,"line_start":1488,"line_end":1488,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockWriteGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":102675,"byte_end":102684,"line_start":1487,"line_end":1487,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8156,"byte_end":8161,"line_start":128,"line_end":128,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8230,"byte_end":8235,"line_start":129,"line_end":129,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8267,"byte_end":8272,"line_start":131,"line_end":131,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8941,"byte_end":8946,"line_start":154,"line_end":154,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11766,"byte_end":11771,"line_start":236,"line_end":236,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":12423,"byte_end":12428,"line_start":254,"line_end":254,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":13629,"byte_end":13634,"line_start":286,"line_end":286,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":13772,"byte_end":13777,"line_start":293,"line_end":293,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":13923,"byte_end":13928,"line_start":300,"line_end":300,"column_start":58,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":14217,"byte_end":14234,"line_start":306,"line_end":306,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":15060,"byte_end":15070,"line_start":329,"line_end":329,"column_start":74,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":15128,"byte_end":15138,"line_start":331,"line_end":331,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":17339,"byte_end":17349,"line_start":394,"line_end":394,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":19117,"byte_end":19127,"line_start":440,"line_end":440,"column_start":54,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":19311,"byte_end":19321,"line_start":448,"line_end":448,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":19496,"byte_end":19506,"line_start":455,"line_end":455,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":19671,"byte_end":19681,"line_start":462,"line_end":462,"column_start":72,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":19877,"byte_end":19887,"line_start":468,"line_end":468,"column_start":76,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":20753,"byte_end":20769,"line_start":492,"line_end":492,"column_start":9,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":20843,"byte_end":20859,"line_start":495,"line_end":495,"column_start":60,"column_end":76},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":20949,"byte_end":20965,"line_start":500,"line_end":500,"column_start":44,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":22624,"byte_end":22640,"line_start":544,"line_end":544,"column_start":48,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":23576,"byte_end":23592,"line_start":564,"line_end":564,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":23764,"byte_end":23780,"line_start":572,"line_end":572,"column_start":57,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":23943,"byte_end":23959,"line_start":579,"line_end":579,"column_start":53,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":24118,"byte_end":24134,"line_start":586,"line_end":586,"column_start":72,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":24334,"byte_end":24350,"line_start":593,"line_end":593,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":26121,"byte_end":26138,"line_start":54,"line_end":54,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":27304,"byte_end":27321,"line_start":97,"line_end":97,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":250},{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":27927,"byte_end":27944,"line_start":119,"line_end":119,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":257}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":29630,"byte_end":29644,"line_start":179,"line_end":179,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":29744,"byte_end":29758,"line_start":183,"line_end":183,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":29810,"byte_end":29824,"line_start":187,"line_end":187,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":277},{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":31008,"byte_end":31022,"line_start":226,"line_end":226,"column_start":46,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34052,"byte_end":34066,"line_start":309,"line_end":309,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34755,"byte_end":34769,"line_start":327,"line_end":327,"column_start":51,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":298},{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":36013,"byte_end":36027,"line_start":359,"line_end":359,"column_start":68,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":36205,"byte_end":36219,"line_start":366,"line_end":366,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":36405,"byte_end":36419,"line_start":373,"line_end":373,"column_start":74,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":36720,"byte_end":36737,"line_start":379,"line_end":379,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":37639,"byte_end":37658,"line_start":403,"line_end":403,"column_start":9,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":37741,"byte_end":37760,"line_start":407,"line_end":407,"column_start":65,"column_end":84},"value":"","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":340},{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":40133,"byte_end":40152,"line_start":474,"line_end":474,"column_start":5,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":41965,"byte_end":41984,"line_start":522,"line_end":522,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":361},{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":42194,"byte_end":42213,"line_start":532,"line_end":532,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":42408,"byte_end":42427,"line_start":541,"line_end":541,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":42651,"byte_end":42670,"line_start":549,"line_end":549,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":43686,"byte_end":43711,"line_start":577,"line_end":577,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":43798,"byte_end":43823,"line_start":582,"line_end":582,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":399},{"krate":0,"index":402}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":45605,"byte_end":45630,"line_start":631,"line_end":631,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":46603,"byte_end":46628,"line_start":653,"line_end":653,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":416},{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":46824,"byte_end":46849,"line_start":663,"line_end":663,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":47036,"byte_end":47061,"line_start":672,"line_end":672,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":429}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":47285,"byte_end":47310,"line_start":680,"line_end":680,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":435}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":57672,"byte_end":57678,"line_start":265,"line_end":265,"column_start":61,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":57755,"byte_end":57761,"line_start":266,"line_end":266,"column_start":68,"column_end":74},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":57794,"byte_end":57800,"line_start":268,"line_end":268,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":505},{"krate":0,"index":506}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":58485,"byte_end":58491,"line_start":291,"line_end":291,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63498,"byte_end":63504,"line_start":432,"line_end":432,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":523},{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64843,"byte_end":64849,"line_start":466,"line_end":466,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":67431,"byte_end":67437,"line_start":532,"line_end":532,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":535},{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":69254,"byte_end":69260,"line_start":576,"line_end":576,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":540},{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":70843,"byte_end":70849,"line_start":620,"line_end":620,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":72457,"byte_end":72463,"line_start":663,"line_end":663,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":551},{"krate":0,"index":552}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":73895,"byte_end":73901,"line_start":703,"line_end":703,"column_start":53,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":74042,"byte_end":74048,"line_start":710,"line_end":710,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":74197,"byte_end":74203,"line_start":717,"line_end":717,"column_start":59,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":564}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":74493,"byte_end":74510,"line_start":723,"line_end":723,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":568}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":75153,"byte_end":75168,"line_start":743,"line_end":743,"column_start":68,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":75227,"byte_end":75242,"line_start":745,"line_end":745,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":587},{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":77572,"byte_end":77587,"line_start":810,"line_end":810,"column_start":49,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":601}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":79420,"byte_end":79435,"line_start":856,"line_end":856,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":606},{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":79617,"byte_end":79632,"line_start":864,"line_end":864,"column_start":54,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":79806,"byte_end":79821,"line_start":871,"line_end":871,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":617}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":80022,"byte_end":80037,"line_start":878,"line_end":878,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":80640,"byte_end":80656,"line_start":896,"line_end":896,"column_start":68,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":80715,"byte_end":80731,"line_start":898,"line_end":898,"column_start":45,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":641},{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":83041,"byte_end":83057,"line_start":961,"line_end":961,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":651}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":83680,"byte_end":83696,"line_start":976,"line_end":976,"column_start":61,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":84367,"byte_end":84383,"line_start":991,"line_end":991,"column_start":49,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":665}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":86230,"byte_end":86246,"line_start":1037,"line_end":1037,"column_start":55,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":670},{"krate":0,"index":671}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":86432,"byte_end":86448,"line_start":1045,"line_end":1045,"column_start":58,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":676}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":86625,"byte_end":86641,"line_start":1052,"line_end":1052,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":86818,"byte_end":86834,"line_start":1059,"line_end":1059,"column_start":73,"column_end":89},"value":"","parent":null,"children":[{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":87035,"byte_end":87051,"line_start":1066,"line_end":1066,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":691}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":87678,"byte_end":87703,"line_start":1085,"line_end":1085,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":87770,"byte_end":87795,"line_start":1089,"line_end":1089,"column_start":52,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":710},{"krate":0,"index":711}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":89285,"byte_end":89310,"line_start":1132,"line_end":1132,"column_start":56,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":720}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":91186,"byte_end":91211,"line_start":1178,"line_end":1178,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":725}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":91872,"byte_end":91897,"line_start":1194,"line_end":1194,"column_start":57,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":730},{"krate":0,"index":731}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":93204,"byte_end":93229,"line_start":1233,"line_end":1233,"column_start":62,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":736},{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":93418,"byte_end":93443,"line_start":1241,"line_end":1241,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":742}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":93632,"byte_end":93657,"line_start":1249,"line_end":1249,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":747}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":93865,"byte_end":93890,"line_start":1257,"line_end":1257,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":752}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":94798,"byte_end":94819,"line_start":1284,"line_end":1284,"column_start":68,"column_end":89},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":94893,"byte_end":94914,"line_start":1285,"line_end":1285,"column_start":61,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":95005,"byte_end":95026,"line_start":1290,"line_end":1290,"column_start":45,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":772},{"krate":0,"index":775}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":96709,"byte_end":96730,"line_start":1334,"line_end":1334,"column_start":49,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":782}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":97700,"byte_end":97721,"line_start":1354,"line_end":1354,"column_start":55,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":787},{"krate":0,"index":788}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":97890,"byte_end":97911,"line_start":1362,"line_end":1362,"column_start":54,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":793}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":98082,"byte_end":98103,"line_start":1370,"line_end":1370,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":98304,"byte_end":98325,"line_start":1378,"line_end":1378,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":803}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99233,"byte_end":99255,"line_start":1406,"line_end":1406,"column_start":9,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99330,"byte_end":99352,"line_start":1409,"line_end":1409,"column_start":61,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99443,"byte_end":99465,"line_start":1414,"line_end":1414,"column_start":45,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":823},{"krate":0,"index":826}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":101187,"byte_end":101209,"line_start":1458,"line_end":1458,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":101849,"byte_end":101871,"line_start":1474,"line_end":1474,"column_start":49,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":102845,"byte_end":102867,"line_start":1494,"line_end":1494,"column_start":55,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":843},{"krate":0,"index":844}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":103040,"byte_end":103062,"line_start":1502,"line_end":1502,"column_start":58,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":103226,"byte_end":103248,"line_start":1509,"line_end":1509,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":854}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":103422,"byte_end":103444,"line_start":1517,"line_end":1517,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":859}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":103645,"byte_end":103667,"line_start":1525,"line_end":1525,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":5790,"byte_end":5798,"line_start":53,"line_end":53,"column_start":32,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":28},"to":{"krate":0,"index":34}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":6486,"byte_end":6494,"line_start":72,"line_end":72,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":28},"to":{"krate":0,"index":37}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8156,"byte_end":8161,"line_start":128,"line_end":128,"column_start":60,"column_end":65},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":42},"to":{"krate":1,"index":1437}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8230,"byte_end":8235,"line_start":129,"line_end":129,"column_start":60,"column_end":65},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":42},"to":{"krate":1,"index":1446}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8267,"byte_end":8272,"line_start":131,"line_end":131,"column_start":22,"column_end":27},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":42},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":8941,"byte_end":8946,"line_start":154,"line_end":154,"column_start":30,"column_end":35},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":42},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":11766,"byte_end":11771,"line_start":236,"line_end":236,"column_start":34,"column_end":39},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":42},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":12423,"byte_end":12428,"line_start":254,"line_end":254,"column_start":35,"column_end":40},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":42},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":13629,"byte_end":13634,"line_start":286,"line_end":286,"column_start":52,"column_end":57},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":42},"to":{"krate":1,"index":2080}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":13772,"byte_end":13777,"line_start":293,"line_end":293,"column_start":34,"column_end":39},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":42},"to":{"krate":1,"index":2096}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":13923,"byte_end":13928,"line_start":300,"line_end":300,"column_start":58,"column_end":63},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":42},"to":{"krate":1,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":14217,"byte_end":14234,"line_start":306,"line_end":306,"column_start":37,"column_end":54},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":15060,"byte_end":15070,"line_start":329,"line_end":329,"column_start":74,"column_end":84},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":92},"to":{"krate":1,"index":1446}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":15128,"byte_end":15138,"line_start":331,"line_end":331,"column_start":44,"column_end":54},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":92},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":17339,"byte_end":17349,"line_start":394,"line_end":394,"column_start":48,"column_end":58},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":92},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":19117,"byte_end":19127,"line_start":440,"line_end":440,"column_start":54,"column_end":64},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":92},"to":{"krate":1,"index":1601}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":19311,"byte_end":19321,"line_start":448,"line_end":448,"column_start":57,"column_end":67},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":92},"to":{"krate":1,"index":1612}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":19496,"byte_end":19506,"line_start":455,"line_end":455,"column_start":53,"column_end":63},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":92},"to":{"krate":1,"index":1623}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":19671,"byte_end":19681,"line_start":462,"line_end":462,"column_start":72,"column_end":82},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":92},"to":{"krate":1,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":19877,"byte_end":19887,"line_start":468,"line_end":468,"column_start":76,"column_end":86},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":92},"to":{"krate":1,"index":6826}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":20753,"byte_end":20769,"line_start":492,"line_end":492,"column_start":9,"column_end":25},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":151},"to":{"krate":1,"index":1446}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":20843,"byte_end":20859,"line_start":495,"line_end":495,"column_start":60,"column_end":76},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":151},"to":{"krate":1,"index":1437}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":20949,"byte_end":20965,"line_start":500,"line_end":500,"column_start":44,"column_end":60},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":151},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":22624,"byte_end":22640,"line_start":544,"line_end":544,"column_start":48,"column_end":64},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":151},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":23576,"byte_end":23592,"line_start":564,"line_end":564,"column_start":54,"column_end":70},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":151},"to":{"krate":1,"index":1601}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":23764,"byte_end":23780,"line_start":572,"line_end":572,"column_start":57,"column_end":73},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":151},"to":{"krate":1,"index":1612}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":23943,"byte_end":23959,"line_start":579,"line_end":579,"column_start":53,"column_end":69},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":151},"to":{"krate":1,"index":1623}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":24118,"byte_end":24134,"line_start":586,"line_end":586,"column_start":72,"column_end":88},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":151},"to":{"krate":1,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/mutex.rs","byte_start":24334,"byte_end":24350,"line_start":593,"line_end":593,"column_start":9,"column_end":25},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":151},"to":{"krate":1,"index":6826}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":26121,"byte_end":26138,"line_start":54,"line_end":54,"column_start":35,"column_end":52},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":230},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":27304,"byte_end":27321,"line_start":97,"line_end":97,"column_start":39,"column_end":56},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":230},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":27927,"byte_end":27944,"line_start":119,"line_end":119,"column_start":40,"column_end":57},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":230},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":29630,"byte_end":29644,"line_start":179,"line_end":179,"column_start":9,"column_end":23},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":259},"to":{"krate":1,"index":1437}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":29744,"byte_end":29758,"line_start":183,"line_end":183,"column_start":9,"column_end":23},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":259},"to":{"krate":1,"index":1446}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":29810,"byte_end":29824,"line_start":187,"line_end":187,"column_start":38,"column_end":52},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":259},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":31008,"byte_end":31022,"line_start":226,"line_end":226,"column_start":46,"column_end":60},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":259},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34052,"byte_end":34066,"line_start":309,"line_end":309,"column_start":50,"column_end":64},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":259},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":34755,"byte_end":34769,"line_start":327,"line_end":327,"column_start":51,"column_end":65},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":259},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":36013,"byte_end":36027,"line_start":359,"line_end":359,"column_start":68,"column_end":82},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":259},"to":{"krate":1,"index":2080}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":36205,"byte_end":36219,"line_start":366,"line_end":366,"column_start":50,"column_end":64},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":259},"to":{"krate":1,"index":2096}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":36405,"byte_end":36419,"line_start":373,"line_end":373,"column_start":74,"column_end":88},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":259},"to":{"krate":1,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":36720,"byte_end":36737,"line_start":379,"line_end":379,"column_start":37,"column_end":54},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":315},"to":{"krate":1,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":37639,"byte_end":37658,"line_start":403,"line_end":403,"column_start":9,"column_end":28},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":319},"to":{"krate":1,"index":1446}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":37741,"byte_end":37760,"line_start":407,"line_end":407,"column_start":65,"column_end":84},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":319},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":40133,"byte_end":40152,"line_start":474,"line_end":474,"column_start":5,"column_end":24},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":319},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":41965,"byte_end":41984,"line_start":522,"line_end":522,"column_start":9,"column_end":28},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":319},"to":{"krate":1,"index":1601}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":42194,"byte_end":42213,"line_start":532,"line_end":532,"column_start":9,"column_end":28},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":319},"to":{"krate":1,"index":1623}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":42408,"byte_end":42427,"line_start":541,"line_end":541,"column_start":9,"column_end":28},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":319},"to":{"krate":1,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":42651,"byte_end":42670,"line_start":549,"line_end":549,"column_start":9,"column_end":28},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":319},"to":{"krate":1,"index":6826}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":43686,"byte_end":43711,"line_start":577,"line_end":577,"column_start":9,"column_end":34},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":1446}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":43798,"byte_end":43823,"line_start":582,"line_end":582,"column_start":5,"column_end":30},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":381},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":45605,"byte_end":45630,"line_start":631,"line_end":631,"column_start":5,"column_end":30},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":381},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":46603,"byte_end":46628,"line_start":653,"line_end":653,"column_start":9,"column_end":34},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":1601}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":46824,"byte_end":46849,"line_start":663,"line_end":663,"column_start":9,"column_end":34},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":1623}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":47036,"byte_end":47061,"line_start":672,"line_end":672,"column_start":9,"column_end":34},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/remutex.rs","byte_start":47285,"byte_end":47310,"line_start":680,"line_end":680,"column_start":9,"column_end":34},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":6826}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":49872,"byte_end":49881,"line_start":64,"line_end":64,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":445},"to":{"krate":0,"index":454}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51037,"byte_end":51046,"line_start":94,"line_end":94,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":445},"to":{"krate":0,"index":459}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":51469,"byte_end":51478,"line_start":104,"line_end":104,"column_start":34,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":445},"to":{"krate":0,"index":461}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":52598,"byte_end":52607,"line_start":131,"line_end":131,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":445},"to":{"krate":0,"index":468}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":52997,"byte_end":53015,"line_start":140,"line_end":140,"column_start":43,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":468},"to":{"krate":0,"index":471}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":53018,"byte_end":53032,"line_start":140,"line_end":140,"column_start":64,"column_end":78},"kind":"SuperTrait","from":{"krate":0,"index":461},"to":{"krate":0,"index":471}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":53800,"byte_end":53809,"line_start":156,"line_end":156,"column_start":36,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":445},"to":{"krate":0,"index":474}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54459,"byte_end":54475,"line_start":176,"line_end":176,"column_start":40,"column_end":56},"kind":"SuperTrait","from":{"krate":0,"index":474},"to":{"krate":0,"index":480}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":54478,"byte_end":54491,"line_start":176,"line_end":176,"column_start":59,"column_end":72},"kind":"SuperTrait","from":{"krate":0,"index":454},"to":{"krate":0,"index":480}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55154,"byte_end":55170,"line_start":193,"line_end":193,"column_start":45,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":474},"to":{"krate":0,"index":483}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55173,"byte_end":55191,"line_start":193,"line_end":193,"column_start":64,"column_end":82},"kind":"SuperTrait","from":{"krate":0,"index":459},"to":{"krate":0,"index":483}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55526,"byte_end":55542,"line_start":203,"line_end":203,"column_start":41,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":474},"to":{"krate":0,"index":486}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":55545,"byte_end":55559,"line_start":203,"line_end":203,"column_start":60,"column_end":74},"kind":"SuperTrait","from":{"krate":0,"index":461},"to":{"krate":0,"index":486}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":57672,"byte_end":57678,"line_start":265,"line_end":265,"column_start":61,"column_end":67},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":491},"to":{"krate":1,"index":1437}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":57755,"byte_end":57761,"line_start":266,"line_end":266,"column_start":68,"column_end":74},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":491},"to":{"krate":1,"index":1446}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":57794,"byte_end":57800,"line_start":268,"line_end":268,"column_start":23,"column_end":29},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":58485,"byte_end":58491,"line_start":291,"line_end":291,"column_start":31,"column_end":37},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":63498,"byte_end":63504,"line_start":432,"line_end":432,"column_start":35,"column_end":41},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":64843,"byte_end":64849,"line_start":466,"line_end":466,"column_start":36,"column_end":42},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":67431,"byte_end":67437,"line_start":532,"line_end":532,"column_start":40,"column_end":46},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":69254,"byte_end":69260,"line_start":576,"line_end":576,"column_start":45,"column_end":51},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":70843,"byte_end":70849,"line_start":620,"line_end":620,"column_start":38,"column_end":44},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":72457,"byte_end":72463,"line_start":663,"line_end":663,"column_start":43,"column_end":49},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":73895,"byte_end":73901,"line_start":703,"line_end":703,"column_start":53,"column_end":59},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":491},"to":{"krate":1,"index":2080}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":74042,"byte_end":74048,"line_start":710,"line_end":710,"column_start":35,"column_end":41},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":491},"to":{"krate":1,"index":2096}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":74197,"byte_end":74203,"line_start":717,"line_end":717,"column_start":59,"column_end":65},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":491},"to":{"krate":1,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":74493,"byte_end":74510,"line_start":723,"line_end":723,"column_start":37,"column_end":54},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":565},"to":{"krate":1,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":75153,"byte_end":75168,"line_start":743,"line_end":743,"column_start":68,"column_end":83},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":569},"to":{"krate":1,"index":1446}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":75227,"byte_end":75242,"line_start":745,"line_end":745,"column_start":45,"column_end":60},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":569},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":77572,"byte_end":77587,"line_start":810,"line_end":810,"column_start":49,"column_end":64},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":569},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":79420,"byte_end":79435,"line_start":856,"line_end":856,"column_start":55,"column_end":70},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":569},"to":{"krate":1,"index":1601}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":79617,"byte_end":79632,"line_start":864,"line_end":864,"column_start":54,"column_end":69},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":569},"to":{"krate":1,"index":1623}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":79806,"byte_end":79821,"line_start":871,"line_end":871,"column_start":73,"column_end":88},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":569},"to":{"krate":1,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":80022,"byte_end":80037,"line_start":878,"line_end":878,"column_start":9,"column_end":24},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":569},"to":{"krate":1,"index":6826}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":80640,"byte_end":80656,"line_start":896,"line_end":896,"column_start":68,"column_end":84},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":623},"to":{"krate":1,"index":1446}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":80715,"byte_end":80731,"line_start":898,"line_end":898,"column_start":45,"column_end":61},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":623},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":83041,"byte_end":83057,"line_start":961,"line_end":961,"column_start":54,"column_end":70},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":623},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":83680,"byte_end":83696,"line_start":976,"line_end":976,"column_start":61,"column_end":77},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":623},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":84367,"byte_end":84383,"line_start":991,"line_end":991,"column_start":49,"column_end":65},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":623},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":86230,"byte_end":86246,"line_start":1037,"line_end":1037,"column_start":55,"column_end":71},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":623},"to":{"krate":1,"index":1601}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":86432,"byte_end":86448,"line_start":1045,"line_end":1045,"column_start":58,"column_end":74},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":623},"to":{"krate":1,"index":1612}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":86625,"byte_end":86641,"line_start":1052,"line_end":1052,"column_start":54,"column_end":70},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":623},"to":{"krate":1,"index":1623}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":86818,"byte_end":86834,"line_start":1059,"line_end":1059,"column_start":73,"column_end":89},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":623},"to":{"krate":1,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":87035,"byte_end":87051,"line_start":1066,"line_end":1066,"column_start":9,"column_end":25},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":623},"to":{"krate":1,"index":6826}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":87678,"byte_end":87703,"line_start":1085,"line_end":1085,"column_start":9,"column_end":34},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":692},"to":{"krate":1,"index":1446}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":87770,"byte_end":87795,"line_start":1089,"line_end":1089,"column_start":52,"column_end":77},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":692},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":89285,"byte_end":89310,"line_start":1132,"line_end":1132,"column_start":56,"column_end":81},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":692},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":91186,"byte_end":91211,"line_start":1178,"line_end":1178,"column_start":61,"column_end":86},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":692},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":91872,"byte_end":91897,"line_start":1194,"line_end":1194,"column_start":57,"column_end":82},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":692},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":93204,"byte_end":93229,"line_start":1233,"line_end":1233,"column_start":62,"column_end":87},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":692},"to":{"krate":1,"index":1601}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":93418,"byte_end":93443,"line_start":1241,"line_end":1241,"column_start":61,"column_end":86},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":692},"to":{"krate":1,"index":1623}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":93632,"byte_end":93657,"line_start":1249,"line_end":1249,"column_start":9,"column_end":34},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":692},"to":{"krate":1,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":93865,"byte_end":93890,"line_start":1257,"line_end":1257,"column_start":9,"column_end":34},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":692},"to":{"krate":1,"index":6826}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":94798,"byte_end":94819,"line_start":1284,"line_end":1284,"column_start":68,"column_end":89},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":753},"to":{"krate":1,"index":1446}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":94893,"byte_end":94914,"line_start":1285,"line_end":1285,"column_start":61,"column_end":82},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":753},"to":{"krate":1,"index":1437}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":95005,"byte_end":95026,"line_start":1290,"line_end":1290,"column_start":45,"column_end":66},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":753},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":96709,"byte_end":96730,"line_start":1334,"line_end":1334,"column_start":49,"column_end":70},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":753},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":97700,"byte_end":97721,"line_start":1354,"line_end":1354,"column_start":55,"column_end":76},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":753},"to":{"krate":1,"index":1601}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":97890,"byte_end":97911,"line_start":1362,"line_end":1362,"column_start":54,"column_end":75},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":753},"to":{"krate":1,"index":1623}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":98082,"byte_end":98103,"line_start":1370,"line_end":1370,"column_start":9,"column_end":30},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":753},"to":{"krate":1,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":98304,"byte_end":98325,"line_start":1378,"line_end":1378,"column_start":9,"column_end":30},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":753},"to":{"krate":1,"index":6826}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99233,"byte_end":99255,"line_start":1406,"line_end":1406,"column_start":9,"column_end":31},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":804},"to":{"krate":1,"index":1446}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99330,"byte_end":99352,"line_start":1409,"line_end":1409,"column_start":61,"column_end":83},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":804},"to":{"krate":1,"index":1437}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":99443,"byte_end":99465,"line_start":1414,"line_end":1414,"column_start":45,"column_end":67},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":804},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":101187,"byte_end":101209,"line_start":1458,"line_end":1458,"column_start":54,"column_end":76},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":804},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":101849,"byte_end":101871,"line_start":1474,"line_end":1474,"column_start":49,"column_end":71},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":804},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":102845,"byte_end":102867,"line_start":1494,"line_end":1494,"column_start":55,"column_end":77},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":804},"to":{"krate":1,"index":1601}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":103040,"byte_end":103062,"line_start":1502,"line_end":1502,"column_start":58,"column_end":80},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":804},"to":{"krate":1,"index":1612}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":103226,"byte_end":103248,"line_start":1509,"line_end":1509,"column_start":54,"column_end":76},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":804},"to":{"krate":1,"index":1623}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":103422,"byte_end":103444,"line_start":1517,"line_end":1517,"column_start":9,"column_end":31},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":804},"to":{"krate":1,"index":6824}},{"span":{"file_name":"/home/endre/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.1/src/rwlock.rs","byte_start":103645,"byte_end":103667,"line_start":1525,"line_end":1525,"column_start":9,"column_end":31},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":804},"to":{"krate":1,"index":6826}}]}