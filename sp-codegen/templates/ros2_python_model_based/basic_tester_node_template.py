#----------------------------------------------------------------------------------------------------------------------#
# authors, description, version
#----------------------------------------------------------------------------------------------------------------------#
    # Endre Er{\H o}s
    # Autogenerated ROS2 emulator using jinja2
    # V.1.0.0.
#----------------------------------------------------------------------------------------------------------------------#

from hypothesis import given, assume, settings, note, strategies as st
import sys
import rclpy
from time import sleep
from {{ package_name }}.msg import {{ message_type_sp_to_interfacer }}
from {{ package_name }}.msg import {{ message_type_interfacer_to_sp }}

cmdMsg = st.fixed_dictionaries({
    {% for item in cmd_vars %}
    '{{item}}' : st.booleans(),
    {%- endfor %}
})


@given(cmdMsg)
@settings(max_examples=50, deadline=None)
def test_{{ resource_name }}_random(data):
    state_topic = "/{{ resource_name }}_interfacer_to_sp"
    control_topic = "/{{ resource_name }}_sp_to_interfacer"

    pl = {{ updates }}

    rclpy.init(args=None)
    node = rclpy.create_node('test_{{ resource_name }}_random')
    publisher = node.create_publisher( {{ message_type_sp_to_interfacer }}, control_topic, 10)
    cmd = {{ message_type_sp_to_interfacer}}()
    {% for item in cmd_vars %}
    cmd.{{item}} = data['{{item}}']
    {%- endfor %}

    test_started = False
    test_succeeded = False
    test_timeout = False
    test_no_response = True
    counter = 0
    result = 0
    last_seen_msg = 0

    tt = 20

    def state_callback(msg):
        nonlocal test_started, test_succeeded, result, tt, test_no_response, cmd, last_seen_msg

        last_seen_msg = msg

        test_no_response = False

        if not test_started:
            # is there a matching predicate?
            match = False

            for x in pl:

                predicate = ""

                for variable in x[1][0]:

                    invert = False

                    if "!" in variable:
                        invert = True
                        variable = variable[1:]


                    if "set_" in variable:
                        variable = "cmd." + variable
                    else:
                        variable = "msg." + variable

                    if invert:
                        predicate = predicate + "not " + variable + " and "
                    else:
                        predicate = predicate + variable + " and "

                predicate = predicate + "True"


                if eval(predicate):
                    note("predicate %r" % predicate)
                    note("message triggering %r" % msg)

                    match = True
                    result = x
                    break

            if not match :
                print("-----------------------------------------------------------")
                print("-- WARNING: No matching predicate for state combination: --")
                print(msg)
                print(cmd)
                print("-----------------------------------------------------------")
            else:
                # start listening for desired effect
                test_started = True
                tt = 100

        if test_started:  # may be on the same message

            # we are waiting for our desired effect(s) which are in result[2]

            predicate = ""
            for x in result[2]:
                # need to transform assignment into comparison
                isfalse = False
                if x.endswith(" = False"):
                    x = x[:-8]
                    isfalse = True
                elif x.endswith(" = True"):
                    x = x[:-7]

                # great hacks
                if x.startswith("self."):
                    x = x[5:]

                if isfalse:
                    predicate = predicate + "not  msg." + x + " and "
                else:
                    predicate = predicate + "msg." + x + " and "

            predicate = predicate + "True"

            # print("before eval effect: " + predicate)

            if eval(predicate):
                print("success!")
                test_succeeded = True

    subscription = node.create_subscription({{ message_type_interfacer_to_sp }}, state_topic, state_callback, 10)

    def timer_callback():
        nonlocal counter, test_timeout, tt

        # publish our messages continually
        publisher.publish(cmd)

        counter+=1
        if counter > tt:
            test_timeout = True


    timer_period = 0.1
    timer = node.create_timer(timer_period, timer_callback)

    # subscription  # prevent unused variable warning

    while not test_succeeded and not test_timeout:
        rclpy.spin_once(node)
        sleep(0.01)


    # Destroy the timer attached to the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    node.destroy_timer(timer)
    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    node.destroy_node()
    rclpy.shutdown()


    # if not started its just ok after the timeout
    if test_started:
        if not test_succeeded:
            print("")
            print("-----------------------------------------------------------")
            print("-- FAILURE: Expected: --")
            print(result[2])
            print("-- LAST MESSAGE SEEN: --")
            print(last_seen_msg)
            print("-- COMMAND MSG: --")
            print(cmd)
            print("-----------------------------------------------------------")
            print("")

            print(result[2])
            print(last_seen_msg)

        assert test_succeeded, "Node did not produce desired effect within time limit"
    else:
        assert not test_no_response, "No replies, is the driver node up?"

if __name__ == '__main__':
    test_{{ resource_name }}_random()
# below for when hypo-stuff commented away above
#     test_{{ resource_name }}_random({'set_idle': True, 'set_running_forw': False})
