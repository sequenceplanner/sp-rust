#----------------------------------------------------------------------------------------------------------------------#
# authors, description, version
#----------------------------------------------------------------------------------------------------------------------#
    # Endre Er{\H o}s
    # SP model based Autogenerated ROS2 {{ resource_name }} interfacer node using jinja2
    # V.1.0.2.
#----------------------------------------------------------------------------------------------------------------------#

import sys
import rclpy
import time
from rclpy.node import Node
from {{ package_name }}.msg import {{ message_type_sp_to_interfacer }}
from {{ package_name }}.msg import {{ message_type_interfacer_to_sp }}
from {{ package_name }}.msg import {{ message_type_driver_to_interfacer }}
from {{ package_name }}.msg import {{ message_type_interfacer_to_driver }}

class {{ capitalized_resource_name }}Interfacer(Node):

    def __init__(self):
        super().__init__("{{ resource_name }}_interfacer")

        self.msg_sp_to_interfacer = {{ message_type_sp_to_interfacer }}()
        self.msg_interfacer_to_sp = {{ message_type_interfacer_to_sp }}()
        self.msg_driver_to_interfacer = {{ message_type_driver_to_interfacer }}()
        self.msg_interfacer_to_driver = {{ message_type_interfacer_to_driver }}()

        self.interfacer_to_sp_tmr_period = 0.5
        self.interfacer_to_driver_tmr_period = 0.5

        # Be careful what init values are since they are being published immediately the node is up!
        {% for item in measured_variables %}
        self.{{ item }} = False
        {%- endfor %}
        {% for item in command_variables %}
        self.{{ item }} = False
        self.got_{{ item }} = False
        {%- endfor %}

        # Could be good to start the subscribers first so that they update the variables if other nodes are up
        self.{{ resource_name }}_sp_to_interfacer_subscriber = self.create_subscription(
            {{ message_type_sp_to_interfacer }}, 
            "/{{ resource_name }}_sp_to_interfacer",
            self.{{ resource_name }}_sp_to_interfacer_callback,
            10)

        self.{{ resource_name }}_driver_to_interfacer_subscriber = self.create_subscription(
            {{ message_type_driver_to_interfacer }},
            "/{{ resource_name }}_driver_to_interfacer",
            self.{{ resource_name }}_driver_to_interfacer_callback,
            10)

        # Then sleep for a bit so that the node get the updated variables before publishing them
        time.sleep(2)

        self.{{ resource_name }}_interfacer_to_sp_publisher_ = self.create_publisher(
            {{ message_type_interfacer_to_sp }},
            "/{{ resource_name }}_interfacer_to_sp",
            10)

        self.{{ resource_name }}_interfacer_to_driver_publisher_ = self.create_publisher(
            {{ message_type_interfacer_to_driver }},
            "/{{ resource_name }}_interfacer_to_driver",
            10)
    
        # Decouple message receiving and forwarding
        self.interfacer_to_sp_tmr = self.create_timer(
            self.interfacer_to_sp_tmr_period, 
            self.interfacer_to_sp_publisher_callback)

        self.interfacer_to_driver_tmr = self.create_timer(
            self.interfacer_to_driver_tmr_period, 
            self.interfacer_to_driver_publisher_callback)

    # Publish init values of vars to SP or publish the latest received from the driver
    def interfacer_to_sp_publisher_callback(self):
        {% for item in measured_variables %}
        self.msg_interfacer_to_sp.{{ item }} = self.{{ item }}
        {%- endfor %}
        {% for item in command_variables %}
        self.msg_interfacer_to_sp.got_{{ item }} = self.got_{{ item }}
        {%- endfor %}

        self.{{ resource_name }}_interfacer_to_sp_publisher_.publish(self.msg_interfacer_to_sp)

    # Publish init values of vars to the driver node or the latest receive cmd from SP
    def interfacer_to_driver_publisher_callback(self):
        {% for item in command_variables %}
        self.msg_interfacer_to_driver.{{ item }} = self.{{ item }}
        {%- endfor %}

        self.{{ resource_name }}_interfacer_to_driver_publisher_.publish(self.msg_interfacer_to_driver)

    # SP updating the command variables
    def {{ resource_name }}_sp_to_interfacer_callback(self, data):
        {% for item in command_variables %}
        self.{{ item }} = data.{{ item }}
        self.msg_interfacer_to_driver.{{ item }} = self.{{ item }}
        {%- endfor %}

    # Driver updating the measured variables
    def {{ resource_name }}_driver_to_interfacer_callback(self, data):
        {% for item in measured_variables %}
        self.{{ item }} = data.{{ item }}
        {%- endfor %}
        {% for item in command_variables %}
        self.got_{{ item }} = data.got_{{ item }}
        {%- endfor %}

def main(args=None):
    rclpy.init(args=args)

    {{ resource_name }}_interfacer = {{ capitalized_resource_name }}Interfacer()

    rclpy.spin({{ resource_name }}_interfacer)

    {{ resource_name }}_interfacer.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()